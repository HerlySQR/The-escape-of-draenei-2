package DrAndDeSpawn

import public UnitIndexer
import Orders
import DamageEvent
import ObjectIdGenerator
import AbilityObjEditing
import UpgradeObjEditing
import ObjectIds
import Abilities
import LinkedList

import Functions
import public PlayerData
import initlater Missions
import GeneratedValues

import BountyController

public boolean spawnRun = false


public constant attackers = CreateGroup()
public constant drUnits = CreateGroup()
public constant deUnits = CreateGroup()
public constant DRAENEI_WARRIOR = [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
public constant DRAENEI_MAGE = [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]

public constant CHAOS_GRUNT = [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
public constant CHAOS_WARLOCK = [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]

public constant ADVANCE_DEATH_TOWER = compiletime(UNIT_ID_GEN.next())
public constant DEATH_TOWER_1 = compiletime(UNIT_ID_GEN.next())
public constant DEATH_TOWER_2 = compiletime(UNIT_ID_GEN.next())
public constant DEATH_TOWER_3 = compiletime(UNIT_ID_GEN.next())

public constant attackPoint1 = Rects.attackPoint1.getCenter()
public constant attackPoint2 = Rects.attackPoint2.getCenter()
public constant attackPoint3 = Rects.attackPoint3.getCenter()
public constant attackPoint4 = Rects.attackPoint4.getCenter()
public constant attackPoint5 = Rects.attackPoint5.getCenter()

public constant drSpw = Rects.draeneiSpawn.getCenter()
public constant deSpw1 = Rects.demonSpawn1.getCenter()
public constant deSpw21 = Rects.demonSpawn21.getCenter()
public constant deSpw22 = Rects.demonSpawn21.getCenter()
public constant deSpw31 = Rects.demonSpawn31.getCenter()
public constant deSpw32 = Rects.demonSpawn31.getCenter()

public vec2 array target
public unit array targetHero

let drAttackWaves = new LinkedList<group>()
let deAttackWaves = new LinkedList<group>()

public function getRandomLastDr() returns unit
    let g = drAttackWaves.getFirst()
    if g != null
        return g.getRandom()
    return null
    
public function getRandomLastDe() returns unit
    let g = deAttackWaves.getFirst()
    if g != null
        return g.getRandom()
    return null

function unit.insertToDrWaves()
    let g = drAttackWaves.peek()
    if g != null
        g.add(this)

function unit.insertToDeWaves()
    let g = deAttackWaves.peek()
    if g != null
        g.add(this)

function addNewDrWave()
    let g = drAttackWaves.peek()
    if g == null or not g.isEmpty()
        drAttackWaves.add(CreateGroup())

function addNewDeWave()
    let g = deAttackWaves.peek()
    if g == null or not g.isEmpty()
        deAttackWaves.add(CreateGroup())

init
    doPeriodically(1., cb -> begin
        for g in drAttackWaves
            for u in g
                if not u.isAlive()
                    g.remove(u)
            if g.isEmpty()
                drAttackWaves.remove(g)
        for g in deAttackWaves
            for u in g
                if not u.isAlive()
                    g.remove(u)
            if g.isEmpty()
                deAttackWaves.remove(g)
                g.destr()
    end)

let DUMMY_DAMAGE_UPGRADES = [compiletime(UPGD_ID_GEN.next()), compiletime(UPGD_ID_GEN.next()), compiletime(UPGD_ID_GEN.next())]
let DUMMY_ARMOR_UPGRADES = [compiletime(UPGD_ID_GEN.next()), compiletime(UPGD_ID_GEN.next()), compiletime(UPGD_ID_GEN.next())]

int drInMap = 0
int deInMap = 0

let theyGo = CreateGroup()

let spawning = CreateTrigger()..disable()
let attack = CreateTrigger()..disable()
let changeTarget = CreateTrigger()..disable()
let cleaner = CreateTrigger()..disable()
DamageListener theyAreCowards = null

public function startSpawn()
    spawning.enable()
    attack.enable()
    // If a creep wanna go back for taking damage from an ally
    if theyAreCowards == null
        theyAreCowards = DamageEvent.addListener(() -> begin
            if attackers.has(DamageEvent.getTarget()) and
                DamageEvent.getSource().getOwner().isAllyOf(DamageEvent.getTarget().getOwner())

                theyGo.add(DamageEvent.getTarget())
        end)
    changeTarget.enable()
    cleaner.enable()

public function stopSpawn()
    spawning.disable()
    attack.disable()
    if theyAreCowards != null
        destroy theyAreCowards
        theyAreCowards = null
    changeTarget.disable()
    cleaner.disable()

function createDr(int id)
    if drInMap > 15
        return
    drInMap++
    let c = createUnit(DRAENEI, id, drSpw, UNIT_FACING)
    target[c.getIndex()] = attackPoint1
    c.issuePointOrderById(Orders.attack, attackPoint1)
    drUnits.add(c)
    attackers.add(c)
    c.insertToDrWaves()

function createDe(int id, vec2 pos, vec2 t)
    if deInMap > 15
        return
    deInMap++
    let c = createUnit(DEMON, id, pos, UNIT_FACING)
    target[c.getIndex()] = t
    c.issuePointOrderById(Orders.attack, t)
    deUnits.add(c)
    attackers.add(c)
    c.insertToDeWaves()

init
    // Create the towers
    for i = 0 to 8
        createUnit(DEMON, ADVANCE_DEATH_TOWER, Rects.advanceDeathTower[i].getCenter(), UNIT_FACING)
    onReset(true, () -> begin
        for i = 0 to 6
            createUnit(DEMON, DEATH_TOWER_1, Rects.deathTower1[i].getCenter(), UNIT_FACING)
        for i = 0 to 13
            createUnit(DEMON, DEATH_TOWER_2, Rects.deathTower2[i].getCenter(), UNIT_FACING)
        for i = 0 to 16
            createUnit(DEMON, DEATH_TOWER_3, Rects.deathTower3[i].getCenter(), UNIT_FACING)
        // Create the draenei warriors
        for i = 0 to 2
            createUnit(DRAENEI, DRAENEI_WARRIOR[0], Rects.draeneiWarrior[i].getCenter(), GetRandomReal(0, 360).asAngleDegrees())  
        // Create the chaos grunts
        for i = 0 to 2
            createUnit(DEMON, CHAOS_GRUNT[0], Rects.chaosGrunt1[i].getCenter(), 0..asAngleRadians())
    end)
    
    // Set upgrades
    for i = 0 to 2
        SetPlayerTechResearched(DRAENEI, DUMMY_DAMAGE_UPGRADES[i], i + 1)
        SetPlayerTechResearched(DEMON, DUMMY_DAMAGE_UPGRADES[i], i + 1)
        SetPlayerTechResearched(DRAENEI, DUMMY_ARMOR_UPGRADES[i], i + 1)
        SetPlayerTechResearched(DEMON, DUMMY_ARMOR_UPGRADES[i], i + 1)
    
    // Set the bounties
    for i = 0 to 2
        Bounty.set(DRAENEI_WARRIOR[i], 35, 6, 3)
        Bounty.set(CHAOS_GRUNT[i], 35, 6, 3)
    for i = 0 to 1
        Bounty.set(DRAENEI_MAGE[i], 35, 6, 3)
        Bounty.set(CHAOS_WARLOCK[i], 35, 6, 3)
    Bounty.set(DEATH_TOWER_1, 30, 8, 3)
    Bounty.set(DEATH_TOWER_2, 30, 8, 3)
    Bounty.set(DEATH_TOWER_3, 30, 8, 3)

    onReset(false, () -> begin
        forUnitsInRect(bj_mapInitialPlayableArea, u -> begin
            let id = u.getTypeId()
            for i = 0 to 2
                if id == DRAENEI_WARRIOR[i] or id == CHAOS_GRUNT[i]
                    u.remove()
            for i = 0 to 1
                if id == DRAENEI_MAGE[i] or id == CHAOS_WARLOCK[i]
                    u.remove()
            if id == DEATH_TOWER_1 or id == DEATH_TOWER_2 or id == DEATH_TOWER_3
                u.remove()
        end)
    end)
    onModesSelected(() -> begin
        if whatMode[3] == ONLY_NEUTRAL or whatMode[3] == NO_CREEPS
            forUnitsOfPlayer(DRAENEI, u -> begin
                if u.getTypeId() == DRAENEI_WARRIOR[0]
                    u.remove()
            end)
            forUnitsOfPlayer(DEMON, u -> begin
                if u.getTypeId() == CHAOS_GRUNT[0]
                    u.remove()
            end)
    end)
    // The units spawn
    spawning
        ..registerTimerEvent(30., true)
        .addAction(() -> begin
            addNewDrWave()
            addNewDeWave()
            if actMission == 1
                for _ = 0 to 2
                    createDr(DRAENEI_WARRIOR[0])
                    createDe(CHAOS_GRUNT[0], deSpw1, attackPoint1)
            else if actMission == 2
                for _ = 0 to 2
                    createDr(DRAENEI_WARRIOR[1])
                    createDe(CHAOS_GRUNT[1], deSpw21, attackPoint2)
                for _ = 0 to 1
                    createDr(DRAENEI_MAGE[0])
                    createDe(CHAOS_WARLOCK[0], deSpw22, attackPoint2)
            else if actMission >= 3
                for _ = 0 to 2
                    createDr(DRAENEI_WARRIOR[2])
                    createDe(CHAOS_GRUNT[2], deSpw31, attackPoint4)
                for _ = 0 to 1
                    createDr(DRAENEI_MAGE[1])
                    createDe(CHAOS_WARLOCK[1], deSpw32, attackPoint4)
            
        end)
    // Keep the units attack their targets
    attack
        ..registerTimerEvent(2., true)
        .addAction(() -> begin
            for u in attackers
                let i = u.getIndex()
                if not u.isAlive()
                    attackers.remove(u)
                    targetHero[i] = null
                else if u.getCurrentOrder() != Orders.attack or theyGo.has(u)
                    if targetHero[i] != null and targetHero[i].isAlive()
                        u.issuePointOrderById(Orders.attack, targetHero[i].getPos())
                    else
                        u.issuePointOrderById(Orders.attack, target[i])
                    theyGo.remove(u)
        end)
    RemoveAllGuardPositions(DRAENEI)
    RemoveAllGuardPositions(DEMON)
    // Clear the groups when the units die
    cleaner
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
        ..addAction(() -> begin
            let u = GetDyingUnit()
            if drUnits.has(u)
                drUnits.remove(u)
                drInMap--
            else if deUnits.has(u)
                deUnits.remove(u)
                deInMap--
        end)
    // Actions when the prision door is destroyed
    CreateTrigger()
        ..registerDeathEvent(Dests.dungeonDoor1)
        ..addAction(() -> begin
            addNewDrWave()
            forUnitsOfPlayer(DRAENEI, u -> begin
                if u.getTypeId() == DRAENEI_WARRIOR[0]
                    u.issuePointOrderById(Orders.attack, attackPoint1)
                    attackers.add(u)
                    drUnits.add(u)
                    u.insertToDrWaves()
            end)
            addNewDeWave()
            forUnitsOfPlayer(DEMON, u -> begin
                if Rects.attackPoint1.contains(u.getPos())
                    u.issuePointOrderById(Orders.attack, drSpw)
                    attackers.add(u)
                    deUnits.add(u)
                    u.insertToDeWaves()
            end)
        end)

let sentinel = compiletime(new AbilityDefinitionDetectMagicSentinel(ABIL_ID_GEN.next())
    ..setCastRange(1, 600.)
    ..setRequirements(""))

function BuildingDefinition.towerGeneral()
    this
        ..setDefenseBase(1)
        ..setSightRadiusDay(1500)
        ..setSightRadiusNight(1500)
        ..setGroundTexture("OSMA")
        ..setNormalAbilities(sentinel.getNewId().toRawCode())
        ..setName("Death Tower")

function UnitDefinition.creepGeneral(int i)
    this
        ..setAttack1DamageBase(12 + 9*i)
        ..setAttack1DamageNumberofDice(2 + i)
        ..setAttack1CooldownTime(1.8 - 0.1 * i)
        ..setDefenseUpgradeBonus(0)
        ..setArmorSoundType(ArmorSoundType.Flesh)
        ..setFoodCost(0)
        ..setLevel(2)
        ..setPriority(6)
        ..setHitPointsRegenerationRate(1.)
        ..setDefaultActiveAbility("")
        ..setNormalAbilities("")
        ..setUpgradesUsed(commaList(DUMMY_DAMAGE_UPGRADES[i], DUMMY_ARMOR_UPGRADES[i]))
        ..setCollisionSize(16.)
        ..setNameEditorSuffix("(Level " + (i + 1).toString() + ")")

@compiletime function gen()
    new BuildingDefinition(ADVANCE_DEATH_TOWER, 'ntx2')
        ..setAcquisitionRange(700.)
        ..setAttack1Range(700)
        ..setAttack1DamageBase(250)
        ..setAttack1CooldownTime(0.2)
        ..setSightRadiusNight(1800)
        ..setGroundTexture("OSMA")
        ..setNormalAbilities(commaList(AbilityIds.invulnerable, sentinel.getNewId()))
    
    new BuildingDefinition(DEATH_TOWER_1, 'ntt1')
        ..towerGeneral()
        ..setAttack1DamageBase(33)
        ..setAttack1CooldownTime(1.1)
        ..setHitPointsMaximumBase(300)
        ..setNameEditorSuffix("(Level 1)")
    
    new BuildingDefinition(DEATH_TOWER_2, 'ntt1')
        ..towerGeneral()
        ..setAttack1DamageBase(40)
        ..setAttack1CooldownTime(1.05)
        ..setHitPointsMaximumBase(350)
        ..setNameEditorSuffix("(Level 2)")
    
    new BuildingDefinition(DEATH_TOWER_3, 'ntt1')
        ..towerGeneral()
        ..setAttack1DamageBase(46)
        ..setAttack1CooldownTime(1.)
        ..setHitPointsMaximumBase(400)
        ..setNameEditorSuffix("(Level 3)")
    
    for i = 0 to 2
        new UnitDefinition(DRAENEI_WARRIOR[i], 'ndrw')
            ..setRace(Race.Orc)
            ..setHitPointsMaximumBase(450 + i * 50)
            ..creepGeneral(i)

        new UnitDefinition(CHAOS_GRUNT[i], 'nchg')
            ..setAttack1DamageSidesperDie(2)
            ..setAttack1AttackType(AttackType.Normal)
            ..setRace(Race.Demon)
            ..setHitPointsMaximumBase(450 + i * 50)
            ..creepGeneral(i)

        if i != 0
            new UnitDefinition(DRAENEI_MAGE[i-1], 'ndrs')
                ..setAttack1Range(450)
                ..setAttack1ProjectileArt(Abilities.priestMissile)
                ..setAttack1ProjectileSpeed(1100)
                ..setArmorType(ArmorType.Small)
                ..setRace(Race.Orc)
                ..setManaInitialAmount(75)
                ..setManaMaximum(400)
                ..setHitPointsMaximumBase(300 + i * 50)
                ..setTintingColorRed(100)
                ..setTintingColorGreen(100)
                ..setScalingValue(1.)
                ..creepGeneral(i)
                ..setName("Draenei Mage")
            
            new UnitDefinition(CHAOS_WARLOCK[i-1], 'nchw')
                ..setAttack1Range(450)
                ..setAttack1AnimationDamagePoint(0.59)
                ..setAttack1AnimationBackswingPoint(0.58)
                ..setAttack1ProjectileArt(Abilities.sorceressMissile)
                ..setAttack1DamageSidesperDie(7)
                ..setArmorType(ArmorType.Small)
                ..setSightRadiusNight(1000)
                ..setRace(Race.Demon)
                ..setManaInitialAmount(75)
                ..setManaMaximum(400)
                ..setHitPointsMaximumBase(300 + i * 50)
                ..creepGeneral(i)
        
        new UpgradeDefinition(DUMMY_DAMAGE_UPGRADES[i], i + 1)
            ..addEffectAttackDamageBonus(1, 0)
            ..setGoldCostBase(0)
            ..setGoldCostIncrement(0)
            ..setLumberCostBase(0)
            ..setLumberCostIncrement(0)
            ..setTimeBase(0)
            ..setTimeIncrement(0)
            ..presetName(lvl -> "Damage Level " + (i + 1).toString())
        
        new UpgradeDefinition(DUMMY_ARMOR_UPGRADES[i], i + 1)
            ..addEffectApplyDefenseUpgradeBonus()
            ..setGoldCostBase(0)
            ..setGoldCostIncrement(0)
            ..setLumberCostBase(0)
            ..setLumberCostIncrement(0)
            ..setTimeBase(0)
            ..setTimeIncrement(0)
            ..presetName(lvl -> "Armor Level " + (i + 1).toString())