/** Controls everything about the defesive towers (not the normal death towers)*/
package Towers

import Functions
import PlayerData
import Orders
import DamageEvent
import GeneratedValues
import initlater Missions

import LinkedList
import OnUnitEnterLeave
import ObjectIdGenerator
import UnitObjEditing
import ObjectIds
import Assets
import Fx

import BountyController

// Functions and values to use

public constant DRAENEI_WORKER = compiletime(UNIT_ID_GEN.next())
public constant DEMON_ACOLYTE = compiletime(UNIT_ID_GEN.next())
public constant DRAENEI_TOWER = compiletime(UNIT_ID_GEN.next())
public constant DEMON_TOWER = compiletime(UNIT_ID_GEN.next())

let DEMON_TOWER_DUMMY_ZIGURAT = compiletime(UNIT_ID_GEN.next())
let DEMON_TOWER_DUMMY_MODEL = compiletime(UNIT_ID_GEN.next())

init
    Bounty.set(DRAENEI_TOWER, 100, 5, 5)
    Bounty.set(DEMON_TOWER, 100, 5, 5)

public rect returnPoint = Rects.whereTheWorkersWere

let towerCond = Condition(() -> begin
    let id = GetDyingUnit().getTypeId()
    return id == DRAENEI_TOWER or id == DEMON_TOWER or id == DEMON_TOWER_DUMMY_ZIGURAT
end)

function filt() returns boolean
    if GetFilterUnit().getTypeId() != DRAENEI_WORKER
        return false
    else if GetFilterUnit().getCurrentOrder() == 0 or GetFilterUnit().getCurrentOrder() == Orders.smart
        return true
    return false

let builderCond = Filter(function filt)

function filt2() returns boolean
    if GetFilterUnit().getTypeId() != DEMON_ACOLYTE
        return false
    else if GetFilterUnit().getCurrentOrder() == 0 or GetFilterUnit().getCurrentOrder() == Orders.smart
        return true
    return false

let acolyteCond = Filter(function filt2)

let g = CreateGroup()
let endItsJob = CreateGroup()

function acolyteSpawnPos(vec2 p) returns vec2
    vec2 pos = ZERO2
    if Rects.demonTower1.contains(p)
        pos = GUnits.barrack1.getPos()
    else if Rects.demonTower2.contains(p) or  Rects.demonTower3.contains(p)
        pos = GUnits.barrack2.getPos()
    else if Rects.demonTower4.contains(p)
        pos = GUnits.barrack3.getPos()
    return pos

function unit.issueBuildOrder(int unitToBuild, vec2 pos)
    IssueBuildOrderById(this, unitToBuild, pos.x, pos.y)

let towerDraeneiPos = [
    Rects.draeneiTower0.getCenter(),
    Rects.draeneiTower1.getCenter(),
    Rects.draeneiTower2.getCenter(),
    Rects.draeneiTower3.getCenter(),
    Rects.draeneiTower4.getCenter(),
    Rects.draeneiTower5.getCenter()
]

// Functions to order to build the towers

init
    nullTimer() -> 
        let builders = CreateGroup()
        GroupEnumUnitsOfPlayer(builders, DRAENEI, builderCond)
        new BuildingInstance(builders.next(), towerDraeneiPos[0], DRAENEI_TOWER)
        new BuildingInstance(builders.next(), towerDraeneiPos[1], DRAENEI_TOWER)
        builders.destr()

        onMission(mission -> begin
            switch mission
                case 2
                    forUnitsInRect(Rects.demonTower1, u -> begin
                        if u.getTypeId() == DEMON_TOWER
                            u.setOwner(players[PLAYER_NEUTRAL_PASSIVE], false)
                    end)

                    let builders2 = CreateGroup()
                    GroupEnumUnitsOfPlayer(builders2, DRAENEI, builderCond)
                    new BuildingInstance(builders2.next(), towerDraeneiPos[2], DRAENEI_TOWER)
                    new BuildingInstance(builders2.next(), towerDraeneiPos[3], DRAENEI_TOWER)
                    builders2.destr()
                case 3
                    forUnitsInRect(Rects.demonTower3, u -> begin
                        if u.getTypeId() == DEMON_TOWER
                            u.setOwner(players[PLAYER_NEUTRAL_PASSIVE], false)
                    end)
                case 5
                    let builders2 = CreateGroup()
                    GroupEnumUnitsOfPlayer(builders2, DRAENEI, builderCond)
                    new BuildingInstance(builders2.next(), towerDraeneiPos[4], DRAENEI_TOWER)
                    new BuildingInstance(builders2.next(), towerDraeneiPos[5], DRAENEI_TOWER)
                    builders2.destr()
        end)

// Check everytime a tower is correctly builded in less of a 60 seconds

class BuildingInstance
    static LinkedList<BuildingInstance> instances = new LinkedList<BuildingInstance>()

    unit builder
    vec2 point
    int tower
    boolean haveTower
    int count
    CallbackPeriodic cb

    construct(unit builder, vec2 point, int tower)
        this.builder = builder
        this.point = point
        this.tower = tower

        builder.issueBuildOrder(tower, point)

        haveTower = false
        count = 60

        instances.add(this)

        cb = doPeriodically(1., cb -> begin
            count--
            if count == 0 and not haveTower
                unit newBuilder
                if tower == DRAENEI_TOWER
                    builder.setPos(returnPoint.randomPoint())
                    GroupEnumUnitsOfPlayer(g, DRAENEI, builderCond)
                    newBuilder = g.next()
                    g.clear()
                else
                    builder.remove()
                    newBuilder = createUnit(DEMON, DEMON_ACOLYTE, acolyteSpawnPos(point), UNIT_FACING)
                    g.clear()
                new BuildingInstance(newBuilder, point, tower)
                destroy this
            else if haveTower
                destroy this
        end)

    ondestroy
        instances.remove(this)
        destroy cb

    static function buildTower()
        let p = GetConstructingStructure().getPos()
        for curr in instances
            if curr.point.distanceTo(p) <= 128.
                curr.haveTower = true
                break

function disableTower()
    let u = getEnterLeaveUnit()
    if u.getTypeId() != DEMON_TOWER
        return
    let p = u.getPos()
    if (Rects.demonTower1.contains(p) and doorDestroyed) or
        (Rects.demonTower2.contains(p) and not generatorAlive) or
        (Rects.demonTower3.contains(p) and wallDestroyed) or
        (Rects.demonTower4.contains(p) and not Dests.mainEntranceDoor.isAliveTrick())
        u.setOwner(players[PLAYER_NEUTRAL_PASSIVE], false)

init
    // Create demon defense towers
    for i = 0 to 9
        createUnit(DEMON, DEMON_TOWER, Rects.demonDefenseTower[i].getCenter(), UNIT_FACING)
    // This towers don't work
    onEnter(function disableTower)
    // Run the first
    onReset(false, () -> begin
        forUnitsOfPlayer(DRAENEI, u -> begin
            if u.getTypeId() == DRAENEI_WORKER or u.getTypeId() == DRAENEI_TOWER
                u.remove()
        end)
    end)
    onReset(true, () -> begin 
        for _ = 1 to 8
            createUnit(DRAENEI, DRAENEI_WORKER, Rects.whereTheWorkersWere.randomPoint(), GetRandomReal(0, PI2).asAngleRadians())
    end)
    // If a tower is destroyed
    CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
        ..addCondition(towerCond)
        ..addAction(() -> begin
            let u = GetTriggerUnit()
            let p = u.getPos()
            if u.getTypeId() == DRAENEI_TOWER
                GroupEnumUnitsOfPlayer(g, DRAENEI, builderCond)
                new BuildingInstance(g.next(), p, DRAENEI_TOWER)
                g.clear()
            else
                doAfter(3.) ->
                    new BuildingInstance(createUnit(DEMON, DEMON_ACOLYTE, acolyteSpawnPos(p), UNIT_FACING), p, DEMON_TOWER_DUMMY_ZIGURAT)
        end)
    // Tower been constructed
    CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_START)
        ..addAction(function BuildingInstance.buildTower)
    // Return draenei
    CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
        ..addCondition(Condition(() ->  GetConstructedStructure().getTypeId() == DRAENEI_TOWER))
        ..addAction(() -> begin
            let p = GetTriggerUnit().getPos()
            doAfter(0.2) -> 
                forUnitsInRange(p, 200., u -> begin
                    if u.getTypeId() == DRAENEI_WORKER and u.getCurrentOrder() == 0
                        u.issuePointOrderById(Orders.smart, returnPoint.randomPoint())
                end)
        end)
    // Return acolyte
    CreateTrigger()
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_START)
        ..addCondition(Condition(() -> GetConstructingStructure().getTypeId() == DEMON_TOWER_DUMMY_ZIGURAT))
        ..addAction(() -> begin
            let u = GetConstructingStructure()
            let p = u.getPos()
            forUnitsInRange(p, 200., u -> begin
                if u.getTypeId() == DEMON_ACOLYTE
                    u.issuePointOrderById(Orders.smart, acolyteSpawnPos(p))
                    endItsJob.add(u)
            end)
            doAfter(3.5) -> 
                let a = new Fx(p, UNIT_FACING, Buildings.towerDefenseTower)
                a.getDummy().setAnimation("fifth")
                u.setVertexColor(0, 255, 255, 127)
                doAfter(0.6) -> 
                    let r = 680. - u.getLife()
                    u.remove()
                    a.hiddenDestroy()
                    createUnit(DEMON, DEMON_TOWER, p, UNIT_FACING).addHP(-r)
        end)
    // Remove acolyte
    CreateTrigger()
        ..registerUnitInRange(GUnits.barrack1, 200., null)
        ..registerUnitInRange(GUnits.barrack2, 200., null)
        ..registerUnitInRange(GUnits.barrack3, 200., null)
        ..addCondition(Condition(() -> endItsJob.has(GetTriggerUnit())))
        ..addAction(() -> begin
            let u = GetTriggerUnit()
            endItsJob.remove(u)
            doAfter(0.33, () -> u.remove())
        end)
    // Don't touch the builders
    DamageEvent.addUnreducedListener(() -> begin
        let id = DamageEvent.getTarget().getTypeId()
        if id == DRAENEI_WORKER or id == DEMON_ACOLYTE
            DamageEvent.setAmount(0.)
    end)


@compiletime function gen()
    new UnitDefinition(DRAENEI_WORKER, 'ndrl')
        ..setAttacksEnabled(0)
        ..setFoodCost(0)
        ..setRace(Race.Orc)
        ..setNormalAbilities(commaList(AbilityIds.magicImmunityCreep, AbilityIds.invulnerable))
        ..setStructuresBuilt(DRAENEI_TOWER.toRawCode())

    new UnitDefinition(DEMON_ACOLYTE, 'uaco')
        ..setAttacksEnabled(0)
        ..setFoodCost(0)
        ..setRace(Race.Undead)
        ..setNormalAbilities(commaList(AbilityIds.magicImmunityCreep, AbilityIds.invulnerable))
        ..setStructuresBuilt(DEMON_TOWER_DUMMY_ZIGURAT.toRawCode())
    
    new BuildingDefinition(DRAENEI_TOWER, 'owtw')
        ..setAttack1Range(700)
        ..setAttack1DamageBase(70)
        ..setAttack1CooldownTime(1.5)
        ..setDefenseBase(10)
        ..setGoldCost(0)
        ..setLumberCost(0)
        ..setHitPointsMaximumBase(1000)
        ..setBuildTime(4)
        ..setHitPointsRegenerationType("always")
        ..setHitPointsRegenerationRate(2.)
        ..setScalingValue(1.2)
        ..setRequirements("")
        ..setPlacementRequires("")
        ..setName("Defense Tower")
        ..setNameEditorSuffix("(Draenei)")
    
    new BuildingDefinition(DEMON_TOWER, 'owtw')
        ..setAttack1Range(700)
        ..setAttack1DamageBase(70)
        ..setAttack1ProjectileArt(Abilities.vengeanceMissile)
        ..setAttack1CooldownTime(1.5)
        ..setDefenseBase(10)
        ..setGoldCost(0)
        ..setLumberCost(0)
        ..setHitPointsMaximumBase(1000)
        ..setRace(Race.Undead)
        ..setBuildTime(4)
        ..setHitPointsRegenerationType("always")
        ..setHitPointsRegenerationRate(2.)
        ..setModelFile(Buildings.towerDefenseTower)
        ..setIconGameInterface(Icons.bTNDeathTower)
        ..setRequiredAnimationNames("fifth")
        ..setScalingValue(1.2)
        ..setRequirements("")
        ..setPlacementRequires("")
        ..setName("Defense Tower")
        ..setNameEditorSuffix("(Demons)")
    
    new BuildingDefinition(DEMON_TOWER_DUMMY_ZIGURAT, 'uzig')
        ..setDefenseBase(15)
        ..setGoldCost(0)
        ..setLumberCost(0)
        ..setHitPointsMaximumBase(1000)
        ..setBuildTime(6)
        ..setNormalAbilities("")
        ..setUpgradesTo("")
        ..setPlacementPreventedBy("")
        ..setPlacementRequires("")
        ..setPathingMap("PathTextures\\4x4SimpleSolid.tga")
        ..setCollisionSize(72.)
        ..setName("Defense Tower")
        ..setNameEditorSuffix("(Dummy)")