package OtherMissiles

import MapBounds
import HashMap
import ErrorHandling
import Fx
import Annotations
import Execute

// System based in Missiles v2.3 by Chopinski https://www.hiveworkshop.com/threads/relativistic-missiles-vjass-lua-gui.325964/

/** The update period of the system */
@configurable constant real PERIOD = compiletime(1./40.)
/** The max amount of Missiles processed in a PERIOD
 *  You can play around with both these values to find
 *  your sweet spot. If equal to 0, the system will
 *  process all missiles at once every period. */
@configurable constant real SWEET_SPOT = 150
/** The avarage collision size compensation when detecting collisions */
@configurable constant real COLLISION_SIZE = 128.
/** Item size used in z collision */
@configurable constant real ITEM_SIZE = 16.
/** How long(for the missile to be removed.
 *  This is necessary so the death animation of the
 *  effect can play through */
@configurable constant real RECYCLE_TIME = 2.

let PI_ANG = angle(PI)
let PI_HALF_ANG = angle(PIHALF)

function unit.getCollisionSize() returns real
    return 64.

function getMapCliffLevel() returns integer
    return GetTerrainCliffLevel(boundMax.x, boundMax.y)

class Coordinates
    real x
    real y
    real z
    angle angl
    real distance
    real square
    real slope
    angle alpha

    // Creates an origin - impact link.
    private Coordinates ref

    private static function math(Coordinates a, Coordinates b)
        real dx
        real dy
        while true
            dx = b.x - a.x
            dy = b.y - a.y
            dx = dx*dx + dy*dy
            dy = SquareRoot(dx)
            if dx != 0. and dy != 0.
                break
            b.x = b.x + .01
            b.z = b.z - vec2(b.x -.01, b.y).getTerrainZ() + vec2(b.x, b.y).getTerrainZ()

        a.square   = dx
        a.distance = dy
        a.angl    = angle(Atan2(b.y - a.y, b.x - a.x))
        a.slope    = (b.z - a.z)/dy
        a.alpha    = angle(Atan(a.slope))
        // b.
        if b.ref == a
            b.angl     = a.angl + PI_ANG
            b.distance  = dy
            b.slope     = -a.slope
            b.alpha     = (-1.)*a.alpha
            b.square    = dx

    static function link(Coordinates a, Coordinates b)
        a.ref = b
        b.ref = a
        math(a, b)

    function move(real toX, real toY, real toZ)
        x = toX
        y = toY
        z = toZ + vec2(toX, toY).getTerrainZ()
        if ref != this
            math(this, ref)

    construct(real x, real y, real z)
        ref = this
        move(x, y, z)

interface UnitClosure
    function run(unit u) returns boolean

interface MissileClosure
    function run(Missiles missil) returns boolean

interface DestClosure
    function run(destructable d) returns boolean

interface ItemClosure
    function run(item i) returns boolean

interface IntClosure
    function run(int id) returns boolean

interface VoidClosure
    function run() returns boolean

interface VoidClosureNotBool
    function run()

public class Missiles
    private static timer t = CreateTimer()
    private static group g = CreateGroup()
    private static rect r = Rect(0., 0., 0., 0.)
    private static int last = 0 
    private static Missiles temp = null
    private static int id = -1
    private static int pid = -1
    private static real dilation = 1.
    private static Missiles array missiles
    private static Missiles array frozen
    
    static Missiles array collection
    static int count = -1
    
    private HashMap<widget, boolean> widgetMap
    private HashMap<Missiles, boolean> missilMap
    private angle cA
    private string path
    private real size
    private real height
    private real open
    private real toZ
    private real time
    private int pkey
    private int index
    private Coordinates impact
    private Coordinates origin
    private vec3 pos
    private vec3 prevPos
    private vec3 nextPos
    private Fx fx
    private real veloc
    private real travel
    private boolean paused
    private int tileset
    private boolean launched

    unit source
    unit target
    player owner
    boolean collideZ
    real collision
    real damage
    real acceleration
    int data
    int typ
    real turn

    private UnitClosure unitEvent
    private MissileClosure missileEvent
    private DestClosure destEvent
    private ItemClosure itemEvent
    private VoidClosure cliffEvent
    private VoidClosure terrainEvent
    private IntClosure tilesetEvent
    private VoidClosure finishEvent
    private VoidClosure periodEvent
    private VoidClosure boundEvent
    private VoidClosure pauseEvent
    private VoidClosure resumeEvent
    private VoidClosureNotBool removeEvent

    /* -------------------------- Model of the missile -------------------------- */
    function setModel(string fxpath)
        fx.setFx(fxpath)
        path = fxpath

    function getModel() returns string
        return path

    /* ----------------------------- Curved movement ---------------------------- */
    function setCurve(angle value)
        open = value.tan()*origin.distance

    function getCurve() returns angle
        return Atan(open/origin.distance).asAngleDegrees()

    /* ----------------------------- Arced Movement ----------------------------- */
    function setArc(angle value)
        height = value.tan()*origin.distance/4

    function getArc() returns angle
        return Atan(4*height/origin.distance).asAngleDegrees()

    /* ------------------------------ Effect scale ------------------------------ */
    function setScale(real v)
        fx.setScale(v)
        size = v

    function getScale() returns real
        return size

    /* ------------------------------ Missile Speed ----------------------------- */
    function setSpeed(real newspeed)
        let d = origin.distance
    
        veloc = newspeed*PERIOD
        let vel = veloc*dilation
        let s = travel + vel
        nextPos = pos.offset2d(cA, vel)

        if height != 0 or origin.slope != 0
            nextPos.z = 4*height*s*(d-s)/(d*d) + origin.slope*s + origin.z
            pos.z = nextPos.z

    function getSpeed() returns real
        return veloc/PERIOD

    /* ------------------------------- Flight Time ------------------------------ */
    function setDuration(real flightTime)
        let d = origin.distance
    
        veloc = max(0.00000001, (origin.distance - travel)*PERIOD/max(0.00000001, flightTime))
        time = flightTime
        let vel = veloc*dilation
        let s = travel + vel
        nextPos = pos.offset2d(cA, vel)

        if height != 0 or origin.slope != 0
            nextPos.z = 4*height*s*(d-s)/(d*d) + origin.slope*s + origin.z
            pos.z = nextPos.z

    function getDuration() returns real
        return time

    /* ---------------------------- Bound and Deflect --------------------------- */
    function bounce()
        origin.move(pos.x, pos.y, pos.z - pos.toVec2().getTerrainZ())
        travel = 0.
    
    function deflect(vec2 t)
        let locZ = pos.toVec2().getTerrainZ()
        
        target = null
        toZ = origin.z - t.getTerrainZ()
        
        if pos.z < locZ
            nextPos = prevPos

        impact.move(t.x, t.y, toZ)
        origin.move(pos.x, pos.y, pos.z - locZ)
        
        travel = 0.

    /* ---------------------------- Flush hit targets --------------------------- */
    function flush()
        widgetMap.flush()
        missilMap.flush()

    function flush(widget w)
        if w != null
            widgetMap.remove(w)

    function hitted(widget w) returns boolean
        return widgetMap.has(w)

    /* ------------------------------ Missile Pause ----------------------------- */
    function pause(boolean flag)
        paused = flag
        if not paused and pkey != -1
            id++
            missiles[id] = this
            let aux = frozen[pid]
            aux.pkey = pkey
            frozen[pkey] = frozen[pid]
            pid = pid - 1
            pkey = -1

            if id + 1 > SWEET_SPOT and SWEET_SPOT > 0
                dilation = (id + 1)/SWEET_SPOT
            else
                dilation = 1.

            if id == 0
                t.startPeriodic(PERIOD, function move)
            
            if temp.resumeEvent != null
                if temp.resumeEvent.run()
                    temp.terminate()

    /* ------------------------- Destructable hit function ------------------------ */
    private static function onDest()
        let d = GetEnumDestructable()

        if not temp.widgetMap.has(d)
            if temp.collideZ
                let dz = d.getPos().getTerrainZ()
                let tz = GetDestructableOccluderHeight(d)
                if dz + tz >= temp.pos.z - temp.collision and dz <= temp.pos.z + temp.collision
                    temp.widgetMap.put(d, true)
                    if temp.destEvent.run(d)
                        temp.terminate()
                        return
            else
                temp.widgetMap.put(d, true)
                if temp.destEvent.run(d)
                    temp.terminate()
                    return

    /* -------------------------- Item collision function ------------------------- */
    private static function onItems()
        let i = GetEnumItem()

        if not temp.widgetMap.has(i)
            if temp.collideZ
                let dz = i.getPos().getTerrainZ()
                if dz + ITEM_SIZE >= temp.pos.z - temp.collision and dz <= temp.pos.z + temp.collision
                    temp.widgetMap.put(i, true)
                    if temp.itemEvent.run(i)
                        temp.terminate()
                        return
            else
                temp.widgetMap.put(i, true)
                if temp.itemEvent.run(i)
                    temp.terminate()
                    return
    
    /* -------------------------- Getters ------------------------- */

    function getSize() returns real
        return size

    function getPos() returns vec3
        return pos

    function isLaunched() returns boolean
        return launched

    function isPaused() returns boolean
        return paused

    function getTileset() returns int
        return tileset

    /* -------------------------------- Terminate ------------------------------- */
    function terminate()
        if launched
            Missiles aux
            
            if pkey != -1
                aux = frozen[pid]
                aux.pkey = pkey
                frozen[pkey] = frozen[pid]
                pid = pid - 1
                pkey = -1
            
            if removeEvent != null
                removeEvent.run()
                destroy removeEvent
                removeEvent = null
            
            aux = collection[count]
            aux.index = index
            collection[index] = collection[count]
            count = count - 1
            index = -1

            destroy fx
            destroy origin
            destroy impact
            reset()
            destroy widgetMap
            destroy missilMap

    ondestroy
        error("Don't use this function, use terminate() instead.")

    /* ------------------------------ Reset members ----------------------------- */
    private function reset()
        launched = false
        collideZ = false
        paused = false
        source = null
        target = null
        owner = null
        fx = null
        path = ""
        open = 0.
        height = 0.
        veloc = 0.
        acceleration = 0.
        collision = 0.
        damage = 0.
        travel = 0.
        turn = 0.
        size = 0.
        time = 0.
        data = 0
        typ = 0
        tileset = 0
        pkey = -1
        index = -1
        if unitEvent != null
            destroy unitEvent
            unitEvent = null
        if missileEvent != null
            destroy missileEvent
            missileEvent = null
        if destEvent != null
            destroy destEvent
            destEvent = null
        if itemEvent != null
            destroy itemEvent
            itemEvent = null
        if cliffEvent != null
            destroy cliffEvent
            cliffEvent = null
        if terrainEvent != null
            destroy terrainEvent
            terrainEvent = null
        if tilesetEvent != null
            destroy tilesetEvent
            tilesetEvent = null
        if finishEvent != null
            destroy finishEvent
            finishEvent = null
        if periodEvent != null
            destroy periodEvent
            periodEvent = null
        if boundEvent != null
            destroy boundEvent
            boundEvent = null
        if pauseEvent != null
            destroy pauseEvent
            pauseEvent = null
        if resumeEvent != null
            destroy resumeEvent
            resumeEvent = null
    
    private function remove(int i) returns int
        if paused
            pid = pid + 1
            pkey = pid
            frozen[pid] = this

            if pauseEvent != null
                if pauseEvent.run()
                    terminate()
        else
            terminate()
        
        missiles[i] = missiles[id]
        id--

        if id + 1 > SWEET_SPOT and SWEET_SPOT > 0
            dilation = (id + 1)/SWEET_SPOT
        else
            dilation = 1

        if id == -1
            t.pause()
        
        destroy this

        return i-1

    private static function move()
        int i

        if SWEET_SPOT > 0
            i = last
        else
            i = 0

        var j = 0
        while not ((j >= SWEET_SPOT and SWEET_SPOT > 0) or j > id)
            let temp = missiles[i]
            if not temp.paused

                if temp.collision > 0
                    if temp.unitEvent != null
                        g.enumUnitsInRange(temp.pos.toVec2(), temp.collision + COLLISION_SIZE)
                        for u from g
                            if not temp.widgetMap.has(u)
                                if IsUnitInRangeXY(u, temp.pos.x, temp.pos.y, temp.collision)
                                    if temp.collideZ
                                        let dx = u.getPos3Real().z
                                        let dy = u.getCollisionSize()
                                        if dx + dy >= temp.pos.z - temp.collision and dx <= temp.pos.z + temp.collision
                                            temp.widgetMap.put(u, true)
                                            if temp.unitEvent.run(u)
                                                temp.terminate()
                                                break
                                    else
                                        temp.widgetMap.put(u, true)
                                        if temp.unitEvent.run(u)
                                            temp.terminate()
                                            break
                        g.clear()

                    if temp.missileEvent != null
                        for i2 = 0 to count
                            let missile = collection[i2]
                            if missile != temp
                                if not temp.missilMap.has(missile)
                                    if missile.pos.distanceTo(temp.pos) <= temp.collision
                                        temp.missilMap.put(missile, true)
                                        if temp.missileEvent.run(missile)
                                            temp.terminate()
                                            break
                    
                    if temp.destEvent != null or temp.itemEvent != null
                        let dx = temp.collision
                        SetRect(r, temp.pos.x - dx, temp.pos.y - dx, temp.pos.x + dx, temp.pos.y + dx)
                        if temp.destEvent != null
                            EnumDestructablesInRect(r, null, function onDest)
                        if temp.itemEvent != null
                            EnumItemsInRect(r, null, function onItems)

                if temp.cliffEvent != null
                    let dx = GetTerrainCliffLevel(temp.nextPos.x, temp.nextPos.y).toReal()
                    let dy = GetTerrainCliffLevel(temp.pos.x, temp.pos.y).toReal()
                    if dy < dx and temp.pos.z  < (dx - getMapCliffLevel())*bj_CLIFFHEIGHT
                        if temp.cliffEvent.run()
                            temp.terminate()

                if temp.terrainEvent != null
                    if temp.pos.toVec2().getTerrainZ() > temp.pos.z
                        if temp.terrainEvent.run()
                            temp.terminate()

                if temp.tilesetEvent != null
                    let k = GetTerrainType(temp.pos.x, temp.pos.y)
                    if k != temp.tileset
                        if temp.tilesetEvent.run(k)
                            temp.terminate()
                    temp.tileset = k

                if temp.periodEvent != null
                    if temp.periodEvent.run()
                        temp.terminate()

                // Homing or not
                let o = temp.origin
                angle a

                if temp.target != null and temp.target.getTypeId() != 0
                    temp.impact.move(temp.target.getX(), temp.target.getY(), GetUnitFlyHeight(temp.target) + temp.toZ)
                    let dx = temp.impact.x - temp.nextPos.x
                    let dy = temp.impact.y - temp.nextPos.y
                    a = angle(Atan2(dy, dx))
                    temp.travel = o.distance - SquareRoot(dx*dx + dy*dy)
                else
                    a = o.angl
                    temp.target = null
                
                // turn rate
                if temp.turn != 0 and not ((temp.cA-a).cos() >= Cos(temp.turn))
                    if (a-temp.cA).sin() >= 0
                        temp.cA.radians += temp.turn
                    else
                        temp.cA.radians -= temp.turn
                else
                    temp.cA = a

                let vel = temp.veloc*dilation
                var yaw = temp.cA
                let s = temp.travel + vel
                temp.veloc += temp.acceleration
                temp.travel = s
                var pitch = temp.origin.alpha
                temp.prevPos = temp.pos
                temp.pos = temp.nextPos
                temp.nextPos = temp.pos.offset2d(temp.cA, vel)

                // arc calculation
                let h = temp.height
                let c = temp.open
                let d = o.distance

                if h != 0 or o.slope != 0
                    temp.nextPos.z = 4*h*s*(d-s)/(d*d) + o.slope*s + o.z
                    pitch -= angle(Atan(((4*h)*(2*s - d))/(d*d)))
            
                // curve calculation
                if c != 0
                    let dx = 4*c*s*(d-s)/(d*d)
                    a = temp.cA + PI_HALF_ANG
                    temp.pos = temp.pos.offset2d(a, dx)
                    yaw = temp.cA + angle(Atan(-((4*c)*(2*s - d))/(d*d)))
                
                if s >= d
                    if temp.finishEvent != null
                        if temp.finishEvent.run()
                            temp.terminate()
                        else
                            if temp.travel > 0
                                temp.terminate()
                    else
                        temp.terminate()
                try(() -> begin
                    temp.fx.setXYAngle(yaw)
                    temp.fx.setZAngle(pitch)
                    if temp.pos.inBounds()
                        temp.fx.setXYZ(temp.pos)
                    else
                        if temp.boundEvent != null
                            if temp.boundEvent.run()
                                temp.terminate()
                end)
            else
                i = temp.remove(i)
                j--
            i++
            j++

            if i > id and SWEET_SPOT > 0
                i = 0
        
        last = i
    
    function launch()
        if not launched
            launched = true
            id++
            missiles[id] = this
            count++
            index = count
            collection[count] = this
            
            if id + 1 > SWEET_SPOT and SWEET_SPOT > 0
                dilation = (id + 1)/SWEET_SPOT
            else
                dilation = 1.

            if id == 0
                t.startPeriodic(PERIOD, function move)
    
    construct(vec3 first, vec3 last)
        let face = first.angleTo2d(last)

        reset()
        origin = new Coordinates(first.x, first.y, first.z)
        impact = new Coordinates(last.x, last.y, last.z)
        Coordinates.link(origin, impact)
        cA = origin.angl
        pos = first.toVec2().withZ(impact.z)
        prevPos = pos
        nextPos = pos
        this.toZ = last.z

        fx = new Fx(first, face)

        widgetMap = new HashMap<widget, boolean>()
        missilMap = new HashMap<Missiles, boolean>()
        

    // Missile events, if returns true, the missile will be destroyed

    /** If collision is greater than 0 will run whenever the missile collides with a unit */
    function onHit(UnitClosure unitEvent)
        if this.unitEvent != null
            destroy this.unitEvent
        this.unitEvent = unitEvent

    /** If collision is greater than 0 will run whenever the missile collides with another missile */
    function onMissile(MissileClosure missileEvent)
        if this.missileEvent != null
            destroy this.missileEvent
        this.missileEvent = missileEvent
    
    /** If collision is greater than 0 will run whenever the missile collides with a destructable */
    function onDestructable(DestClosure destEvent)
        if this.destEvent != null
            destroy this.destEvent
        this.destEvent = destEvent
    
    /** If collision is greater than 0 will run whenever the missile collides with an item */
    function onItem(ItemClosure itemEvent)
        if this.itemEvent != null
            destroy this.itemEvent
        this.itemEvent = itemEvent
    
    /** Will run whenever the missile collides with a cliff wall height greater than the current missile height */
    function onCliff(VoidClosure cliffEvent)
        if this.cliffEvent != null
            destroy this.cliffEvent
        this.cliffEvent = cliffEvent
    
    /** Will run whenever the missile collides with terrain */
    function onTerrain(VoidClosure terrainEvent)
        if this.terrainEvent != null
            destroy this.terrainEvent
        this.terrainEvent = terrainEvent
    
    /** Will run whenever the missile changes tileset types */
    function onTileset(IntClosure tilesetEvent)
        if this.tilesetEvent != null
            destroy this.tilesetEvent
        this.tilesetEvent = tilesetEvent
    
    /** Will run whenever every missile period */
    function onPeriod(VoidClosure periodEvent)
        if this.periodEvent != null
            destroy this.periodEvent
        this.periodEvent = periodEvent
    
    /** Will run when the missiles reaches its destination*/
    function onFinish(VoidClosure finishEvent)
        if this.finishEvent != null
            destroy this.finishEvent
        this.finishEvent = finishEvent
    
    /** Will run whenever the missile tries to go out of the map boundaries */
    function onBoundaries(VoidClosure boundEvent)
        if this.boundEvent != null
            destroy this.boundEvent
        this.boundEvent = boundEvent
    
    /** Will run when the missile is paused */
    function onPause(VoidClosure pauseEvent)
        if this.pauseEvent != null
            destroy this.pauseEvent
        this.pauseEvent = pauseEvent
    
    /** Will run when the missile is unpaused */
    function onResume(VoidClosure resumeEvent)
        if this.resumeEvent != null
            destroy this.resumeEvent
        this.resumeEvent = resumeEvent
    
    /** Will run when the missile is removed */
    function onRemove(VoidClosureNotBool removeEvent)
        if this.removeEvent != null
            destroy this.removeEvent
        this.removeEvent = removeEvent