package OpMissionsControl

import public Functions
import public ModeSelection
import public PlayerData
import public DefineMissions
import public GeneratedValues
import public Imports
import public Reset
import public Missions
import public HeroType
import public initlater VoidTraveller
import public initlater TheReader
import public initlater TheFountain
import public initlater ThePrisioner
import public initlater LordOfFire

import public EventHelper
import public RegisterEvents
import public ClosureTimers
import public Dialog
import public Orders
import public Assets
import public UnitObjEditing
import public ItemObjEditing
import public AbilityObjEditing
import public ObjectIdGenerator
import public ObjectIds
import public Reference

import public UnitTransmission
import public BountyController

public force array theyKnowYou
public force array disturbed

public constant isHero = Condition(() -> GetEnteringUnit().isType(UNIT_TYPE_HERO))

public function unit.isAnimal() returns bool
    return HeroType.get(this) == SALAMANDER or
           HeroType.get(this) == SPIRIT_WOLF

public function unit.isMachine() returns bool
    return HeroType.get(this) == DEMOLISHER or
           HeroType.get(this) == INFERNAL_MACHINE

public function disturbing(player p, int index)
    if theyKnowYou[index].has(p) and not disturbed[index].has(p)
        var message = ""
        switch index
            case voidTravellerIndex
                message = "|cff32cd32HELP:|r He can see your soul."
            case theReaderIndex
                message = "|cff32cd32HELP:|r Maybe she learnt something about voodoo in her books."
        
        doAfter(2.) -> 
            QuestMessageBJ(theyKnowYou[index], bj_QUESTMESSAGE_HINT, message)
            disturbed[index].add(p)

public interface ConditionClosure
    function check() returns bool

public interface ActionClosure
    function run()

/** Runs the actions when the condition returns true, but before the tolerance passes, else is discarded.*/
public function waitUntil(real tolerance, ConditionClosure condition, ActionClosure actions)
    doPeriodicallyTimed(0.03125, tolerance, cb -> begin
        if condition.check()
            actions.run()
            destroy cb
            destroy condition
            destroy actions
        else
            if cb.isLast()
                destroy condition
                destroy actions
    end)

/** Runs the actions when the condition returns true, but before the 2 seconds passes, else is discarded.*/
public function waitUntil(ConditionClosure condition, ActionClosure actions)
    waitUntil(2., condition, actions)