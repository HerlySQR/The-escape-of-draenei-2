package TheGems

import OpMissionsControl
import SummonCourier

import Fx
import DamageEvent
import DummyRecycler
import OnUnitEnterLeave

import MoveSpeedX

let heretic = GUnits.heretic..setInvulnerable(true)..hide()
let hereticOriginalPos = heretic.getPos()
let hereticNewPos = Rects.gemsHeretic.getCenter()
let whoAre = CreateForce()
var returnedGems = 0

let bloodGemBearer = CreateForce()
let skyGemBearer = CreateForce()
let poisonGemBearer = CreateForce()

let BLOOD_GEM = compiletime(ITEM_ID_GEN.next())
let SKY_GEM = compiletime(ITEM_ID_GEN.next())
let POISON_GEM = compiletime(ITEM_ID_GEN.next())

let POISON_DAMAGE = compiletime(ABIL_ID_GEN.next())

trigger skyGemRun
trigger obelisks
effect mark = null

let bloodGem = createItem(BLOOD_GEM, ZERO2)..setInvulnerable(true)
    ..setPlayer(players[0], true)..setPlayer(players[PLAYER_NEUTRAL_PASSIVE], false)
let skyGem = createItem(SKY_GEM, ZERO2)..setInvulnerable(true)
    ..setPlayer(players[10], true)..setPlayer(players[PLAYER_NEUTRAL_PASSIVE], false)
let poisonGem = createItem(POISON_GEM, ZERO2)..setInvulnerable(true)
    ..setPlayer(players[6], true)..setPlayer(players[PLAYER_NEUTRAL_PASSIVE], false)

let theBloodGem = new Fx(Rects.bloodGemObelisk.getCenter(), Imports.gem)
    ..setZ(240.)
    ..setPlayerColor(PLAYER_COLOR_RED)
let theSkyGem = new Fx(Rects.skyGemObelisk.getCenter(), Imports.gem)
    ..setZ(240.)
    ..setPlayerColor(PLAYER_COLOR_LIGHT_BLUE)
let thePoisonGem = new Fx(Rects.poisonGemObelisk.getCenter(), Imports.gem)
    ..setZ(240.)
    ..setPlayerColor(PLAYER_COLOR_GREEN)

var random = doPeriodically(0.1, _ -> GetRandomInt(1, 3))

init
    BLOOD_GEM.courierBanItem()
    SKY_GEM.courierBanItem()
    POISON_GEM.courierBanItem()

    onMission(mission -> begin
        if mission == 4
            heretic..show()..issuePointOrderById(Orders.move, hereticNewPos)
            doAfter(7.) -> 
                heretic.setFacing(270..asAngleDegrees())
    end)

    onReset(true, () -> begin
        if mark == null
            mark = heretic.addEffect(Imports.questMarking, "origin")
        theBloodGem.getDummy().hide()
        theSkyGem.getDummy().hide()
        thePoisonGem.getDummy().hide()
    end)

    onReset(false, () -> begin
        returnedGems = 0
        skyGemRun.disable()
        bloodGemBearer.clear()
        skyGemBearer.clear()
        poisonGemBearer.clear()
        heretic..setPos(hereticOriginalPos)..hide()
    end)
    
    onModesSelected(() -> begin
        if random != null
            destroy random
            random = null
        bloodGem..setVisible(true).setPos(Rects.bloodGemPlace[GetRandomInt(0, 2)].getCenter())
        skyGem..setVisible(true).setPos(Rects.skyGemPlace[GetRandomInt(0, 2)].getCenter())
        poisonGem..setVisible(true).setPos(Rects.poisonGemPlace[GetRandomInt(0, 2)].getCenter())
    end)

    obelisks = CreateTrigger()
        ..disable()
        ..registerRectEnterEventSource(Rects.gemsHeretic)
        ..addCondition(isHero)
        ..addAction(() -> begin
            let u = EventData.getEnteringUnit()
            let p = u.getOwner()

            let t = new Transmission()
            if returnedGems < 3
                whoAre.add(p)
                t.addLine(heretic, null, "Keeper", null, "The gems that are supposed to be on the obelisks are missing.", TTime.SET, 4., true)
                if u.isAnimal()
                    t.addLine(heretic, null, "Keeper", null, "But I don't know what you would do with that information.", TTime.SET, 3.5, true)
                else
                    t.addLine(u, null, "You", null, "What does that have to do with me?", TTime.SET, 3., true)
                    t.addLine(heretic, null, "Keeper", null, "Those gems have special powers.", TTime.SET, 3., true)
                    t.addLine(heretic, null, "Keeper", null, "And if someone returns them, these powers will be granted.", TTime.SET, 4., true)
                    t.addLine(u, null, "You", null, "Interesting...", TTime.SET, 2., true)
            else
                t.addLine(heretic, null, "Keeper", null, "I'm glad that the gems were returned.", TTime.SET, 3., true)
                t.addLine(heretic, null, "Keeper", null, "But it worries me to think what they will do with those powers.", TTime.SET, 4., true)
                t.addLine(heretic, null, "Keeper", null, "Nah, I think there will be no problem.", TTime.SET, 3., true)
            t.start()
        end)

    // Don't pick the item if you aren't in the mission
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> begin
        let u = EventData.getTriggerUnit()
        let p = u.getOwner()
        if not whoAre.has(p)
            let m = EventData.getOrderTargetItem()
            if m == bloodGem or m == skyGem or m == poisonGem
                message("error", "Why should I do that?", p)
                u.issueTargetOrderById(Orders.attack, u)
    end)

    // Pick the gems
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, () -> begin
        let u = EventData.getManipulatingUnit()
        let m = EventData.getManipulatedItem()
        if ((u.hasItem(bloodGem) or u.hasItem(skyGem)) and m == poisonGem) or
            ((u.hasItem(poisonGem) or u.hasItem(skyGem)) and m == bloodGem) or
            ((u.hasItem(poisonGem) or u.hasItem(bloodGem)) and m == skyGem)

            QuestMessageBJ(u.getOwner().getForce(), bj_QUESTMESSAGE_WARNING, "The gems are so powerful to carry more than one at a time.")
            u.dropItemPoint(m, u.getPos())
        else
            if m == bloodGem
                DisplayTextToPlayer(localPlayer, 0, 0, u.getOwner().getColoredName() + " grabbed the |cffb90000Blood Gem|r.")
            else if m == skyGem
                DisplayTextToPlayer(localPlayer, 0, 0, u.getOwner().getColoredName() + " grabbed the |cff00e4ffSky Gem|r.")
            else if m == poisonGem
                DisplayTextToPlayer(localPlayer, 0, 0, u.getOwner().getColoredName() + " grabbed the |cff57ff59Poison Gem|r.")
    end)

    // Lose the gems
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, () -> begin
        let u = EventData.getManipulatingUnit()
        if u.hasItem(bloodGem)
            DisplayTextToPlayer(localPlayer, 0, 0, u.getOwner().getColoredName() + " lost the |cffb90000Blood Gem|r.")
        else if u.hasItem(skyGem)
            DisplayTextToPlayer(localPlayer, 0, 0, u.getOwner().getColoredName() + " lost the |cff00e4ffSky Gem|r.")
        else if u.hasItem(poisonGem)
            DisplayTextToPlayer(localPlayer, 0, 0, u.getOwner().getColoredName() + " lost the |cff57ff59Poison Gem|r.")
    end)

    // Returning the gems
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.gemObelisks)
        ..addAction(() -> begin
            let u = EventData.getEnteringUnit()
            let blood = u.hasItem(bloodGem)
            let sky = u.hasItem(skyGem)
            let poison = u.hasItem(poisonGem)

            if blood or sky or poison
                let p = u.getOwner()
                let i = p.getId()

                if hero[i].isAlive()
                    hero[i].flashEffect(Abilities.darkPortalTarget, "origin")
                
                returnedGems++

                if blood
                    u.removeItem(bloodGem)
                    bloodGem.setVisible(false)
                    theBloodGem.getDummy().show()
                    bloodGemBearer.add(p)
                    DisplayTextToPlayer(localPlayer, 0, 0, p.getColoredName() + " returned the |cffb90000Blood Gem|r.")
                    doAfter(2., () -> QuestMessageBJ(p.getForce(), bj_QUESTMESSAGE_ITEMACQUIRED, "|cffb90000Blood Gem Ability:|r When your hero kills another unit, it heals for 17% of that unit's maximum life."))
                else if sky
                    skyGemRun.enable()
                    forUnitsOfPlayer(p, u2 -> u2.addBaseSpeed("skygem", 30.))
                    u.removeItem(skyGem)
                    skyGem.setVisible(false)
                    theSkyGem.getDummy().show()
                    skyGemBearer.add(p)
                    DisplayTextToPlayer(localPlayer, 0, 0, p.getColoredName() + " returned the |cff00e4ffSky Gem|r.")
                    doAfter(2., () -> QuestMessageBJ(p.getForce(), bj_QUESTMESSAGE_ITEMACQUIRED, "|cff00e4ffSky Gem Ability:|r Your hero will be +30 speed and will have no obstruction in vision."))
                else if poison
                    u.removeItem(poisonGem)
                    poisonGem.setVisible(false)
                    thePoisonGem.getDummy().show()
                    poisonGemBearer.add(p)
                    DisplayTextToPlayer(localPlayer, 0, 0, p.getColoredName() + " returned the |cff57ff59Poison Gem|r.")
                    doAfter(2., () -> QuestMessageBJ(p.getForce(), bj_QUESTMESSAGE_ITEMACQUIRED, "|cff57ff59Poison Gem Ability:|r When your hero is attacked, whoever attacked will receive a poison effect (20 dps, 20% slow)."))
                
                if returnedGems == 3
                    mark.destr()
                    mark = null
                    theGemsQuest.complete(true)
        end)
    
    // Blood Gem buff
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, () -> begin
        let u = EventData.getKillingUnit()
        let d = EventData.getDyingUnit()
        if bloodGemBearer.has(u.getOwner()) and not d.isType(UNIT_TYPE_STRUCTURE)
            u.setLife(u.getLife() + 0.17 * d.getMaxHP())
            u.addEffect(Imports.vampiricAuraTarget, "origin").destroyAfter(0.4)
            u.addEffect(Objects.humanBloodFootman, "origin").destroyAfter(0.4)
    end)

    // Sky Gem buff
    skyGemRun = CreateTrigger()
        ..registerTimerEvent(1., true)
        ..addAction(() -> begin
            skyGemBearer.forEach(() -> begin
                let p = GetEnumPlayer()
                forUnitsOfPlayer(p, u -> begin
                    let f = createFogModifier(p, FOG_OF_WAR_VISIBLE, u.getPos(), 1800., true, false)..start()
                    doAfter(1., () -> f.destr())
                end)
            end)
        end)
    
    onEnter(() -> begin
        if skyGemBearer.has(getEnterLeaveUnit())
            getEnterLeaveUnit().addBaseSpeed("skygem", 30.)
    end)
    
    onLeave(() -> begin
        if skyGemBearer.has(getEnterLeaveUnit())
            getEnterLeaveUnit().removeSpeedBuff("skygem")
    end)
    
    // Poison Gem buff
    DamageEvent.addListener(() -> begin
        let u = DamageEvent.getTarget()
        if poisonGemBearer.has(u.getOwner())
            let s = DamageEvent.getSource()
            let dummy = DummyRecycler.get(u.getPos(), u.getPos().angleTo(s.getPos()))
                ..addAbility(POISON_DAMAGE)
                ..issueTargetOrderById(Orders.attackonce, s)
            doAfter(0.5) ->
                dummy.removeAbility(POISON_DAMAGE)
                DummyRecycler.recycle(dummy)
    end)        

function ItemDefinition.gemGeneral()
    this
        ..setDroppedWhenCarrierDies(true)
        ..setClassification("Campaign")
        ..setCanBeDropped(true)
        ..setHitPoints(100000)
        ..setModelUsed(Imports.gem)
        ..setTooltipExtended("This is one of the gems.")
        ..setDescription("This is one of the gems.")

@compiletime function gen()
    new ItemDefinition(BLOOD_GEM, 'soul')
        ..gemGeneral()
        ..setInterfaceIcon(Imports.bTNA7XBloodDiamond)
        ..setTooltipBasic("Blood Gem")
        ..setName("Blood Gem")
    
    new ItemDefinition(SKY_GEM, 'soul')
        ..gemGeneral()
        ..setInterfaceIcon(Imports.bTNA7XMoonDiamond)
        ..setTooltipBasic("Sky Gem")
        ..setName("Sky Gem")
    
    new ItemDefinition(POISON_GEM, 'soul')
        ..gemGeneral()
        ..setInterfaceIcon(Imports.bTNA7XPoisonDiamond)
        ..setTooltipBasic("Poison Gem")
        ..setName("Poison Gem")
    
    new AbilityDefinitionPoisonAttack(POISON_DAMAGE)
        ..setDamageperSecond(1, 0)
        ..setAttackSpeedFactor(1, 0.2)
        ..setMovementSpeedFactor(1, 0.2)
        ..setStackingType(1, 0)
        ..setBuffs(1, "Bpoi,Bpsd")
        ..setDurationHero(1, 5.)
        ..setDurationNormal(1, 5.)