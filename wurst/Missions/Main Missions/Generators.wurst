package Generators

import Functions
import initlater Missions
import PlayerData
import Towers
import DrAndDeSpawn
import Reset
import GeneratedValues

import ObjectIdGenerator
import UnitObjEditing

public unit generator1 = null
public unit generator2 = null
public vec2 generatorPos1 = Rects.generator1.getCenter()
public vec2 generatorPos2 = Rects.generator2.getCenter()
public boolean generator1IsAlive = true
public boolean generator2IsAlive = true
public boolean generatorsDestroyed = false
public int generatorsLeft
public trigger destroyGenerators = CreateTrigger()

let GENERATOR = compiletime(UNIT_ID_GEN.next())

init
    onReset(true, () -> begin
        if generator1 == null
            generator1 = createUnit(DEMON, GENERATOR, generatorPos1, UNIT_FACING)
        if generator2 == null
            generator2 = createUnit(DEMON, GENERATOR, generatorPos2, UNIT_FACING)
        generator1.setInvulnerable(true)
        generator2.setInvulnerable(true)
        generatorsLeft = 2
    end)
    onReset(false, () -> begin
        ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.entranceForceWall1)
        ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.entranceForceWall2)
        ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.entranceForceWall3)
        ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.entranceForceWall4)
        ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.entranceForceWall5)
        ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.entranceForceWall6)
        ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.entranceForceWall7)
        ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.entranceForceWall8)
    end)

    destroyGenerators
        ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
        ..addCondition(Condition(() -> GetDyingUnit().getTypeId() == GENERATOR))
        .addAction(() -> begin
            generatorsLeft--
            if GetDyingUnit() == generator1
                generator1 = null
                generator1IsAlive = false
            else if GetDyingUnit() == generator2
                generator2 = null
                generator2IsAlive = false
            
            if generatorsLeft == 1
                QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_UPDATED, "A generator was destroyed.")
            else if generatorsLeft == 0
                generatorsDestroyed = true
                if whatMode[1] == VARIOUS_TIMERS
                    stopActTimer()
                defensiveTowers3()
                forUnitsInRect(bj_mapInitialPlayableArea, u -> begin
                    if u.getTypeId() == ADVANCE_DEATH_TOWER
                        u.setOwner(players[PLAYER_NEUTRAL_PASSIVE], false)
                    // TODO: wall generator
                    ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceForceWall1)
                    ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceForceWall2)
                    ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceForceWall3)
                    ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceForceWall4)
                    ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceForceWall5)
                    ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceForceWall6)
                    ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceForceWall7)
                    ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceForceWall8)
                end)
                startMission5()
        end)

@compiletime function gen()
    new UnitDefinition(GENERATOR, 'npgr')
        ..setHitPointsMaximumBase(1000)
        ..setHitPointsRegenerationType("always")
        ..setHitPointsRegenerationRate(1.)