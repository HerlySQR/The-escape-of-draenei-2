package Habitat

import Functions
import initlater Missions
import PlayerData
import DontPlaySmart
import GeneratedValues

import EventHelper
import Orders
import ObjectIdGenerator
import AbilityObjEditing
import DummyRecycler
import Camera
import Annotations

public boolean herosCanByPass = false
public trigger exitCave = CreateTrigger()

init
    exitCave
        ..registerRectEnterEventSource(Rects.habitatExit1)
        ..registerRectEnterEventSource(Rects.habitatExit2)
        ..addCondition(Condition(() -> GetEnteringUnit().isType(UNIT_TYPE_HERO) and THE_DRAENEI.has(GetEnteringUnit().getOwner())))
        .addAction(() -> begin
            forUnitsInRect(Rects.shops4, u -> begin
                if u.isType(UNIT_TYPE_STRUCTURE)
                    u.setOwner(DRAENEI, true)
            end)
            generator1.setInvulnerable(false)
            generator2.setInvulnerable(false)

            DONT_PASS.disable()
            exitCave.disable()

            startMission(4)
        end)

// Obstacles in the habitat

boolean actived = false
unit caster
trigger holding = CreateTrigger()..disable()  // Cast the slowing ability
trigger deformation = CreateTrigger()..disable()  // Creates the deformation
terraindeformation earthQuake

constant EARTHQUAKE_SPELL_ID = compiletime(ABIL_ID_GEN.next())

@compiletime function gen()
    new AbilityDefinitionThunderClapThunderLizard(EARTHQUAKE_SPELL_ID)
        ..setManaCost(1, 0)
        ..setCooldown(1, 0.)
        ..setDamage(1, 0.)
        ..setDurationNormal(1, 1.)
        ..setDurationHero(1, 1.)
        ..setAreaofEffect(1, 480.)
        ..setArtCaster("")
        .setBuffs(1, "Bchd")

init
    caster = createUnit(players[PLAYER_NEUTRAL_AGGRESSIVE], DUMMY_UNIT_ID, Rects.quake.getCenter(), UNIT_FACING)..addAbility(EARTHQUAKE_SPELL_ID)..setInvulnerable(true)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.activeEarthQuake)
        ..addCondition(notFlying)
        .addAction(() -> begin
            if not actived
                actived = true
                GUnits.activeEarthQuake.setColor(PLAYER_COLOR_GREEN)
                holding.enable()
                deformation.enable()
                earthQuake = createRipple(5., false, Rects.quake.getCenter(), 592.00, 592.00, 64, 1, 512)
            else
                actived = false
                GUnits.activeEarthQuake.setColor(PLAYER_COLOR_BLACK_PASSIVE)
                holding.disable()
                deformation.disable()
                TerrainDeformStop(earthQuake, 1000)
        end)
    holding
        ..registerTimerEvent(1., true)
        ..addAction(() -> caster.issueImmediateOrderById(Orders.creepthunderclap))
    deformation
        ..registerTimerEvent(4., true)
        ..addAction(-> begin
            TerrainDeformStop(earthQuake, 1000)
            earthQuake = createRipple(5., false, Rects.quake.getCenter(), 592.00, 592.00, 64, 1, 512)
        end)

// Big rock

init
    onReset(false, () -> begin
        Dests.bigRock.restoreLife(250., false)
    end)
    onReset(true, () -> begin
        forDestructablesInRect(Rects.rockPieces, d -> begin
            if d.getTypeId() == 'B002'
                d..kill()..show(false)
        end)
        let f1 = createFogModifier(DRAENEI, FOG_OF_WAR_VISIBLE, Rects.rockPieces, true, true)
        let f2 = createFogModifier(DEMON, FOG_OF_WAR_VISIBLE, Rects.rockPieces, true, true)
        doAfter(0.1) -> 
            f1.destr()
            f2.destr()
    end)
    CreateTrigger()
        ..registerDeathEvent(Dests.bigRock)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            let pos = Dests.bigRock.getPos()
            let camera = GetCurrentCameraSetup()
            let inRange = CreateForce()

            t.disable()

            forUnitsInRange(pos, 2000. , u -> begin
                inRange.add(u.getOwner())
            end)
                
            let alpha = inRange.has(localPlayer) ? 0. : 100.
            
            Dests.bigRock.restoreLife(500., false)

            CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 0.80, "ReplaceableTextures\\CameraMasks\\Black_mask.blp", 0, 0, 0, alpha)

            doAfter(0.2) -> 
                CinematicModeBJ(true, inRange)
                inCinematic = true
                if inRange.has(localPlayer)
                    CameraSetTargetNoiseEx(30., 1000000., true)
                    CameraSetSourceNoiseEx(30., 1000000., true)
                    Cams.bigRock1.applyForceDuration(true, 0.)
                    Cams.bigRock2.applyForceDuration(true, 4.)
                
                doAfter(3.4) -> 
                    Dests.bigRock.kill()
                    doAfter(0.4) -> 
                        forDestructablesInRect(Rects.rockPieces, d -> begin
                            if d.getTypeId() == 'B002'
                                d..restoreLife(25., true)..show(true)
                        end)
                        CinematicFadeBJ(bj_CINEFADETYPE_FADEOUTIN, 0.80, "ReplaceableTextures\\CameraMasks\\Black_mask.blp", 0, 0, 0, alpha)
                        doAfter(0.2) -> 
                            CinematicModeBJ(false, inRange)
                            inCinematic = false
                            if inRange.has(localPlayer)
                                CameraSetSourceNoise(0, 0)
                                CameraSetTargetNoise(0, 0)
                                camera.apply(true, true)
                            inRange.destr()
                            t.enable()
        end)