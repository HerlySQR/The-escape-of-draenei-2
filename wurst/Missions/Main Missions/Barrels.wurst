package Barrels

import Functions
import PlayerData
import initlater Missions
import HeroSelection
import Towers
import GeneratedValues
import SummonCourier

import ClosureEvents
import UnitIndexer
import SoundUtils
import Imports
import ObjectIdGenerator
import UnitObjEditing
import ItemObjEditing
import UnitIds
import ObjectIds
import Assets
import Annotations

import BountyController
import UnitTransmission

public constant BARREL = compiletime(ITEM_ID_GEN.next())

public boolean generatorAlive = true
public boolean generatorAlive2 = true
public boolean wallDestroyed = false
public trigger placeBarrel = CreateTrigger()
public unit array heroWithBarrel

let GENERATOR = compiletime(UNIT_ID_GEN.next())
public unit wallGenerator = createUnit(DEMON, GENERATOR, Rects.wallGenerator.getCenter(), UNIT_FACING)
public unit wallGenerator2 = createUnit(DEMON, GENERATOR, Rects.wallGenerator2.getCenter(), UNIT_FACING)

rect place = Rects.barrel1
int barrelNumber = 1
effect array barrelEffect
let earthquake = new SoundDefinition(Sounds.earthquake, false, true)

let dustPoint = [
    Rects.dustPoint[0].getCenter(),
    Rects.dustPoint[1].getCenter(),
    Rects.dustPoint[2].getCenter()
]

let GOBLIN_SHOP = compiletime(UNIT_ID_GEN.next())
let goblinShop = createUnit(players[PLAYER_NEUTRAL_PASSIVE], GOBLIN_SHOP, Rects.lookTheGoblin.getCenter(), UNIT_FACING)

let powerFieldEnter1 = CreateTrigger()
let powerFieldEnter2 = CreateTrigger()
let powerFieldEnter3 = CreateTrigger()
let powerFieldEnter4 = CreateTrigger()
CallbackPeriodic powerFieldAnimation = null
CallbackPeriodic powerFieldAnimation2 = null

init
    BARREL.courierBanItem()
    
    forDestructablesInRect(Rects.DESTROY, d -> d.setInvulnerable(true))
    // Wall generator
    powerFieldEnter1
        ..registerRectEnterEventSource(Rects.powerField1)
        ..registerRectEnterEventSource(Rects.powerField3)
        ..addAction(() -> begin
            let u = GetEnteringUnit()
            if THE_DRAENEI.has(u)
                u.setY(u.getY() + 25.)
        end)
    powerFieldEnter2
        ..registerRectEnterEventSource(Rects.powerField2)
        ..registerRectEnterEventSource(Rects.powerField4)
        ..addAction(() -> begin
            let u = GetEnteringUnit()
            if THE_DRAENEI.has(u)
                u.setY(u.getY() - 25.)
        end)
    powerFieldEnter3
        ..registerRectEnterEventSource(Rects.powerField5)
        ..addAction(() -> begin
            let u = GetEnteringUnit()
            if THE_DRAENEI.has(u)
                u.setY(u.getY() + 25.)
        end)
    powerFieldEnter4
        ..registerRectEnterEventSource(Rects.powerField6)
        ..addAction(() -> begin
            let u = GetEnteringUnit()
            if THE_DRAENEI.has(u)
                u.setY(u.getY() - 25.)
        end)
    onReset(true, () -> begin
        if powerFieldAnimation == null
            powerFieldAnimation = doPeriodically(3., _ -> begin
                for i = 0 to 9
                    Dests.powerField[i].setAnimation("stand")
            end)
        if powerFieldAnimation2 == null
            powerFieldAnimation2 = doPeriodically(3., _ -> begin
                for i = 0 to 4
                    Dests.powerField2[i].setAnimation("stand")
            end)
    end)
    onReset(false, () -> begin
        goblinShop.show()
        if not generatorAlive
            generatorAlive = true
            wallGenerator = createUnit(DEMON, GENERATOR, Rects.wallGenerator.getCenter(), UNIT_FACING)
            for i = 0 to 9
                Dests.powerField[i]
                    ..restoreLife(50., true)
                    ..queueAnimation("stand")
            powerFieldEnter1.enable()
            powerFieldEnter2.enable()
        else
            wallGenerator.setLife(wallGenerator.getMaxHP())
        if not generatorAlive2
            generatorAlive2 = true
            wallGenerator2 = createUnit(DEMON, GENERATOR, Rects.wallGenerator2.getCenter(), UNIT_FACING)
            for i = 0 to 4
                Dests.powerField2[i]
                    ..restoreLife(50., true)
                    ..queueAnimation("stand")
            powerFieldEnter3.enable()
            powerFieldEnter4.enable()
        else
            wallGenerator2.setLife(wallGenerator2.getMaxHP())
        // Wall
        if not wallDestroyed
            wallDestroyed = true
            forDestructablesInRect(Rects.DESTROY, d -> d.restoreLife(250., false))
        forDestructablesInRect(Rects.barrel1, d -> d.remove())
        forDestructablesInRect(Rects.barrel2, d -> d.remove())
        forDestructablesInRect(Rects.barrel3, d -> d.remove())
    end)
    EventListener.add(EVENT_PLAYER_UNIT_DEATH, () -> begin
        if EventData.getDyingUnit() == wallGenerator
            generatorAlive = false
            powerFieldEnter1.disable()
            powerFieldEnter2.disable()
            for i = 0 to 9
                Dests.powerField[i].kill()
            if EventData.getKillingUnit() != null
                QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_HINT, "The power field generator in the pavilion was destroyed")
            destroy powerFieldAnimation
            powerFieldAnimation = null
            forUnitsInRect(Rects.demonTower2, u -> begin
                if u.getTypeId() == DEMON_TOWER
                    u.setOwner(players[PLAYER_NEUTRAL_PASSIVE], false)
            end)
        else if EventData.getDyingUnit() == wallGenerator2
            generatorAlive2 = false
            powerFieldEnter3.disable()
            powerFieldEnter4.disable()
            for i = 0 to 4
                Dests.powerField2[i].kill()
            if EventData.getKillingUnit() != null
                QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_HINT, "The power field generator of the dungeon was destroyed")
            destroy powerFieldAnimation2
            powerFieldAnimation2 = null
    end)

    // Get barrel
    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM, () -> begin
        let u = EventData.getTriggerUnit()
        let m = EventData.getManipulatedItem()
        if m.getTypeId() == BARREL and u.isType(UNIT_TYPE_HERO)
            let p = u.getOwner()
            if THE_DRAENEI.has(p)
                var b = false
                for i = 0 to 5
                    if u.itemInSlot(i) != m and u.itemInSlot(i).getTypeId() == BARREL
                        b = true
                        break
                if b
                    m.remove()
                    message("warning", "You cannot have more than one at a time.", p)
                    doAfter(2.) ->
                        Transmission.simple(p, goblinShop, null, "Goblin Sapper", null, "Hey, you have one in your hand, wait for leaving it.", TTime.SET, 5.50)
                else
                    QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_ITEMACQUIRED, "Someone got a barrel.")
                    let i = p.getNumber()
                    barrelEffect[i] = u.addEffect("Models\\TNTBarrel.mdl", "hand")
                    heroWithBarrel[i] = u
            else
                m.remove()
                message("error", "Why do you need this?", p)
    end)
    // Die with barrel
    EventListener.add(EVENT_PLAYER_UNIT_DEATH, () -> begin
        let u = GetDyingUnit()
        if u.hasItemById(BARREL)
            u.getItemOfId(BARREL).remove()
            for i = 1 to 5
                if u == heroWithBarrel[i]
                    barrelEffect[i].destr()
                    heroWithBarrel[i] = null
                    u.addEffect("Units\\Other\\TNTBarrel\\TNTBarrel.mdl", "hand").destr()
                    break
    end)
    onUnitDeindex(() -> begin
        if getIndexingUnit().isType(UNIT_TYPE_HERO)
            let u = getIndexingUnit()
            for i = 1 to 5
                if u == heroWithBarrel[i]
                    barrelEffect[i].destr()
                    heroWithBarrel[i] = null
                    break
    end)
    // Place barrel
    placeBarrel
        ..registerRectEnterEventSource(Rects.placeBarrel1)
        ..registerRectEnterEventSource(Rects.placeBarrel2)
        ..registerRectEnterEventSource(Rects.placeBarrel3)
        ..addCondition(Condition(() -> begin
            return GetEnteringUnit().hasItemById(BARREL)
        end))
        ..addAction(() -> begin
            let u = GetEnteringUnit()
            u.getItemOfId(BARREL).remove()
            SetDestructableInvulnerable(createDestructable('LTex', place.getCenter(), GetRandomDirectionDeg().asAngleDegrees(), 1., 0), true)
            switch barrelNumber
                case 1
                    QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_WARNING, "The first barrel has been placed")
                    place = Rects.barrel2
                case 2
                    QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_WARNING, "The second barrel has been placed")
                    place = Rects.barrel3
                case 3
                    QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_WARNING, "The third barrel has been placed\nThe wall is going to be destroyed")
                    destroyWall()
            barrelNumber++
            let i = u.getOwner().getNumber()
            heroWithBarrel[i] = null
            barrelEffect[i].destr()
            barrelEffect[i] = null
        end)
    Bounty.set(GENERATOR, 100, 3, 3)

function destroyWall()
    if whatMode[1] == VARIOUS_TIMERS
        stopActTimer()
    exitCave.enable()
    let fire1 = addEffect("Doodads\\Cinematic\\FireRockSmall\\FireRockSmall.mdl", Rects.barrel1.getCenter())
    let fire2 = addEffect("Doodads\\Cinematic\\FireRockSmall\\FireRockSmall.mdl", Rects.barrel2.getCenter())
    let fire3 = addEffect("Doodads\\Cinematic\\FireRockSmall\\FireRockSmall.mdl", Rects.barrel3.getCenter())
    
    goblinShop.hide()

    forUnitsInRect(bj_mapInitialPlayableArea, u -> begin
        if u.hasItemById(BARREL)
            u.getItemOfId(BARREL).remove()
    end)
    forUnitsInRect(Rects.demonTower3, u -> begin
        if u.getTypeId() == DEMON_TOWER
            u.setOwner(players[PLAYER_NEUTRAL_PASSIVE], false)
    end)

    actDrSpawn = Rects.respawn3
    actDeSpawn = Rects.respawn4

    forUnitsInRect(Rects.shops3, u -> begin
        if u.isType(UNIT_TYPE_STRUCTURE)
            u.setColor(DRAENEI.getColor())
    end)

    doAfter(3.) -> 
        // Destroy the barrels
        forDestructablesInRect(Rects.barrel1, d -> d.kill())
        forDestructablesInRect(Rects.barrel2, d -> d.kill())
        forDestructablesInRect(Rects.barrel3, d -> d.kill())
        for i = 1 to 11
            CameraSetEQNoiseForPlayer(players[i], 20.)
        doAfter(0.2) ->
            wallDestroyed = true
            forDestructablesInRect(Rects.DESTROY, d -> d.kill())
            fire1.destr()
            fire2.destr()
            fire3.destr()
            earthquake.playOnPoint(Rects.DESTROY.getCenter().withZ(0.))
            doAfter(0.4) ->
                addEffect("Doodads\\Cinematic\\CavernDust\\CavernDust.mdl", dustPoint[0]).destroyAfter(3.)
                addEffect("Doodads\\Cinematic\\CavernDust\\CavernDust.mdl", dustPoint[1]).destroyAfter(3.)
                addEffect("Doodads\\Cinematic\\CavernDust\\CavernDust.mdl", dustPoint[2]).destroyAfter(3.)
                doAfter(0.35) -> 
                    for i = 1 to 11
                        CameraClearNoiseForPlayer(players[i])

        startMission(3)
        doAfter(0.2) ->
            moveCircles(3)

@compiletime function gen()
    new ItemDefinition(BARREL, 'skrt')
        ..setClassification("Miscellaneous")
        ..setGoldCost(0)
        ..setStockReplenishInterval(1)
        ..setCanBeSoldByMerchants(true)
        ..setCanBeDropped(false)
        ..setInterfaceIcon(Imports.bTNExplBarrel)
        ..setAbilities("")
        ..setTooltipExtended("This barrel is used to destroy walls although it is not very powerful.")
        ..setTooltipBasic("Acquire Explosive Barrel")
        ..setDescription("Explosive Barrel")
        ..setName("Explosive Barrel")
    
    new BuildingDefinition(GOBLIN_SHOP, UnitIds.goblinmerchant)
        ..setModelFile(Units.goblinSapper1)
        ..setSelectionScale(1.5)
        ..setIconGameInterface(Icons.bTNGoblinSapper)
        ..setShadowTextureBuilding(Textures.shadowCrates)
        ..setGroundTexture("")
        ..setItemsSold(BARREL.toRawCode())
        ..setUnitSoundSet(Soundsets.goblinSapper)
        ..setName("Goblin Sapper")
    
    new BuildingDefinition(GENERATOR, UnitIds.powergenerator)
        ..setHitPointsRegenerationType("always")
        ..setHitPointsRegenerationRate(1.)
        ..setModelFile(Doodads.crystalShield)
        ..setTintingColorGreen(100)
        ..setTintingColorBlue(100)
        ..setName("Batery")