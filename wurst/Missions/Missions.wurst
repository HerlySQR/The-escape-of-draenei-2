package Missions

import public ClosureTimers
import public ClosureForGroups
import Orders
import LinkedList

import public DefineMissions
import public MissionTimers
import public Dungeon
import public Barrels
import public Generators
import public Habitat
import public Pings
import EndCinematic
import MyBoard
import public initlater ModeSelection
import DrAndDeSpawn
import NeutralSpawn
import Towers
import Surrender
import GeneratedValues
import public Reset
import HeroSelection

public int actMission = 0

public fogmodifier array seeDrSpawn
public fogmodifier array seeDeSpawn

boolean timeIsOver = false

interface MissionClosure
    function run(int mission)

let callbacks = new LinkedList<MissionClosure>()

public function onMission(MissionClosure cb)
    callbacks.add(cb)

public function startMission(int mission)
    if timeIsOver
        return

    actMission = mission
    bj_FORCE_ALL_PLAYERS.forEach(() -> GetEnumPlayer().setState(PLAYER_STATE_RESOURCE_FOOD_USED, actMission))
    for cb in callbacks
        cb.run(mission)

init
    seeDrSpawn[1] = createVision(DRAENEI, Rects.items1, true)..start()
    seeDrSpawn[2] = createVision(DRAENEI, Rects.items2, true)
    seeDrSpawn[3] = createVision(DRAENEI, Rects.items3, true)
    seeDrSpawn[4] = createVision(DRAENEI, Rects.items4, true)
    seeDeSpawn[1] = createVision(DEMON, Rects.items2, true)..start()
    seeDeSpawn[2] = createVision(DEMON, Rects.items3, true)..start()
    seeDeSpawn[3] = createVision(DEMON, Rects.items5, true)..start()

    onModesSelected(() -> startMission(1))

    onReset(false, () -> begin
        seeDrSpawn[2].stop()
        seeDrSpawn[3].stop()
        seeDrSpawn[4].stop()
        seeDeSpawn[2].start()
        timeIsOver = false
        actMission = 0
    end)

    bj_FORCE_ALL_PLAYERS.forEach(() -> GetEnumPlayer().setState(PLAYER_STATE_RESOURCE_FOOD_CAP, 5))
    onMission(mission -> begin
        moveCircles(mission)
        switch mission
            // Mission 1
            case 1
                giveGold.enable()
                doAfter(10.) () ->
                    if whatMode[1] == SINGLE_TIMER
                        startSingleTimer()
                    else if whatMode[1] == VARIOUS_TIMERS
                        startActTimer(1)

                    pings.enable()

                    missions[1].setState(QuestState.DISCOVERED)
                    QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_DISCOVERED, "|cffffcc00Mision 1:|r The door")

                    gameBoard.display(true)
                    gameBoard.minimize()
                    if whatMode[2] == YES_CREEPS or whatMode[2] == ONLY_DE_AND_DR
                        doAfter(5, () -> begin
                            spawnRun = true
                        end)
            // Mission 2
            case 2
                pings.disable()
                if whatMode[1] == VARIOUS_TIMERS
                    stopActTimer()
                seeDrSpawn[2].start()

                if whatMode[1] == VARIOUS_TIMERS
                    doAfter(10., () -> startActTimer(actMission))
                
                actDrSpawn = Rects.respawn2
                actDeSpawn = Rects.respawn3

                QuestMessageBJ(THE_DRAENEI, bj_QUESTMESSAGE_COMPLETED, "|cffffcc00THE DOOR OF THE DUNGEON WAS DESTROYED|r")
                QuestMessageBJ(THE_DEMONS, bj_QUESTMESSAGE_FAILED, "|cffffcc00THE DOOR OF THE DUNGEON WAS DESTROYED|r")
                missions[1].setState(QuestState.COMPLETED)

                doAfter(7.) -> 
                    DisplayTextToForce(THE_DRAENEI, "Your team has advanced")
                    doAfter(3.) ->
                        pings.enable()

                        missions[2].setState(QuestState.DISCOVERED)
                        QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_DISCOVERED, "|cffffcc00Mision 2:|r The wall")
                        doAfter(20.) -> 
                            if whatMode[5] == NOT_LEVELING
                                QuestMessageBJ(THE_DRAENEI, bj_QUESTMESSAGE_HINT, "|cff32cd32HELP:|r If you use repick when you have the barrel, it will be deleted.")
            // Mission 3
            case 3
                if whatMode[1] == VARIOUS_TIMERS
                    stopActTimer()

                seeDeSpawn[2].stop()
                seeDrSpawn[4].start()

                actDrSpawn = Rects.respawn4
                actDeSpawn = Rects.respawn5

                seeDrSpawn[3].start()
                missions[3].setState(QuestState.COMPLETED)
                pings.disable()

                doAfter(5.) -> 
                    bj_FORCE_ALL_PLAYERS.forEach(() -> GetEnumPlayer().setState(PLAYER_STATE_RESOURCE_FOOD_USED, actMission))
                    // Move all the Draenei units
                    forUnitsOfPlayer(DRAENEI, u -> begin
                        vec2 target
                        if u.getTypeId() == DRAENEI_WORKER
                            target = Rects.justHidePls.getCenter()
                        else
                            target = Rects.attackPoint4.getCenter()
                        u.issuePointOrderById(Orders.attack, target)
                    end)
                    if whatMode[1] == VARIOUS_TIMERS
                        doAfter(7., () -> startActTimer(actMission))
                    doAfter(2.) -> 
                        DisplayTextToForce(THE_DRAENEI, "Your team has advanced")
                        DisplayTextToForce(THE_DEMONS, "Your team has been stopped")
                        doAfter(5.) -> 
                            missions[3].setState(QuestState.DISCOVERED)
                            QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_DISCOVERED, "|cffffcc00Mision 3:|r The habitat")
            // Mission 4
            case 4
                if whatMode[1] == VARIOUS_TIMERS
                    stopActTimer()
                
                pings.disable()

                if whatMode[1] == VARIOUS_TIMERS
                    stopActTimer()
                    doAfter(10., () -> startActTimer(actMission))

                QuestMessageBJ(THE_DRAENEI, bj_QUESTMESSAGE_COMPLETED, "|cffffcc00MISSION COMPLETED|r\nYou managed to get out of the cave.")
                QuestMessageBJ(THE_DEMONS, bj_QUESTMESSAGE_FAILED, "|cffffcc00MISSION FAILED|r\nThey managed to get out of the cave.")
                missions[3].setState(QuestState.COMPLETED)

                doAfter(7.) -> 
                    DisplayTextToForce(THE_DRAENEI, "Your team has advanced")
                    DisplayTextToForce(THE_DEMONS, "Your team has been stopped")
                    doAfter(3.) -> 
                        missions[4].setState(QuestState.DISCOVERED)
                        QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_DISCOVERED, "|cffffcc00Mision 4:|r The generators")
                        
                        pings.enable()

                        doAfter(10.) -> 
                            QuestMessageBJ(THE_DRAENEI, bj_QUESTMESSAGE_HINT, "|cffffce33All the telepoters have been unlocked.|r")
            // Mission 5
            case 5
                SetDestructableInvulnerable(Dests.mainEntranceDoor, false)
                missions[4].setState(QuestState.COMPLETED)
                QuestMessageBJ(THE_DRAENEI, bj_QUESTMESSAGE_COMPLETED, "The second generator was destroyed.\n\nThe defenses will be deactivated.")
                QuestMessageBJ(THE_DEMONS, bj_QUESTMESSAGE_FAILED, "The second generator was destroyed.\n\nThe defenses will be deactivated.")
                // Order all draenei attack the demons
                let pos = Rects.demonSpawn31.getCenter()
                forUnitsOfPlayer(DRAENEI, u -> begin
                    if not u.isType(UNIT_TYPE_HERO) and not u.getTypeId() == DRAENEI_WORKER
                        u.issuePointOrderById(Orders.attack, pos)
                end)
                doAfter(5.) -> 
                    actMission = 5
                    bj_FORCE_ALL_PLAYERS.forEach(() -> GetEnumPlayer().setState(PLAYER_STATE_RESOURCE_FOOD_USED, actMission))
                    if whatMode[1] == VARIOUS_TIMERS
                        startActTimer(actMission)
                    doAfter(5.) -> 
                        missions[5].setState(QuestState.DISCOVERED)
                        QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_DISCOVERED, "|cffffcc00Mision 5:|r The exit")

                        pings.enable()
    end)

// Draenei Win

public function draeneiWin()
    if timeIsOver
        return
    ForceUICancel()
    stopSpawn()
    stopActTimer()
    disableNeutralSpawn()
    pings.disable()
    
    if theySurrender
        QuestMessageBJ(THE_DRAENEI, bj_QUESTMESSAGE_COMPLETED, "|cffffcc00THE MAIN ENTRY WAS DESTROYED|r\nDraenei have won")
        QuestMessageBJ(THE_DEMONS, bj_QUESTMESSAGE_FAILED, "|cffffcc00THE MAIN ENTRY WAS DESTROYED|r\nDraenei have won")
    else
        QuestMessageBJ(THE_DRAENEI, bj_QUESTMESSAGE_COMPLETED, "|cffffcc00THE DEMONS SURRENDERED|r\nDraenei have won")
        QuestMessageBJ(THE_DEMONS, bj_QUESTMESSAGE_FAILED, "|cffffcc00THE DEMONS SURRENDERED|r\nDraenei have won")

    for i = 1 to 10
        hero[i].setInvulnerable(true)
    
    doAfter(5.) -> 
        draeneiCinematic()

trigger mainExit = CreateTrigger()

init
    mainExit
        ..registerDeathEvent(Dests.mainEntranceDoor)
        .addAction(function draeneiWin)

// Demons Win

public function demonsWin()
    timeIsOver = true
    ForceUICancel()
    stopSpawn()
    stopActTimer()
    disableNeutralSpawn()
    pings.disable()
    destroyDoor.disable()
    placeBarrel.disable()
    exitCave.disable()
    destroyGenerators.disable()
    mainExit.disable()

    if theySurrender
        QuestMessageBJ(THE_DRAENEI, bj_QUESTMESSAGE_FAILED, "|cffffcc00TIME IS OVER|r\nDemons have won")
        QuestMessageBJ(THE_DEMONS, bj_QUESTMESSAGE_COMPLETED, "|cffffcc00TIME IS OVER|r\nDemons have won")
    else
        QuestMessageBJ(THE_DRAENEI, bj_QUESTMESSAGE_FAILED, "|cffffcc00THE DRAENEI SURRENDERED|r\nDemons have won")
        QuestMessageBJ(THE_DEMONS, bj_QUESTMESSAGE_COMPLETED, "|cffffcc00THE DRAENEI SURRENDERED|r\nDemons have won")

    for i = 1 to 10
        hero[i].setInvulnerable(true)
    
    doAfter(5.) -> 
        demonsCinematic()