package ImpulseBoots

import AbilityData

import Reference

import PseudoWindWalk
import PathingLib

public constant IMPULSE_BOOTS_SPELL = compiletime(ABIL_ID_GEN.next())

let MAX_DIST = 1200.
let SPEED = 2500 * INTERVAL

public constant IMPULSE_BOOTS_TOOLTIP = ""

function destructable.isBlocker() returns bool
    if not this.isAliveTrick()
        return false
    
    let typ = this.getTypeId()
    if typ == 'B00L'
        return true
    return false

function vec2.isPathGood() returns bool
    let check = new Reference(false)
    forDestructablesInRange(this, 64., d -> begin
        if d.isBlocker()
            check.val = true
    end)
    if check.into()
        return false
    else if not this.isFlyable()
        return false
    return true

init
    registerSpellEffectEvent(IMPULSE_BOOTS_SPELL, () -> begin
        let caster = EventData.getSpellAbilityUnit()
        let casterPos = caster.getPos()
        let point = EventData.getAbilityTargetPos()
        var dist = min(1200., casterPos.distanceTo(point))
        let direction = casterPos.normalizedPointerTo(point)
        caster.disableCollision()

        var checkPoint = casterPos + 64. * direction
        doPeriodically(INTERVAL, cb -> begin
            if dist > 0 and checkPoint.isPathGood()
                caster.setPos(caster.getPos() + SPEED * direction)
                checkPoint = caster.getPos() + 64. * direction
                if GetRandomInt(1,5) == 1
                    caster.flashEffect(Abilities.defendCaster, "chest")
            else
                destroy cb
                caster.enableCollision()
            dist -= SPEED
        end)
    end)

@compiletime function gen()
    new ChannelAbilityPreset(IMPULSE_BOOTS_SPELL, 1, true)
        ..basicItemSpell()
        ..presetTargetTypes(Targettype.POINT)
        ..setCastRange(1, 99999.)
        ..setManaCost(1, 0)
        ..setCooldown(1, 12.)
        ..setIconNormal(Imports.bTNWindsBoots)
        ..setName("Impulse")