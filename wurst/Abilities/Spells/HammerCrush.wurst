package HammerCrush

import AbilityData
import MoveSpeedX

public constant HAMMER_CRUSH_NL = compiletime(ABIL_ID_GEN.next())
public constant HAMMER_CRUSH_L = compiletime(ABIL_ID_GEN.next())
//public constant HAMMER_CRUSH_S = compiletime(ABIL_ID_GEN.next())

// General
let DURATION = 1.5
let SLOW = 0.5
let CD = 20.
let RANGE = 600.
// Not leveling
let MANA_NL = [120, 150]
let DMG_NL = [100., 150.]
// Leveling
let MANA_L = [110, 125, 140, 165]
let DMG_L = [90., 130., 170., 210.]
// Internal
let SMASH = new SoundDefinition(Sounds.shockwave, false, true)

function hammerCrushActions(unit caster, vec2 pos, player owner, real damage, angle ang, int count)
    let newPos = pos.polarOffset(ang, 200. * count)
    flashEffect(Abilities.thunderclapCaster, newPos)
    forUnitsInRange(newPos, 200., u -> begin
        if owner.isEnemyOf(u.getOwner()) and not u.isType(UNIT_TYPE_MAGIC_IMMUNE)
            caster.damageTarget(u, damage, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_SONIC)
            u.scaleSpeed("hammer crush", SLOW)
            doAfter(DURATION) -> 
                u.removeSpeedBuff("hammer crush")
    end)

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> begin
        let data = abilityCond(HAMMER_CRUSH_NL, HAMMER_CRUSH_L, 0/*HAMMER_CRUSH_S*/)
        if data.check
            let caster = EventData.getSpellAbilityUnit()
            let owner = caster.getOwner()
            let pos = caster.getPos()
            let ang = pos.angleTo(EventData.getSpellTargetPos())
            real damage
            if data.isNL
                damage = DMG_NL[data.lvl]
            else
                damage = DMG_L[data.lvl]
            SMASH.playOnPoint(pos.toVec3())
            hammerCrushActions(caster, pos, owner, damage, ang, 1)
            doAfter(0.25) -> 
                hammerCrushActions(caster, pos, owner, damage, ang, 2)
                doAfter(0.25) -> 
                    hammerCrushActions(caster, pos, owner, damage, ang, 3)
    end)

function ChannelAbilityPreset.general()
    this
        ..presetBaseOrderID(lvl -> "holybolt")
        ..presetOption(Option.PHYSICALSPELL, true)
        ..presetFollowThroughTime(lvl -> 0.75)
        ..setAnimationNames("attack,third")
        ..presetTargetsAllowed(lvl -> "air,enemies,neutral,nonancient,organic,ground")
        ..tooltipStartListen()
        ..setName("Hammer Crush")
        ..presetTargetTypes(Targettype.POINT)
        ..presetCooldown(lvl -> CD)
        ..presetCastRange(lvl -> RANGE)
        // Audiovisual
        ..presetIcon(Imports.bTNHammerCrush)

@compiletime function gen()
    new ChannelAbilityPreset(HAMMER_CRUSH_NL, 2, true, new AbilityTooltipGenerator("With the force of his hammer, the Vindicator generates 3 blasts that damage the affected units slow by " + ((1. - SLOW) * 100.).toString(0) + "% for " + DURATION.toString() +" seconds."))
        ..presetButtonPosNormal(0, 2)
        ..setHeroAbility(false)
        ..general()
        // Stats
        ..addTooltipProperty("Damage", lvl -> DMG_NL[lvl-1])
        ..presetManaCost(lvl -> MANA_NL[lvl-1])
        // Tooltip
        ..presetHotkey("W")
        .tooltipStopListen()

    new ChannelAbilityPreset(HAMMER_CRUSH_L, 4, true, new AbilityTooltipGenerator("With the force of his hammer, the Vindicator generates 3 blasts that damage the affected units slow by " + ((1. - SLOW) * 100.).toString(0) + "% for " + DURATION.toString() +" seconds."))
        ..presetButtonPosNormal(0, 2)
        ..presetButtonPosResearch(0, 0)
        ..setHeroAbility(true)
        ..setRequiredLevel(1)
        ..general()
        // Stats
        ..addTooltipProperty("Damage", lvl -> DMG_L[lvl-1])
        ..presetManaCost(lvl -> MANA_L[lvl-1])
        // Tooltip
        ..presetHotkey("W")
        .tooltipStopListen()