package Creed

import AbilityData
import MoveSpeedX
import UnitIndexer

public constant CREED_NL = compiletime(ABIL_ID_GEN.next())
public constant CREED_L = compiletime(ABIL_ID_GEN.next())

constant CREED_BUFF = compiletime(createDummyBuffObject("Creed", "This unit is slowed: its movement speed has been reduced.", Imports.bTNSickle))

// General
let SLOW = 0.75
let DURATION = 3.
// Not Leveling
let CD_NL = [20., 10.]
let EXTRA_DMG_NL = [75., 150.]
// Leveling
let CD_L = [26., 20., 14., 8.]
let EXTRA_DMG_L = [50., 100., 150., 200.]
// Internal
let availableMap = new HashMap<unit, boolean>()
let effMap = new HashMap<unit, effect>()
let cbMap = new HashMap<unit, CallbackSingle>()

function addCreed(unit caster, real delay)
    availableMap.put(caster, false)
    cbMap.put(caster, doAfter(delay, () -> begin
        availableMap.put(caster, true)
        effMap.put(caster, caster.addEffect(Abilities.illidanMissile, "weapon"))
        cbMap.remove(caster)
    end))

init
    DamageEvent.addUnreducedListener(() -> begin
        let caster = DamageEvent.getSource()
        let target = DamageEvent.getTarget()
        let data = caster.pasAbilityCond(CREED_NL, CREED_L)
        if data.check
            and availableMap.get(caster)
            and not target.isType(UNIT_TYPE_STRUCTURE)
            and not target.isType(UNIT_TYPE_MECHANICAL)
            and not target.isType(UNIT_TYPE_MAGIC_IMMUNE)
            and not DamageEvent.isSpell()

            real damage
            real delay
            if data.isNL
                damage = EXTRA_DMG_NL[data.lvl]
                delay = CD_NL[data.lvl]
            else
                damage = EXTRA_DMG_L[data.lvl]
                delay = CD_L[data.lvl]

            target.scaleSpeed("creed", SLOW)
            target.addBuff(CREED_BUFF, DURATION, () -> target.removeSpeedBuff("creed"))
            target.flashEffect(Objects.bloodElfSpellThiefBlood, "chest")
            effMap.get(caster).destr()
            effMap.remove(caster)
            DamageEvent.addAmount(damage)
            addCreed(caster, delay)
    end)
    onUnitIndex(() -> begin
        let data = getIndexingUnit().pasAbilityCond(CREED_NL, CREED_L)
        if data.check
            real delay
            if data.isNL
                delay = CD_NL[data.lvl]
            else
                delay = CD_L[data.lvl]
            addCreed(getIndexingUnit(), delay)
    end)
    onUnitDeindex(() -> begin
        if getIndexingUnit().pasAbilityCond(CREED_NL, CREED_L).check
            let d = getIndexingUnit()
            availableMap.remove(d)
            if effMap.has(d)
                effMap.get(d).destr()
                effMap.remove(d)
            if cbMap.has(d)
                destroy cbMap.get(d)
                cbMap.remove(d)
    end)

function AbilityDefinitionHardenedSkin.general()
    this
        ..presetIgnoredDamage(lvl -> 0.)
        ..presetMinimumDamage(lvl -> 0.)
        ..presetChancetoReduceDamage(lvl -> 0.)
        ..presetIncludeMeleeDamage(lvl -> false)
        ..presetIncludeRangedDamage(lvl -> false)
        ..setRequirements("")
        ..tooltipStartListen()
        ..setName("Creed")
        ..addTooltipProperty("Target Type", lvl -> Targettype.PASSIVE castTo int)
        ..presetIcon(Imports.pASSickle)

@compiletime function gen()
    new AbilityDefinitionHardenedSkin(CREED_NL)
        ..registerTooltipGenerator(new AbilityTooltipGenerator("The Zealot's faith makes it capable of an attack that deals extra damage and slows the enemy by " + (1. - SLOW).toString(0) + " for " + DURATION.toString(0) + " seconds."))
        ..presetLevels(2)
        ..presetButtonPosNormal(2, 2)
        ..setHeroAbility(false)
        ..general()
        // Stats
        ..addTooltipProperty("Extra damage", lvl -> EXTRA_DMG_NL[lvl-1])
        ..presetCooldown(lvl -> CD_NL[lvl-1])
        // Audiovisual
        // Tooltip
        ..tooltipStopListen()
        ..setEditorSuffix("(Not leveling)")
    
    new AbilityDefinitionHardenedSkin(CREED_L)
        ..registerTooltipGenerator(new AbilityTooltipGenerator("The Zealot's faith makes it capable of an attack that deals extra damage and slows the enemy by " + (1. - SLOW).toString(0) + " for " + DURATION.toString(0) + " seconds."))
        ..presetLevels(4)
        ..presetButtonPosNormal(2, 2)
        ..presetButtonPosResearch(2, 0)
        ..setHeroAbility(true)
        ..setRequiredLevel(1)
        ..setIconResearch(Imports.bTNSickle)
        ..general()
        // Stats
        ..addTooltipProperty("Extra damage", lvl -> EXTRA_DMG_L[lvl-1])
        ..presetCooldown(lvl -> CD_L[lvl-1])
        // Audiovisual
        // Tooltip
        ..tooltipStopListen()
        .setEditorSuffix("(Leveling)")