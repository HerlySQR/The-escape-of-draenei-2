package Retribution

import AbilityData

public constant RETRIBUTION_NL = compiletime(ABIL_ID_GEN.next())
public constant RETRIBUTION_L = compiletime(ABIL_ID_GEN.next())
public constant RETRIBUTION_S = compiletime(ABIL_ID_GEN.next())

// General
let CD = 20.
let RANGE = 700.
// Not leveling
let MANA_NL = 100
let BASE_DMG_NL = [100., 150.]
let EXTRA_DMG_FACTOR_NL = [0.1, 0.2]
// Leveling
let MANA_L = [90, 100, 110, 120]
let BASE_DMG_L = [100., 125., 150., 175.]
let EXTRA_DMG_FACTOR_L = [0.1, 0.15, 0.2, 0.25]

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> begin
        let data = abilityCond(RETRIBUTION_NL, RETRIBUTION_L, RETRIBUTION_S)
        if data.check
            let caster = EventData.getSpellAbilityUnit()
            let target = EventData.getSpellTargetUnit()
            let eff = target.addEffect(Imports.retribution, "origin")

            real baseD
            real factor

            if data.isNL
                baseD = BASE_DMG_NL[data.lvl]
                factor = EXTRA_DMG_FACTOR_NL[data.lvl]
            else
                baseD = BASE_DMG_L[data.lvl]
                factor = EXTRA_DMG_FACTOR_L[data.lvl]

            doAfter(3.) -> 
                let damage = baseD + target.getLife() * factor
                caster.damageTarget(target, damage, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_DIVINE)
                eff.destr()
                createTTEx(target.getPos3Zero(), damage.toInt().toString(), 12)
                    ..setColor(255, 255, 127, 255)
                    ..setSpeed(128., 90.)
                    ..setPermanent(false)
                    ..setLifespan(2.)
                    .setFadepoint(1.)
    end)

function ChannelAbilityPreset.general()
    this
        ..presetBaseOrderID(lvl -> "holybolt")
        ..presetOption(Option.PHYSICALSPELL, true)
        ..presetFollowThroughTime(lvl -> 0.75)
        ..setAnimationNames("spell,channel")
        ..presetTargetsAllowed(lvl -> "air,enemies,neutral,nonancient,organic,ground")
        ..tooltipStartListen()
        ..setHotkey("Q")
        ..setName("Retribution")
        ..presetTargetTypes(Targettype.UNIT)
        // Stats
        ..presetCooldown(lvl -> CD)
        ..presetCastRange(lvl -> RANGE)
        // Audiovisual
        ..presetIcon(Imports.bTNAnkhOfRebirth)

@compiletime function gen()
    new ChannelAbilityPreset(RETRIBUTION_NL, 2, true, new AbilityTooltipGenerator("The person affected by this must pay for the service he didn't do, causing a damage plus a percentage of his current life."))
        ..setHeroAbility(false)
        ..general()
        ..addTooltipProperty("Base damage", lvl -> BASE_DMG_NL[lvl-1])
        ..addTooltipProperty("Extra damage factor", lvl -> EXTRA_DMG_FACTOR_NL[lvl-1].toPercentage())
        ..presetManaCost(lvl -> MANA_NL)
        // Tooltip
        ..tooltipStopListen()
        ..setEditorSuffix("(Not leveling)")
    
    new ChannelAbilityPreset(RETRIBUTION_L, 4, true, new AbilityTooltipGenerator("The person affected by this must pay for the service he didn't do, causing a damage plus a percentage of his current life."))
        ..setHeroAbility(true)
        ..setRequiredLevel(1)
        ..general()
        ..addTooltipProperty("Base damage", lvl -> BASE_DMG_L[lvl-1])
        ..addTooltipProperty("Extra damage factor", lvl -> EXTRA_DMG_FACTOR_L[lvl-1].toPercentage())
        ..presetManaCost(lvl -> MANA_L[lvl-1])
        // Tooltip
        ..tooltipStopListen()
        ..setEditorSuffix("(Leveling)")
    
    new ChannelAbilityPreset(RETRIBUTION_S, 6, true)
        ..setHeroAbility(false)
        ..general()
        ..presetTooltipNormal(lvl -> "[|cffffcc00F|r] Retribution")
        ..setHotkey("F")
        // Stats
        ..presetManaCost(lvl -> lvl < 3 ? MANA_NL : MANA_L[lvl-3])
        ..presetTooltipNormalExtended(lvl -> begin
            real value1
            int value2
            if lvl < 3
                value1 = BASE_DMG_NL[lvl-1]
                value2 = (EXTRA_DMG_FACTOR_NL[lvl-1]*100).toInt()
            else
                value1 = BASE_DMG_L[lvl-3]
                value2 = (EXTRA_DMG_FACTOR_L[lvl-3]*100).toInt()
            return "The person affected by this must pay for the service he didn't do, causing a {0} damage plus a {1}% of his current life.".format(value1.toString(0), value2.toString())
        end)
        ..setEditorSuffix("(Stealed)")