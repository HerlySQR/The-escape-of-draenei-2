package Retribution

import AbilityData

public constant RETRIBUTION_NL = compiletime(ABIL_ID_GEN.next())

// General
let CD = 20.
let RANGE = 700.
// Not leveling
let MANA_NL = 100
let BASE_DMG = 100.
let EXTRA_DMG_FACTOR = 0.1

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> begin
        if GetSpellAbilityId() == RETRIBUTION_NL
            let caster = EventData.getSpellAbilityUnit()
            let target = EventData.getSpellTargetUnit()
            let baseD = BASE_DMG
            let factor = EXTRA_DMG_FACTOR
            let eff = target.addEffect(Imports.retribution, "origin")
            doAfter(3.) -> 
                let damage = baseD + target.getLife() * factor
                caster.damageTarget(target, damage, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_DIVINE)
                eff.destr()
                createTTEx(target.getPos3Zero(), damage.toInt().toString(), 12)
                    ..setColor(255, 255, 127, 255)
                    ..setSpeed(128., 90.)
                    ..setPermanent(false)
                    ..setLifespan(2.)
                    .setFadepoint(1.)
    end)

@compiletime function gen()
    new ChannelAbilityPreset(RETRIBUTION_NL, 1, true, new AbilityTooltipGenerator("The person affected by this must pay for the service he didn't do, causing a damage plus a percentage of his current life."))
        ..presetBaseOrderID(lvl -> "holybolt")
        ..presetOption(Option.PHYSICALSPELL, true)
        ..presetButtonPosNormal(0, 2)
        ..setHeroAbility(false)
        ..presetFollowThroughTime(lvl -> 0.75)
        ..setAnimationNames("spell,channel")
        ..presetTargetsAllowed(lvl -> "air,enemies,neutral,nonancient,organic,ground")
        ..tooltipStartListen()
        ..setName("[|cffffcc00Q|r] Retribution")
        ..presetTargetTypes(Targettype.UNIT)
        // Stats
        ..addTooltipProperty("Base damage", lvl -> BASE_DMG)
        ..addTooltipProperty("Extra damage factor", lvl -> EXTRA_DMG_FACTOR)
        ..presetManaCost(lvl -> MANA_NL)
        ..presetCooldown(lvl -> CD)
        ..presetCastRange(lvl -> RANGE)
        // Audiovisual
        ..presetIcon(Imports.bTNAnkhOfRebirth)
        // Tooltip
        ..presetHotkey("Q")
        .tooltipStopListen()