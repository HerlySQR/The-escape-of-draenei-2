package Intangibility

import AbilityData
import PseudoWindWalk
import Execute

public constant INTANGIBILITY_NL = compiletime(ABIL_ID_GEN.next())
public constant INTANGIBILITY_L = compiletime(ABIL_ID_GEN.next())
public constant INTANGIBILITY_S = compiletime(ABIL_ID_GEN.next())

constant INTANGIBILITY_BUFF = compiletime(BUFF_ID_GEN.next())

// General
let CD = 16.
let DMG_CD = 3.
// Not Leveling
let MANA_NL = [50, 70]
let DMG_NL = [80., 100.]
let DURATION_NL = [8., 10.]
// Leveling
let MANA_L = [60, 70, 80, 90]
let DMG_L = [85., 105., 125., 145.]
let DURATION_L = [8., 9., 10., 11.]
// Internal
let cbMap = new HashMap<unit, CallbackCounted>()
let AREA = 300.

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> begin
        let data = abilityCond(INTANGIBILITY_NL, INTANGIBILITY_L, INTANGIBILITY_S)
        if data.check
            let caster = GetSpellAbilityUnit()
            let owner = caster.getOwner()
            let cooldowns = new HashMap<unit, real>()
            let affected = CreateGroup()

            real damage
            real duration
            if data.isNL
                damage = DMG_NL[data.lvl]
                duration = DURATION_NL[data.lvl]
            else
                damage = DMG_L[data.lvl]
                duration = DURATION_L[data.lvl]
            
            caster.startWindWalk(INTANGIBILITY_BUFF)
            try(() -> cbMap.get(caster).stop())
            cbMap.put(caster, doPeriodicallyTimed(INTERVAL, duration, cb -> begin
                if not cb.isLast() and caster.isAlive()
                    forUnitsInRange(caster.getPos(), AREA, u -> begin
                        if u.isAlive()
                            and u.isEnemyOf(owner)
                            and not u.isType(UNIT_TYPE_STRUCTURE)
                            and not u.isType(UNIT_TYPE_MAGIC_IMMUNE)
                            and not affected.has(u) and u.ignoreLocust()

                            cooldowns.put(u, DMG_CD)
                            affected.add(u)
                            caster.damageTarget(u, damage, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_NORMAL)
                            u.flashEffect(Abilities.annihilationMissile, "chest")
                    end)
                    for u in affected
                        if cooldowns.get(u) > 0. and u.isAlive()
                            cooldowns.put(u, cooldowns.get(u) - INTERVAL)
                        else
                            affected.remove(u)
                else
                    affected.destr()
                    destroy cooldowns
                    if not cb.isLast()
                        destroy cb
            end))
    end)

function AbilityDefinitionBerserk.general()
    this
        ..presetBuffs(lvl -> INTANGIBILITY_BUFF.toRawCode())
        ..presetDamageTakenIncrease(lvl -> 0.)
        ..presetAttackSpeedIncrease(lvl -> 0.)
        ..presetMovementSpeedIncrease(lvl -> 0.)
        ..tooltipStartListen()
        ..setHotkey("E")
        ..setName("Intangibility")
        ..addTooltipProperty("Target Type", lvl -> Targettype.NONE castTo int)
        ..presetCooldown(lvl -> CD)
        // Audiovisual
        ..presetIcon(Icons.bTNWandOfShadowSight)

@compiletime function gen()
    new AbilityDefinitionBerserk(INTANGIBILITY_NL)
        ..registerTooltipGenerator(new AbilityTooltipGenerator("Makes the hero intangible and causes damage to nearby enemy units with a cooldown of " + DMG_CD.toString(0) + " seconds."))
        ..presetLevels(2)
        ..setHeroAbility(false)
        // Stats
        ..presetDurationHero(lvl -> DURATION_NL[lvl-1])
        ..presetDurationNormal(lvl -> DURATION_NL[lvl-1])
        ..general()
        ..addTooltipProperty("Damage", lvl -> DMG_NL[lvl-1])
        ..addTooltipProperty("Duration", lvl -> DURATION_NL[lvl-1])
        ..presetManaCost(lvl -> MANA_NL[lvl-1])
        // Tooltip
        ..tooltipStopListen()
        ..setEditorSuffix("(Not leveling)")
    
    new AbilityDefinitionBerserk(INTANGIBILITY_L)
        ..registerTooltipGenerator(new AbilityTooltipGenerator("Makes the hero intangible and causes damage to nearby enemy units with a cooldown of " + DMG_CD.toString(0) + " seconds."))
        ..presetLevels(4)
        ..setHeroAbility(true)
        ..setRequiredLevel(1)
        // Stats
        ..presetDurationHero(lvl -> DURATION_L[lvl-1])
        ..presetDurationNormal(lvl -> DURATION_L[lvl-1])
        ..general()
        ..addTooltipProperty("Damage", lvl -> DMG_L[lvl-1])
        ..addTooltipProperty("Duration", lvl -> DURATION_L[lvl-1])
        ..presetManaCost(lvl -> MANA_L[lvl-1])
        // Tooltip
        ..tooltipStopListen()
        ..setEditorSuffix("(Leveling)")
    
    new AbilityDefinitionBerserk(INTANGIBILITY_S)
        ..setHeroAbility(false)
        ..general()
        ..presetLevels(6)
        ..presetTooltipNormal(lvl -> "[|cffffcc00F|r] Intangibility")
        ..setHotkey("F")
        // Stats
        ..presetDurationHero(lvl -> lvl < 3 ? DURATION_NL[lvl-1] : DURATION_L[lvl-3])
        ..presetDurationNormal(lvl -> lvl < 3 ? DURATION_NL[lvl-1] : DURATION_L[lvl-3])
        ..presetManaCost(lvl -> lvl < 3 ? MANA_NL[lvl-1] : MANA_L[lvl-3])
        ..presetTooltipNormalExtended(lvl -> begin
            real value1
            real value2
            if lvl < 3
                value1 = DURATION_NL[lvl-1]
                value2 = DMG_NL[lvl-1]
            else
                value1 = DURATION_L[lvl-3]
                value2 = DMG_L[lvl-3]
            return "Makes the hero intangible for {0} seconds and causes {1} damage to nearby enemy units with a cooldown of {2} seconds.".format(value1.toString(0), value2.toString(0), DMG_CD.toString())
        end)
        ..setEditorSuffix("(Stealed)")
    
    new BuffDefinition(INTANGIBILITY_BUFF, 'Bbsk')
        ..setIcon(Icons.bTNWandOfShadowSight)
        ..setArtTarget(1, "")
        ..setTargetAttachmentPoint0(1, "")
        ..setTargetAttachmentPoint1(1, "")
        ..setName(1, "Intangibility")
        ..setTooltipNormal(1, "Intangibility")
        .setTooltipNormalExtended(1, "This unit can pass the units and go to elevated floors.")