package BrillianceAura

import AbilityData

public constant BRILLIANCE_AURA_NL = compiletime(ABIL_ID_GEN.next())
public constant BRILLIANCE_AURA_L = compiletime(ABIL_ID_GEN.next())

// General
// Not leveling
let MANA_REGEN_NL = [1., 1.5]
let AREA_NL = [900., 99999.]
// Leveling
let MANA_REGEN_L = [1., 1.5, 2., 2.5]
let AREA_L = 99999.

function AbilityDefinitionAuraBrilliancecreep.general()
    this
        ..tooltipStartListen()
        ..setHotkey("W")
        ..setName("Brilliance Aura")
        ..addTooltipProperty("Target Type", lvl -> Targettype.PASSIVE castTo int)

@compiletime function gen()
    new AbilityDefinitionAuraBrilliancecreep(BRILLIANCE_AURA_NL)
        ..registerTooltipGenerator(new AbilityTooltipGenerator("Gives additional mana regeneration to ally units."))
        ..presetLevels(2)
        ..presetButtonPosNormal(1, 2)
        ..setHeroAbility(false)
        ..general()
        // Stats
        ..presetManaRegenerationIncrease(lvl -> MANA_REGEN_NL[lvl-1])
        ..presetAreaofEffect(lvl -> AREA_NL[lvl-1])
        // Audiovisual
        // Tooltips
        ..tooltipStopListen()
        ..setEditorSuffix("(Not leveling)")
    
    new AbilityDefinitionAuraBrilliancecreep(BRILLIANCE_AURA_L)
        ..registerTooltipGenerator(new AbilityTooltipGenerator("Gives additional mana regeneration to ally units."))
        ..presetLevels(4)
        ..setRequiredLevel(1)
        ..presetButtonPosNormal(1, 2)
        ..presetButtonPosNormal(1, 0)
        ..setHeroAbility(true)
        ..setIconResearch(Icons.bTNBrilliance)
        ..general()
        // Stats
        ..presetManaRegenerationIncrease(lvl -> MANA_REGEN_L[lvl-1])
        ..presetAreaofEffect(lvl -> AREA_L)
        // Audiovisual
        // Tooltips
        ..tooltipStopListen()
        .setEditorSuffix("(Leveling)")