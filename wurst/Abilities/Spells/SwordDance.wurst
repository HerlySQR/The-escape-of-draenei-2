package SwordDance

import AbilityData

public constant SWORD_DANCE_NL = compiletime(ABIL_ID_GEN.next())
public constant SWORD_DANCE_L = compiletime(ABIL_ID_GEN.next())
public constant SWORD_DANCE_S = compiletime(ABIL_ID_GEN.next())

// General
let CD = 15.
let AREA = 350.
// Not leveling
let MANA_NL = [100, 125]
let DMG_NL = [100., 200.]
// Leveling
let MANA_L = [80, 100, 120, 140]
let DMG_L = [110., 195., 280., 365.]
// Internal
let effMap = new HashMap<unit, effect>()
let destrMap = new HashMap<unit, boolean>()

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST, () -> begin
        if abilityCond(SWORD_DANCE_NL, SWORD_DANCE_L, SWORD_DANCE_S).check
            let caster = GetSpellAbilityUnit()
            if effMap.has(caster)
                effMap.get(caster).destr()
            effMap.put(caster, caster.addEffect(Imports.arcaneTornado, "origin"))
            destrMap.put(caster, true)
    end)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_ENDCAST, () -> begin
        if abilityCond(SWORD_DANCE_NL, SWORD_DANCE_L, SWORD_DANCE_S).check
            let caster = GetSpellAbilityUnit()
            if destrMap.get(caster)
                effMap.get(caster).destr()
            effMap.remove(caster)
            destrMap.remove(caster)
    end)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> begin
        let data = abilityCond(SWORD_DANCE_NL, SWORD_DANCE_L, SWORD_DANCE_S)
        if data.check
            let caster = GetSpellAbilityUnit()
            let owner = caster.getOwner()

            real damage
            if data.isNL
                damage = DMG_NL[data.lvl]
            else
                damage = DMG_L[data.lvl]
            
            destrMap.put(caster, false)
            forUnitsInRange(caster.getPos(), AREA, u -> begin
                if owner.isEnemyOf(u.getOwner()) and not u.isType(UNIT_TYPE_STRUCTURE)
                    u.flashEffect(Abilities.stampedeMissileDeath, "chest")
                    caster.damageTarget(u, damage, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_ENHANCED)
            end)
            let eff = effMap.get(caster)
            doAfter(0.27, () -> eff.destr())
    end)

function ChannelAbilityPreset.general()
    this
        ..presetBaseOrderID(lvl -> "whirlwind")
        ..presetFollowThroughTime(lvl -> 0.75)
        ..setAnimationNames("attack")
        ..tooltipStartListen()
        ..setHotkey("W")
        ..setName("Sword dance")
        ..presetTargetTypes(Targettype.NONE)
        ..presetCooldown(lvl -> CD)
        ..presetAreaofEffect(lvl -> AREA)
        // Audiovisual
        ..presetIcon(Icons.bTNWhirlwind)
        
@compiletime function gen()
    new ChannelAbilityPreset(SWORD_DANCE_NL, 2, true, new AbilityTooltipGenerator("The zealot with its blade, with a single slash deal damage to all nearby enemy units."))
        ..presetBaseOrderID(lvl -> "earthquake")
        ..setHeroAbility(false)
        ..general()
        // Stats
        ..addTooltipProperty("Damage", lvl -> DMG_NL[lvl-1])
        ..presetManaCost(lvl -> MANA_NL[lvl-1])
        // Tooltip
        ..tooltipStopListen()
        ..setEditorSuffix("(Not leveling)")
    
    new ChannelAbilityPreset(SWORD_DANCE_L, 4, true, new AbilityTooltipGenerator("The zealot with its blade, with a single slash deal damage to all nearby enemy units."))
        ..presetBaseOrderID(lvl -> "earthquake")
        ..setHeroAbility(true)
        ..setRequiredLevel(1)
        ..general()
        // Stats
        ..addTooltipProperty("Damage", lvl -> DMG_L[lvl-1])
        ..presetManaCost(lvl -> MANA_L[lvl-1])
        // Tooltip
        ..tooltipStopListen()
        ..setEditorSuffix("(Leveling)")
    
    new ChannelAbilityPreset(SWORD_DANCE_S, 6, true)
        ..setHeroAbility(false)
        ..general()
        ..presetTooltipNormal(lvl -> "[|cffffcc00F|r] Sword dance")
        ..setHotkey("F")
        // Stats
        ..presetManaCost(lvl -> lvl < 3 ? MANA_NL[lvl-1] : MANA_L[lvl-3])
        ..presetTooltipNormalExtended(lvl -> begin
            real value
            if lvl < 3
                value = DMG_NL[lvl-1]
            else
                value = DMG_L[lvl-3]
            return "he zealot with its blade, with a single slash deal {0} of damage to all nearby enemy units.".format(value.toString())
        end)
        ..setEditorSuffix("(Stealed)")