package CriticalStrike

import AbilityData

public constant CRITICAL_STRIKE_NL = compiletime(ABIL_ID_GEN.next())
public constant CRITICAL_STRIKE_L = compiletime(ABIL_ID_GEN.next())

// General
// Not leveling
let CHANCE_NL = 16.
let DMG_MULT_NL = [2., 3.]
// Leveling
let CHANCE_L = 17.
let DMG_MULT_L = [1.5, 2., 2.5, 3.]

function AbilityDefinitionBladeMasterCriticalStrike.general()
    this
        ..tooltipStartListen()
        ..setHotkey("E")
        ..setName("Critical Strike")
        ..addTooltipProperty("Target Type", lvl -> Targettype.PASSIVE castTo int)

@compiletime function gen()
    new AbilityDefinitionBladeMasterCriticalStrike(CRITICAL_STRIKE_NL)
        ..registerTooltipGenerator(new AbilityTooltipGenerator("It gives a chance of multiplying the normal damage of an attack."))
        ..presetLevels(2)
        ..setHeroAbility(false)
        ..general()
        ..setRequirements("")
        // Stats
        ..presetChancetoCriticalStrike(lvl -> CHANCE_NL)
        ..presetDamageMultiplier(lvl -> DMG_MULT_NL[lvl-1])
        // Audiovisual
        // Tooltip
        ..tooltipStopListen()
        ..setEditorSuffix("(Not leveling)")
    
    new AbilityDefinitionBladeMasterCriticalStrike(CRITICAL_STRIKE_L)
        ..registerTooltipGenerator(new AbilityTooltipGenerator("It gives a chance of multiplying the normal damage of an attack."))
        ..presetLevels(4)
        ..setRequiredLevel(1)
        ..setHeroAbility(false)
        ..general()
        ..setRequirements("")
        // Stats
        ..presetChancetoCriticalStrike(lvl -> CHANCE_L)
        ..presetDamageMultiplier(lvl -> DMG_MULT_L[lvl-1])
        // Audiovisual
        // Tooltip
        ..tooltipStopListen()
        .setEditorSuffix("(Leveling)")