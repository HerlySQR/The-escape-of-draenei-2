package Transsition

import AbilityData
import PseudoWindWalk
import LastOrder

public constant TRANSSITION_NL = compiletime(ABIL_ID_GEN.next())
public constant TRANSSITION_L = compiletime(ABIL_ID_GEN.next())
public constant TRANSSITION_S = compiletime(ABIL_ID_GEN.next())

constant TRANSSITION_CANCEL = compiletime(ABIL_ID_GEN.next())
constant TRANSSITION_SHADE = compiletime(UNIT_ID_GEN.next())

// General
let DURATION = 7.
let RANGE = 1000.
// Not Leveling
let CD_NL = [16., 11.]
let MANA_NL = [60, 50]
// Leveling
let CD_L = [19., 16., 13., 11.]
let MANA_L = [65, 60, 55, 50]
// Internal
let SOUND = new SoundDefinition(Sounds.absorbMana, false, true)
let casterMap = new HashMap<unit, unit>()
let effMap = new HashMap<unit, LinkedList<effect>>()

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> begin
        if abilityCond(TRANSSITION_NL, TRANSSITION_L, TRANSSITION_S).check
            let caster = EventData.getSpellAbilityUnit()
            let shade = createUnit(caster.getOwner(), TRANSSITION_SHADE, caster.getPos(), caster.getFacingAngle())
            shade.issuePointOrderById(Orders.move, EventData.getSpellTargetPos())
            shade.setTimedLife(DURATION)
            shade.startWindWalk('BTLF')
            effMap.put(shade, new LinkedList<effect>()
                ..add(shade.addEffect(Abilities.avengerMissile, "lefthand"))
                ..add(shade.addEffect(Abilities.avengerMissile, "righthand"))
                ..add(shade.addEffect(Abilities.avengerMissile, "leftfeet"))
                ..add(shade.addEffect(Abilities.avengerMissile, "rightfeet")))
            casterMap.put(shade, caster)
            caster.getOwner().select(shade)
    end)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, () -> begin
        if GetIssuedOrderId() == Orders.defend and GetOrderedUnit().getTypeId() == TRANSSITION_SHADE
            let shade = GetOrderedUnit()
            flashEffect(Imports.blinkPurpleTarget, shade.getPos())
            casterMap.remove(shade)
            shade.remove()
            let list = effMap.get(shade)
            for eff in list
                eff.destr()
            destroy list
            effMap.remove(shade)
    end)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, () -> begin
        if GetDyingUnit().getTypeId() == TRANSSITION_SHADE
            let shade = GetDyingUnit()
            if GetKillingUnit() == null
                let caster = casterMap.get(shade)
                flashEffect(Imports.blinkPurpleTarget, shade.getPos())
                flashEffect(Imports.blinkPurpleTarget, caster.getPos())
                casterMap.remove(shade)
                let pos = shade.getPos()
                let face = shade.getFacingAngle()
                if IsUnitSelected(shade, shade.getOwner())
                    shade.getOwner().selectSingle(caster)
                shade.remove()
                let order = caster.getLastOrder()
                caster.setPos(pos)
                caster.setFacing(face)
                order.issue()
            else
                flashEffect(Imports.blinkPurpleTarget, shade.getPos())
                casterMap.remove(shade)
                shade.remove()
            let list = effMap.get(shade)
            for eff in list
                eff.destr()
            destroy list
            effMap.remove(shade)
    end)

function ChannelAbilityPreset.general()
    this
        ..presetBaseOrderID(lvl -> "stampede")
        ..presetFollowThroughTime(lvl -> 0.75)
        ..tooltipStartListen()
        ..setHotkey("Q")
        ..setName("Transsition")
        ..presetTargetTypes(Targettype.POINT)
        // Stats
        ..addTooltipProperty("Duration", lvl -> DURATION)
        ..presetCastRange(lvl -> RANGE)
        // Audiovisual
        ..presetIcon(Icons.bTNQuillSpray)
        ..setAnimationNames("spell,attack")


@compiletime function gen()
    new ChannelAbilityPreset(TRANSSITION_NL, 2, true, new AbilityTooltipGenerator("Projects an invulnerable shade that can move but can't attack. After " + DURATION.toString(0) + " seconds, the wolf teleports to the shade location if is not cancelled."))
        ..setHeroAbility(false)
        ..general()
        ..presetCooldown(lvl -> CD_NL[lvl-1])
        ..presetManaCost(lvl -> MANA_NL[lvl-1])
        // Tooltip
        ..tooltipStopListen()
        ..setEditorSuffix("(Not leveling)")
    
    new ChannelAbilityPreset(TRANSSITION_L, 4, true, new AbilityTooltipGenerator("Projects an invulnerable shade that can move but can't attack. After " + DURATION.toString(0) + " seconds, the wolf teleports to the shade location if is not cancelled."))
        ..setHeroAbility(true)
        ..setRequiredLevel(1)
        ..general()
        ..presetCooldown(lvl -> CD_L[lvl-1])
        ..presetManaCost(lvl -> MANA_L[lvl-1])
        // Tooltip
        ..tooltipStopListen()
        ..setEditorSuffix("(Not leveling)")
    
    new ChannelAbilityPreset(TRANSSITION_S, 4, true)
        ..setLevels(6)
        ..setHeroAbility(false)
        ..general()
        ..presetTooltipNormal(lvl -> "[|cffffcc00F|r] Transsition")
        ..setHotkey("F")
        // Stats
        ..presetCooldown(lvl -> lvl < 3 ? CD_NL[lvl-1] : CD_L[lvl-3])
        ..presetManaCost(lvl -> lvl < 3 ? MANA_NL[lvl-1] : MANA_L[lvl-3])
        ..presetTooltipNormalExtended(lvl -> "Projects an invulnerable shade that can move but can't attack. After " + DURATION.toString(0) + " seconds, the caster teleports to the shade location if is not cancelled.")
        ..setEditorSuffix("(Stealed)")

    new AbilityDefinitionDefend(TRANSSITION_CANCEL)
        ..setLevels(1)
        ..setHeroAbility(false)
        ..setName("Abort")
        ..setHotkey("Q")
        ..setEditorSuffix("Transsition")
        ..setTooltipNormal(1, "[|cffffcc00Q|r] Abort")
        ..setTooltipNormalExtended(1, "Cancels the transsition")
        ..setRequirements("")
        // Stats
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 0.)
        // Audiovisual
        ..presetIcon(Icons.bTNQuillSprayOff)
        // Tooltip
    
    new UnitDefinition(TRANSSITION_SHADE, 'osw1')
        ..setAttacksEnabled(0)
        ..setDefenseBase(0)
        ..setUnitClassification("summoned")
        ..setTintingColorRed(0)
        ..setTintingColorGreen(0)
        ..setTintingColorBlue(0)
        ..setSpeedBase(450)
        ..setCollisionSize(0.)
        ..setNormalAbilities(commaList(AbilityIds.invulnerable, TRANSSITION_CANCEL))
        ..setName("Wolf shade")