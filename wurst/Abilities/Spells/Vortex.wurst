package Vortex

import AbilityData

import Fx

public constant VORTEX_NL = compiletime(ABIL_ID_GEN.next())
public constant VORTEX_L = compiletime(ABIL_ID_GEN.next())
public constant VORTEX_S = compiletime(ABIL_ID_GEN.next())

constant SHIELD = compiletime(ABIL_ID_GEN.next())
constant SHIELD_BUFF = compiletime(BUFF_ID_GEN.next())

// General
let DURATION = 10.
let CD = 160.
let RANGE = 500.
// Not leveling
let DMG_PER_SEC_NL = 33.
let EXTRA_DMG_NL = 250.
let MANA_NL = 200
let AREA_NL = 450.
// Leveling
let DMG_PER_SEC_L = [33., 50.]
let EXTRA_DMG_L = [200., 250.]
let MANA_L = [250, 350]
let AREA_L = 650.
// Internal
let casters = CreateGroup()
let paused = CreateGroup()
let INTERVAL = 0.03
let SOUND_1 = new SoundDefinition(Sounds.flareTarget1, false, true)
let SOUND_2 = new SoundDefinition(Sounds.flareTarget2, false, true)
let SOUND_3 = new SoundDefinition(Sounds.flareTarget3, false, true)
let SOUND_4 = new SoundDefinition(Sounds.flareTarget4, false, true)

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT, () -> begin
        let data = abilityCond(VORTEX_NL, VORTEX_L, VORTEX_S)
        if data.check
            let caster = EventData.getSpellAbilityUnit()
            let target = EventData.getSpellTargetPos()
            let owner = caster.getOwner()
            let vortex = new Fx(target.withZ(50.), UNIT_FACING, Imports.blackHole)..setScale(0.5)
            let pulled = CreateGroup()
            let enter = CreateGroup()
            let area = AREA_NL
            var size = 0.
            let deformation = createCrater(DURATION, false, target, area, 96.)
            let finalDmgMap = new HashMap<unit, real>()

            real damage
            real extraDamage
            if data.isNL
                damage = DMG_PER_SEC_NL * INTERVAL
                extraDamage = EXTRA_DMG_NL
            else
                damage = DMG_PER_SEC_L[data.lvl] * INTERVAL
                extraDamage = EXTRA_DMG_L[data.lvl]

            casters.add(caster)
            vortex.getDummy()..addAbility(SHIELD)..setOwner(owner, false)
            doPeriodically(INTERVAL, cb -> begin
                if caster.getCurrentOrder() == Orders.voodoo
                    real r
                    if size < 51.
                        r = (50. + 0.1 * size.squared())
                        r /= 100.
                        vortex.setScale(r)
                        size++
                    forUnitsInRange(target, area, u -> begin
                        if not u.isType(UNIT_TYPE_STRUCTURE) and not casters.has(u) and owner.isEnemyOf(u.getOwner()) and u.ignoreLocust()
                            pulled.add(u)
                            if u.getPos().distanceTo(target) <= 80.
                                pulled.remove(u)
                                enter.add(u)
                                u.hide()
                    end)
                    for u in pulled
                        if u.getPos().distanceTo(target) <= area
                            r = 0.08 * size.squared()
                            r /= 100.
                            u.setPos(u.getPos().moveTowards(target, r))
                            caster.damageTarget(u, damage, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_UNIVERSAL)
                            if not paused.has(u)
                                paused.add(u)
                                u.pause(true)
                        else
                            pulled.remove(u)
                            if paused.has(u)
                                paused.remove(u)
                                u.pause(false)
                    for u in enter
                        if owner.isEnemyOf(u.getOwner())
                            finalDmgMap.put(u, finalDmgMap.get(u) + 1.)
                else
                    destroy new Fx(target.withZ(50.), UNIT_FACING, Imports.arcaneNova)..setScale(1. + 0.002 * size.squared())
                    casters.remove(caster)
                    let target3 = target.toVec3()
                    SOUND_1.playOnPoint(target3)
                    SOUND_2.playOnPoint(target3)
                    SOUND_3.playOnPoint(target3)
                    SOUND_4.playOnPoint(target3)
                    for u from enter
                        u.show()
                        if owner.isEnemyOf(u.getOwner())
                            caster.damageTarget(u, damage * finalDmgMap.get(u), ATTACK_TYPE_NORMAL, DAMAGE_TYPE_UNIVERSAL)
                        pulled.add(u)
                    for u from pulled
                        if paused.has(u)
                            paused.remove(u)
                            u.pause(false)
                        if owner.isEnemyOf(u.getOwner())
                            caster.damageTarget(u, extraDamage, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_UNIVERSAL)
                    vortex.getDummy()..removeAbility(SHIELD)..setOwner(players[PLAYER_NEUTRAL_PASSIVE], false)
                    TerrainDeformStop(deformation, 1000)
                    enter.destr()
                    pulled.destr()
                    destroy finalDmgMap
                    destroy vortex
                    destroy cb
            end)
    end)

function ChannelAbilityPreset.general()
    this
        ..presetOption(Option.TARGETIMAGE, true)
        ..presetBaseOrderID(lvl -> "voodoo")
        ..presetDisableOtherAbilities(lvl -> false)
        ..setAnimationNames("spell,stand,channel")
        ..tooltipStartListen()
        ..setHotkey("R")
        ..setName("Vortex")
        ..presetTargetTypes(Targettype.POINT)
        ..presetCooldown(lvl -> CD)
        ..presetFollowThroughTime(lvl -> DURATION)
        ..presetCastRange(lvl -> RANGE)
        // Audiovisual
        ..presetIcon(Imports.bTNArcaneField)
        ..setArtEffect("")

@compiletime function gen()
    new ChannelAbilityPreset(VORTEX_NL, 1, true, new AbilityTooltipGenerator("Create a portal that pulls enemy units in an area and hurts every second, if a unit is close to the center, it we'll disappear and when the spells finish, that units will reappear and receive extra damage.\nThe portal lasts 10 seconds or if the Spectre is interrupted the spell finishes."))
        ..setHeroAbility(false)
        ..general()
        // Stats
        ..addTooltipProperty("Damage per second", lvl -> DMG_PER_SEC_NL)
        ..addTooltipProperty("Extra damage", lvl -> EXTRA_DMG_NL)
        ..presetAreaofEffect(lvl -> AREA_NL)
        ..presetManaCost(lvl -> MANA_NL)
        // Tooltip
        ..tooltipStopListen()
        ..setEditorSuffix("(Not leveling)")
    
    new ChannelAbilityPreset(VORTEX_L, 2, true, new AbilityTooltipGenerator("Create a portal that pulls enemy units in an area and hurts every second, if a unit is close to the center, it we'll disappear and when the spells finish, that units will reappear and receive extra damage.\nThe portal lasts 10 seconds or if the Spectre is interrupted the spell finishes."))
        ..setHeroAbility(true)
        ..setRequiredLevel(6)
        ..setLevelSkipRequirement(6)
        ..general()
        // Stats
        ..addTooltipProperty("Damage per second", lvl -> DMG_PER_SEC_L[lvl-1])
        ..addTooltipProperty("Extra damage", lvl -> EXTRA_DMG_L[lvl-1])
        ..presetAreaofEffect(lvl -> AREA_L)
        ..presetManaCost(lvl -> MANA_L[lvl-1])
        // Tooltip
        ..tooltipStopListen()
        ..setEditorSuffix("(Leveling)")
    
    new ChannelAbilityPreset(VORTEX_S, 3, true)
        ..setHeroAbility(false)
        ..general()
        ..presetTooltipNormal(lvl -> "[|cffffcc00F|r] Vortex")
        ..setHotkey("F")
        // Stats
        ..presetManaCost(lvl -> lvl < 2 ? MANA_NL : MANA_L[lvl-2])
        ..presetAreaofEffect(lvl -> lvl < 2 ? AREA_NL : AREA_L)
        ..presetTooltipNormalExtended(lvl -> begin
            real value1
            real value2
            if lvl < 2
                value1 = DMG_PER_SEC_NL
                value2 = EXTRA_DMG_NL
            else
                value1 = DMG_PER_SEC_L[lvl-2]
                value2 = EXTRA_DMG_L[lvl-2]
            return "Create a portal that pulls enemy units in an area and hurts {0} every second, if a unit is close to the center, it we'll disappear and when the spells finish, that units will reappear and receive {1} extra damage.\nThe portal lasts {2} seconds or if the caster is interrupted the spell finishes.".format(value1.toString(0), value2.toString(0), DURATION.toString(0))
        end)
        ..setEditorSuffix("(Stealed)")
    
    new AbilityDefinitionAuraWarDrumsKodobeast(SHIELD)
        ..setAttackDamageIncrease(1, 0.)
        ..setMeleeBonus(1, false)
        ..setRangedBonus(1, false)
        ..setTargetsAllowed(1, "air,friend,invulnerable,ground,vulnerable")
        ..setArtTarget("")
        ..setBuffs(1, SHIELD_BUFF.toRawCode())
        ..setName("Shield")
        ..setEditorSuffix("(Vortex)")
        ..setTooltipNormal(1, "Shield")
        .setTooltipNormalExtended(1, "This shield prevents the unit to be pulled of a vortex that gives this protection.")
    
    new BuffDefinition(SHIELD_BUFF, 'BOac')
        ..setIcon(Imports.bTNArcaneField)
        ..setArtTarget(1, Abilities.voodooAuraTarget)
        ..setTargetAttachmentPoint0(1, "overhead")
        ..setName(1, "Shield")
        ..setEditorSuffix(1, "(Vortex)")
        ..setTooltipNormal(1, "Shield")
        .setTooltipNormalExtended(1, "This shield prevents the unit to be pulled of a vortex that gives this protection.")