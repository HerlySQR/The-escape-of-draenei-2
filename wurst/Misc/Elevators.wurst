package Elevators

import Functions
import GeneratedValues
import Reset

import EventHelper
import ClosureTimers
import ClosureForGroups

init
    Dests.elevatorHabitat1
        ..changeWalls(true, ElevatorWallType.EAST)
        ..changeWalls(true, ElevatorWallType.NORTH)
        ..changeWalls(false, ElevatorWallType.SOUTH)
        ..changeWalls(true, ElevatorWallType.WEST)
    // Cave exit
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.elevatorHabitat1)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            doAfter(2.5) -> 
                Dests.elevatorHabitat1.setHeight(2)
                doAfter(0.5) -> 
                    Dests.elevatorHabitat1.changeWalls(false, ElevatorWallType.ALL)
                    Dests.elevatorHabitat1.changeWalls(true, ElevatorWallType.SOUTH)
                    doAfter(2.5) -> 
                        Dests.elevatorHabitat1.setHeight(1)
                        Dests.elevatorHabitat1.changeWalls(false, ElevatorWallType.SOUTH)
                        doAfter(0.5) -> 
                            Dests.elevatorHabitat1.changeWalls(true, ElevatorWallType.EAST)
                            Dests.elevatorHabitat1.changeWalls(true, ElevatorWallType.NORTH)
                            Dests.elevatorHabitat1.changeWalls(true, ElevatorWallType.WEST)
                            t.enable()
        end)
    Dests.elevatorHabitat2
        ..changeWalls(true, ElevatorWallType.NORTH)
        ..changeWalls(true, ElevatorWallType.SOUTH)
        ..changeWalls(false, ElevatorWallType.EAST)
        ..changeWalls(true, ElevatorWallType.WEST)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.elevatorHabitat2)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            doAfter(2.5) -> 
                Dests.elevatorHabitat2.setHeight(2)
                doAfter(0.5) -> 
                    Dests.elevatorHabitat2.changeWalls(false, ElevatorWallType.ALL)
                    Dests.elevatorHabitat2.changeWalls(true, ElevatorWallType.EAST)
                    doAfter(2.5) -> 
                        Dests.elevatorHabitat2.setHeight(1)
                        Dests.elevatorHabitat2.changeWalls(false, ElevatorWallType.EAST)
                        doAfter(0.5) -> 
                            Dests.elevatorHabitat2.changeWalls(true, ElevatorWallType.SOUTH)
                            Dests.elevatorHabitat2.changeWalls(true, ElevatorWallType.NORTH)
                            Dests.elevatorHabitat2.changeWalls(true, ElevatorWallType.WEST)
                            t.enable()
        end)
    // To the generator 1
    CreateTrigger()
        ..registerDeathEvent(Dests.leverGenerator)
        ..addAction(() -> print("The elevator near the generator was activated"))
    Dests.elevatorGenerator1
        ..changeWalls(true, ElevatorWallType.NORTH)
        ..changeWalls(false, ElevatorWallType.SOUTH)
        ..changeWalls(true, ElevatorWallType.EAST)
        ..changeWalls(true, ElevatorWallType.WEST)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.elevatorGenerator1)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            if Dests.leverGenerator.getLife() > 0
                DisplayTextToPlayer(GetEnteringUnit().getOwner(), 0., 0., "The elevator is deactivated, to activate it you have to operate the lever that is to the north.")
            else
                let t = GetTriggeringTrigger()
                t.disable()
                doAfter(2.5) -> 
                    Dests.elevatorGenerator1.setHeight(3)
                    doAfter(0.7) -> 
                        Dests.elevatorGenerator1.changeWalls(false, ElevatorWallType.ALL)
                        Dests.elevatorGenerator1.changeWalls(true, ElevatorWallType.SOUTH)
                        doAfter(2.5) -> 
                            Dests.elevatorGenerator1.setHeight(1)
                            Dests.elevatorGenerator1.changeWalls(false, ElevatorWallType.SOUTH)
                            doAfter(0.7) -> 
                                Dests.elevatorGenerator1.changeWalls(true, ElevatorWallType.EAST)
                                Dests.elevatorGenerator1.changeWalls(true, ElevatorWallType.NORTH)
                                Dests.elevatorGenerator1.changeWalls(true, ElevatorWallType.WEST)
                                t.enable()
        end)
    // To the generator 2
    Dests.elevatorGenerator2
        ..changeWalls(false, ElevatorWallType.NORTH)
        ..changeWalls(true, ElevatorWallType.SOUTH)
        ..changeWalls(true, ElevatorWallType.EAST)
        ..changeWalls(true, ElevatorWallType.WEST)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.elevatorGenerator2)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            doAfter(2.5) -> 
                Dests.elevatorGenerator2.setHeight(3)
                doAfter(0.5) -> 
                    Dests.elevatorGenerator2.changeWalls(false, ElevatorWallType.ALL)
                    Dests.elevatorGenerator2.changeWalls(true, ElevatorWallType.NORTH)
                    doAfter(2.5) -> 
                        Dests.elevatorGenerator2.setHeight(1)
                        Dests.elevatorGenerator2.changeWalls(false, ElevatorWallType.NORTH)
                        doAfter(0.5) -> 
                            Dests.elevatorGenerator2.changeWalls(true, ElevatorWallType.EAST)
                            Dests.elevatorGenerator2.changeWalls(true, ElevatorWallType.SOUTH)
                            Dests.elevatorGenerator2.changeWalls(true, ElevatorWallType.WEST)
                            t.enable()
        end)

// Secret passage

init
    onReset(true, () -> begin
        Dests.leverSecret.setInvulnerable(true)
        forDestructablesInRect(Rects.elevatorsSecret, d -> begin
            elevator(d)
                ..setHeight(3)
                ..changeWalls(false, ElevatorWallType.ALL)
        end)
    end)

    CreateTrigger()
        ..registerDeathEvent(Dests.leverSecret)
        ..addAction(() -> begin
            QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_HINT, "The secret route in the dungeon has been open.")
            forDestructablesInRect(Rects.elevatorsSecret, d -> elevator(d).setHeight(1))
            doAfter(0.5) -> 
                forDestructablesInRect(Rects.elevatorsSecret, d -> elevator(d).changeWalls(true, ElevatorWallType.ALL))
        end)

    // Elevator
    Dests.elevatorSecret
        ..changeWalls(false, ElevatorWallType.NORTH)
        ..changeWalls(false, ElevatorWallType.SOUTH)
        ..changeWalls(false, ElevatorWallType.EAST)
        ..changeWalls(true, ElevatorWallType.WEST)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.elevatorSecret)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            doAfter(2.5) -> 
                Dests.elevatorSecret.setHeight(3)
                doAfter(0.7) -> 
                    Dests.elevatorSecret.changeWalls(false, ElevatorWallType.WEST)
                    Dests.elevatorSecret.changeWalls(true, ElevatorWallType.SOUTH)
                    Dests.elevatorSecret.changeWalls(true, ElevatorWallType.EAST)
                    doAfter(2.5) -> 
                        Dests.elevatorSecret.setHeight(1)
                        Dests.elevatorSecret.changeWalls(false, ElevatorWallType.SOUTH)
                        Dests.elevatorSecret.changeWalls(false, ElevatorWallType.EAST)
                        doAfter(0.7) -> 
                            Dests.elevatorSecret.changeWalls(true, ElevatorWallType.WEST)
                            t.enable()
        end)

    // Hide dungeon walls
    CreateTrigger()
        ..registerDeathEvent(Dests.dungeonWalls[0])
        ..registerDeathEvent(Dests.dungeonWalls[1])
        ..registerDeathEvent(Dests.dungeonWalls[2])
        ..registerDeathEvent(Dests.dungeonWalls[3])
        ..addAction(() -> GetTriggerDestructable().show(false))
    onReset(false, () -> begin
        for i = 0 to 3
            Dests.dungeonWalls[i]
                ..restoreLife(250, false)
                ..show(true)
    end)

// YOU SHALL NOT PASS

var actived1 = false

init
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.activePlatforms)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            if not actived1
                forDestructablesInRect(Rects.dontPass, d -> begin
                    if d.getTypeId() == 'B00F'
                        elevator(d)..setHeight(3)..changeWalls(false, ElevatorWallType.ALL)
                end)
                GUnits.activePlatforms.setColor(PLAYER_COLOR_GREEN)
            else
                forDestructablesInRect(Rects.dontPass, d -> begin
                    if d.getTypeId() == 'B00F'
                        elevator(d)..setHeight(1)..changeWalls(true, ElevatorWallType.ALL)
                end)
                GUnits.activePlatforms.setColor(PLAYER_COLOR_BLACK_PASSIVE)
            actived1 = not actived1
        end)

// Water platforms

var actived2 = false
let getDrowned = CreateTrigger()..disable()

init
    forDestructablesInRect(Rects.waterPlatforms, d -> begin
        if d.getTypeId() == 'B00G'
            elevator(d).changeWalls(false, ElevatorWallType.ALL)
    end)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.activeWaterPlatforms)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            if not actived2
                GUnits.activeWaterPlatforms.setColor(PLAYER_COLOR_GREEN)
                DisplayTextToPlayer(GetTriggerUnit().getOwner(), 0., 0., "I wonder what this will do.")
                forDestructablesInRect(Rects.waterPlatforms, d -> begin
                    if d.getTypeId() == 'B00G'
                        elevator(d)..setHeight(2)..changeWalls(true, ElevatorWallType.ALL)
                end)
                doAfter(0.7, () -> getDrowned.disable())
            else
                GUnits.activeWaterPlatforms.setColor(PLAYER_COLOR_BLACK_PASSIVE)
                DisplayTextToPlayer(GetTriggerUnit().getOwner(), 0., 0., "Yes, better leave it at that.")
                forDestructablesInRect(Rects.waterPlatforms, d -> begin
                    if d.getTypeId() == 'B00G'
                        elevator(d)..setHeight(1)..changeWalls(false, ElevatorWallType.ALL)
                end)
                
                let ded = CreateForce()
                forUnitsInRect(Rects.waterPlatforms, u -> begin
                    if u.isType(UNIT_TYPE_GROUND)
                        ded.add(u.getOwner())
                end)
                DisplayTextToForce(ded, "Oh no, that doesn't look good.")
                ded.destr()

                doAfter(0.7, () -> getDrowned.enable())
            actived2 = not actived2
        end)
    getDrowned
        ..registerTimerEvent(1., true)
        ..addAction(() -> begin
            forUnitsInRect(Rects.waterPlatforms, u -> begin
                if not u.isType(UNIT_TYPE_FLYING)
                    u.addHP(-50)
            end)
        end)