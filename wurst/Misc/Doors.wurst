package Doors

import Functions
import PlayerData
import GeneratedValues

import EventHelper
import ClosureTimers
import Simulate3dSound

function playButtonSound(vec2 pos)
    bindSoundToPoint(CreateSound("Sound\\Interface\\BattleNetDoorsStereo2.wav", false, false, false, 10, 10, "DefaultEAXON")..setVolume(86), pos.x, pos.y, 0., 10000., 3000.)

function playLeverSound(vec2 pos)
    bindSoundToPoint(CreateSound("Doodads\\Cinematic\\DungeonLever\\Lever.wav", false, false, false, 10, 10, "DefaultEAXON")..setVolume(86), pos.x, pos.y, 0., 10000., 3000.)

function playDoorSound(vec2 pos)
    bindSoundToPoint(CreateSound("Sound\\Ambient\\DoodadEffects\\LargeCityGateOpen1.wav", false, false, false, 10, 10, "DefaultEAXON")..setVolume(86), pos.x, pos.y, 0., 10000., 3000.)

function playCloseSound(vec2 pos)
    bindSoundToPoint(CreateSound("Sound\\Interface\\BattleNetDeath1.wav", false, false, false, 10, 10, "DefaultEAXON")..setVolume(86), pos.x, pos.y, 0., 10000., 3000.)

init
    // Door 1
    SetDestructableInvulnerable(Dests.constructionEntranceDoor1, true)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.footSwitch1)
        ..registerRectEnterEventSource(Rects.footSwitch2)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            Dests.footSwitch1.kill()
            Dests.footSwitch2.kill()
            playButtonSound(Dests.constructionEntranceDoor1.getPos())
            playButtonSound(Rects.footSwitch1.getCenter())
            playButtonSound(Rects.footSwitch2.getCenter())
            doAfter(0.5) -> 
                ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.constructionEntranceDoor1)
                doAfter(5.) -> 
                    ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.constructionEntranceDoor1)
                    DestructableRestoreLife(Dests.footSwitch1, 500.00, true)
                    DestructableRestoreLife(Dests.footSwitch2, 500.00, true)
                    t.enable()
        end)
    // Door 2
    SetDestructableInvulnerable(Dests.constructionEntranceDoor2, true)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.footSwitch3)
        ..registerRectEnterEventSource(Rects.footSwitch4)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            Dests.footSwitch3.kill()
            Dests.footSwitch4.kill()
            playButtonSound(Dests.constructionEntranceDoor2.getPos())
            playButtonSound(Rects.footSwitch3.getCenter())
            playButtonSound(Rects.footSwitch4.getCenter())
            doAfter(0.5) -> 
                ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.constructionEntranceDoor2)
                doAfter(5.) -> 
                    ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.constructionEntranceDoor2)
                    DestructableRestoreLife(Dests.footSwitch3, 500.00, true)
                    DestructableRestoreLife(Dests.footSwitch4, 500.00, true)
                    t.enable()
        end)
    // Door 3
    SetDestructableInvulnerable(Dests.habitatDoor, true)
    CreateTrigger()
        ..registerDeathEvent(Dests.leverHabitat1)
        ..registerDeathEvent(Dests.leverHabitat2)
        ..addAction(() -> begin
            if Dests.habitatDoor.getLife() <= 0
                ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.habitatDoor)
            else
                ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.habitatDoor)
            playLeverSound(Dests.habitatDoor.getPos())
            let d = GetTriggerDestructable()
            doAfter(0.2) -> 
                DestructableRestoreLife(d, 500., true)
        end)
    // Door 4
    SetDestructableInvulnerable(Dests.automaticDoor1, true)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.automaticDoor1)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.automaticDoor1)
            playDoorSound(Dests.automaticDoor1.getPos())
            doPeriodically(0.5, cb -> begin
                var b = true
                let g = CreateGroup()..enumUnitsInRect(Rects.automaticDoor1)
                for u from g
                    if u.isAlive() and not u.isType(UNIT_TYPE_FLYING)
                        b = false
                        break
                g.destr()
                if b
                    ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.automaticDoor1)
                    t.enable()
                    destroy cb
            end)
        end)
    // Door 5
    SetDestructableInvulnerable(Dests.automaticDoor2, true)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.automaticDoor2)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.automaticDoor2)
            playDoorSound(Dests.automaticDoor2.getPos())
            doPeriodically(0.5, cb -> begin
                var b = true
                let g = CreateGroup()..enumUnitsInRect(Rects.automaticDoor2)
                for u from g
                    if u.isAlive() and not u.isType(UNIT_TYPE_FLYING)
                        b = false
                        break
                g.destr()
                if b
                    ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.automaticDoor2)
                    t.enable()
                    destroy cb
            end)
        end)

// Door 6

var doorOpen1 = true
init
    SetDestructableInvulnerable(Dests.entranceDoor1, true)
    ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceDoor1)
    // Enter
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.openDoor1)
        ..addCondition(Condition(() -> begin
            let u = GetEnteringUnit()
            return THE_DEMONS.has(u.getOwner()) and not u.isType(UNIT_TYPE_FLYING) and not doorOpen1
        end))
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceDoor1)
            doPeriodically(0.5, cb -> begin
                var b = true
                let g = CreateGroup()..enumUnitsInRect(Rects.openDoor1)
                for u from g
                    if u.isAlive() and not u.isType(UNIT_TYPE_FLYING) and not u.isType(UNIT_TYPE_HERO)
                        b = false
                        break
                g.destr()
                if b
                    if not doorOpen1
                        ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.entranceDoor1)
                    playCloseSound(Dests.entranceDoor1.getPos())
                    t.enable()
                    destroy cb
            end)
        end)
    // Lock - unlock
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.footSwitch5)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            Dests.footSwitch5.kill()
            if doorOpen1
                doorOpen1 = false
                ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.entranceDoor1)
                playButtonSound(Dests.entranceDoor1.getPos())
                playButtonSound(Rects.footSwitch5.getCenter())
            else
                doorOpen1 = true
                ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceDoor1)
                playCloseSound(Dests.entranceDoor1.getPos())
                playCloseSound(Rects.footSwitch5.getCenter())
            doAfter(3.) -> 
                DestructableRestoreLife(Dests.footSwitch5, 500., true)
                t.enable()
        end)

// Door 7

var doorOpen2 = true
init
    SetDestructableInvulnerable(Dests.entranceDoor2, true)
    ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceDoor2)
    // Enter
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.openDoor2)
        ..addCondition(Condition(() -> begin
            let u = GetEnteringUnit()
            return THE_DEMONS.has(u.getOwner()) and not u.isType(UNIT_TYPE_FLYING) and not doorOpen2
        end))
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceDoor2)
            doPeriodically(0.5, cb -> begin
                var b = true
                let g = CreateGroup()..enumUnitsInRect(Rects.openDoor2)
                for u from g
                    if u.isAlive() and not u.isType(UNIT_TYPE_FLYING) and not u.isType(UNIT_TYPE_HERO)
                        b = false
                        break
                g.destr()
                if b
                    if not doorOpen2
                        ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.entranceDoor2)
                    playCloseSound(Dests.entranceDoor2.getPos())
                    t.enable()
                    destroy cb
            end)
        end)
    // Lock - unlock
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.footSwitch6)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            Dests.footSwitch6.kill()
            if doorOpen2
                doorOpen2 = false
                ModifyGateBJ(bj_GATEOPERATION_CLOSE, Dests.entranceDoor2)
                playButtonSound(Dests.entranceDoor2.getPos())
                playButtonSound(Rects.footSwitch6.getCenter())
            else
                doorOpen2 = true
                ModifyGateBJ(bj_GATEOPERATION_OPEN, Dests.entranceDoor2)
                playCloseSound(Dests.entranceDoor2.getPos())
                playCloseSound(Rects.footSwitch6.getCenter())
            doAfter(3.) -> 
                DestructableRestoreLife(Dests.footSwitch6, 500., true)
                t.enable()
        end)

