package Doors

import Functions
import PlayerData
import GeneratedValues
import Reset

import EventHelper
import ClosureTimers
import Simulate3dSound
import Reference
import ClosureForGroups

function playButtonSound(vec2 pos)
    bindSoundToPoint(CreateSound("Sound\\Interface\\BattleNetDoorsStereo2.wav", false, false, false, 10, 10, "DefaultEAXON")..setVolume(86), pos.x, pos.y, 0., 10000., 3000.)

function playLeverSound(vec2 pos)
    bindSoundToPoint(CreateSound("Doodads\\Cinematic\\DungeonLever\\Lever.wav", false, false, false, 10, 10, "DefaultEAXON")..setVolume(86), pos.x, pos.y, 0., 10000., 3000.)

function playDoorSound(vec2 pos)
    bindSoundToPoint(CreateSound("Sound\\Ambient\\DoodadEffects\\LargeCityGateOpen1.wav", false, false, false, 10, 10, "DefaultEAXON")..setVolume(86), pos.x, pos.y, 0., 10000., 3000.)

function playCloseSound(vec2 pos)
    bindSoundToPoint(CreateSound("Sound\\Interface\\BattleNetDeath1.wav", false, false, false, 10, 10, "DefaultEAXON")..setVolume(86), pos.x, pos.y, 0., 10000., 3000.)

init
    // Door 1
    Dests.constructionEntranceDoor1.killable.setInvulnerable(true)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.footSwitch1)
        ..registerRectEnterEventSource(Rects.footSwitch2)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            Dests.footSwitch1.kill()
            Dests.footSwitch2.kill()
            playButtonSound(Dests.constructionEntranceDoor1.killable.getPos())
            playButtonSound(Rects.footSwitch1.getCenter())
            playButtonSound(Rects.footSwitch2.getCenter())
            doAfter(0.5) -> 
                Dests.constructionEntranceDoor1.open()
                doAfter(5.) -> 
                    Dests.constructionEntranceDoor1.close()
                    DestructableRestoreLife(Dests.footSwitch1, 500.00, true)
                    DestructableRestoreLife(Dests.footSwitch2, 500.00, true)
                    t.enable()
        end)
    // Door 2
    Dests.constructionEntranceDoor2.killable.setInvulnerable(true)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.footSwitch3)
        ..registerRectEnterEventSource(Rects.footSwitch4)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            Dests.footSwitch3.kill()
            Dests.footSwitch4.kill()
            playButtonSound(Dests.constructionEntranceDoor2.killable.getPos())
            playButtonSound(Rects.footSwitch3.getCenter())
            playButtonSound(Rects.footSwitch4.getCenter())
            doAfter(0.5) -> 
                Dests.constructionEntranceDoor2.open()
                doAfter(5.) -> 
                    Dests.constructionEntranceDoor2.close()
                    DestructableRestoreLife(Dests.footSwitch3, 500.00, true)
                    DestructableRestoreLife(Dests.footSwitch4, 500.00, true)
                    t.enable()
        end)
    // Door 3
    Dests.habitatDoor.killable.setInvulnerable(true)
    CreateTrigger()
        ..registerDeathEvent(Dests.leverHabitat1)
        ..registerDeathEvent(Dests.leverHabitat2)
        ..addAction(() -> begin
            if Dests.habitatDoor.killable.getLife() <= 0
                Dests.habitatDoor.open()
            else
                Dests.habitatDoor.open()
            playLeverSound(Dests.habitatDoor.killable.getPos())
            let d = GetTriggerDestructable()
            doAfter(0.2) -> 
                DestructableRestoreLife(d, 500., true)
        end)
    // Door 4
    Dests.automaticDoor1.killable.setInvulnerable(true)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.automaticDoor1)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            Dests.automaticDoor1.open()
            playDoorSound(Dests.automaticDoor1.killable.getPos())
            doPeriodically(0.5, cb -> begin
                var b = true
                let g = CreateGroup()..enumUnitsInRect(Rects.automaticDoor1)
                for u from g
                    if u.isAlive() and not u.isType(UNIT_TYPE_FLYING)
                        b = false
                        break
                g.destr()
                if b
                    Dests.automaticDoor1.close()
                    t.enable()
                    destroy cb
            end)
        end)
    // Door 5
    Dests.automaticDoor2.killable.setInvulnerable(true)
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.automaticDoor2)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            Dests.automaticDoor2.open()
            playDoorSound(Dests.automaticDoor2.killable.getPos())
            doPeriodically(0.5, cb -> begin
                var b = new Reference(true)
                forUnitsInRect(Rects.automaticDoor2, u -> begin
                    if u.isAlive() and not u.isType(UNIT_TYPE_FLYING)
                        b.val = false
                end)
                if b.into()
                    Dests.automaticDoor2.close()
                    t.enable()
                    destroy cb
            end)
        end)

// Door 6

bool doorOpen1
init
    onReset(true, () -> begin
        doorOpen1 = true
        Dests.entranceDoor1.open()
    end)

    Dests.entranceDoor1.killable.setInvulnerable(true)
    // Enter
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.openDoor1)
        ..addCondition(Condition(() -> begin
            let u = GetEnteringUnit()
            return THE_DEMONS.has(u.getOwner()) and not u.isType(UNIT_TYPE_FLYING) and not doorOpen1
        end))
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            Dests.entranceDoor1.open()
            doPeriodically(0.5, cb -> begin
                var b = new Reference(true)
                forUnitsInRect(Rects.openDoor1, u -> begin
                    if u.isAlive() and not u.isType(UNIT_TYPE_FLYING) and not u.isType(UNIT_TYPE_HERO)
                        b.val = false
                end)
                if b.into()
                    if not doorOpen1
                        Dests.entranceDoor1.close()
                    playCloseSound(Dests.entranceDoor1.killable.getPos())
                    t.enable()
                    destroy cb
            end)
        end)
    // Lock - unlock
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.footSwitch5)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            Dests.footSwitch5.kill()
            if doorOpen1
                doorOpen1 = false
                Dests.entranceDoor1.close()
                playButtonSound(Dests.entranceDoor1.killable.getPos())
                playButtonSound(Rects.footSwitch5.getCenter())
            else
                doorOpen1 = true
                Dests.entranceDoor1.open()
                playCloseSound(Dests.entranceDoor1.killable.getPos())
                playCloseSound(Rects.footSwitch5.getCenter())
            doAfter(3.) -> 
                DestructableRestoreLife(Dests.footSwitch5, 500., true)
                t.enable()
        end)

// Door 7

bool doorOpen2
init
    onReset(true, () -> begin
        doorOpen2 = true
        Dests.entranceDoor2.open()
    end)

    Dests.entranceDoor2.killable.setInvulnerable(true)
    // Enter
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.openDoor2)
        ..addCondition(Condition(() -> begin
            let u = GetEnteringUnit()
            return THE_DEMONS.has(u.getOwner()) and not u.isType(UNIT_TYPE_FLYING) and not doorOpen2
        end))
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            Dests.entranceDoor2.open()
            doPeriodically(0.5, cb -> begin
                var b = new Reference(true)
                forUnitsInRect(Rects.openDoor2, u -> begin
                    if u.isAlive() and not u.isType(UNIT_TYPE_FLYING) and not u.isType(UNIT_TYPE_HERO)
                        b.val = false
                end)
                if b.into()
                    if not doorOpen2
                        Dests.entranceDoor2.close()
                    playCloseSound(Dests.entranceDoor2.killable.getPos())
                    t.enable()
                    destroy cb
            end)
        end)
    // Lock - unlock
    CreateTrigger()
        ..registerRectEnterEventSource(Rects.footSwitch6)
        ..addCondition(notFlying)
        ..addAction(() -> begin
            let t = GetTriggeringTrigger()
            t.disable()
            Dests.footSwitch6.kill()
            if doorOpen2
                doorOpen2 = false
                Dests.entranceDoor2.close()
                playButtonSound(Dests.entranceDoor2.killable.getPos())
                playButtonSound(Rects.footSwitch6.getCenter())
            else
                doorOpen2 = true
                Dests.entranceDoor2.open()
                playCloseSound(Dests.entranceDoor2.killable.getPos())
                playCloseSound(Rects.footSwitch6.getCenter())
            doAfter(3.) -> 
                DestructableRestoreLife(Dests.footSwitch6, 500., true)
                t.enable()
        end)

