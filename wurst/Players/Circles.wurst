package Circles

import AbilityData
import initlater DrAndDeSpawn
import initlater Towers
import initlater DontPlaySmart
import initlater SummonCourier
import initlater HeroSelection
import Reference

public constant MORE_ABILITIES = compiletime(ABIL_ID_GEN.next())
public constant BACKPACK = compiletime(UNIT_ID_GEN.next())

public unit array backpack

let CRATE = compiletime(UNIT_ID_GEN.next())
let TOTEM = compiletime(UNIT_ID_GEN.next())

let crateMap = new HashMap<unit, LinkedList<item>>()

let ASK_HELP = compiletime(ABIL_ID_GEN.next())
let HEAL_TOTEM = compiletime(ABIL_ID_GEN.next())
let TELEPORT = compiletime(ABIL_ID_GEN.next())
let SELECT_BACKPACK = compiletime(ABIL_ID_GEN.next())
let TOWER_RANGE = compiletime(ABIL_ID_GEN.next())
public constant ZOOM_IN = compiletime(ABIL_ID_GEN.next())
public constant ZOOM_OUT = compiletime(ABIL_ID_GEN.next())
let PICK_ITEMS = compiletime(ABIL_ID_GEN.next())
let DROP_ITEMS = compiletime(ABIL_ID_GEN.next())

/** Removes all the items of the hero and couriers of the player and puts them in a crate*/
public function player.createCrate(bool includeCourier) returns LinkedList<item>
    let list = new LinkedList<item>()

    let i = this.getNumber()
    if hero[i] != null
        for m in hero[i].inventory()
            hero[i].removeItem(m)
            m.setVisible(false)
            list.add(m)
    
    if includeCourier
        forUnitsOfPlayer(this, u -> begin
            if u.getTypeId() == COURIER
                for m in u.inventory()
                    u.removeItem(m)
                    m.setVisible(false)
                    list.add(m)
        end)

    crateMap.put(createUnit(this, CRATE, (THE_DRAENEI.has(this) ? actDrSpawn : actDeSpawn).getCenter()), list)
    return list

/** Removes all the crates of the player and their items*/
public function player.removeCrate()
    forUnitsOfPlayer(this, u -> begin
        if u.getTypeId() == CRATE
            let list = crateMap.get(u)
            for m in list
                m.remove()
            crateMap.remove(u)
            destroy list
    end)

init
    for i = 1 to 10
        backpack[i] = createUnit(players[bj_PLAYER_NEUTRAL_VICTIM], BACKPACK)

    // Crate

    nullTimer() -> 
        CRATE.allowFriendFire()
    
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, () -> begin
        let u = GetDyingUnit()
        if u.getTypeId() == CRATE
            let list = crateMap.get(u)
            let pos = u.getPos()
            for m in list
                m..setVisible(true)..setPos(pos)
            crateMap.remove(u)
            destroy list
    end)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, () -> begin
        let u = GetManipulatingUnit()
        let m = GetManipulatedItem()
        if u.isAllyOf(m.getPlayer()) 
            if u.isType(UNIT_TYPE_HERO)
                m.setPlayer(u.getOwner(), false)
        else
            message("error", "This is not of yours.", u.getOwner())
            u.dropItemPoint(m, u.getPos())
    end)

    registerSpellEffectEvent(ASK_HELP, () -> begin
        let caster = GetSpellAbilityUnit()
        let owner = caster.getOwner()
        let h = hero[owner.getNumber()]
        if h.isAlive()
            var i = new Reference(0)
            forUnitsInRange(EventData.getAbilityTargetPos(), 300., u -> begin
                if i.val < 4
                    if u.isAllyOf(owner) and not u.isType(UNIT_TYPE_STRUCTURE)
                        and ((u.getOwner() == DRAENEI and u.getTypeId() != DRAENEI_WORKER) or (u.getOwner() == DEMON and u.getTypeId() != DEMON_ACOLYTE))

                        targetHero[u.getIndex()] = h
                        u.flashEffect(Abilities.thornsAuraDamage, "overhead")
                        u.issuePointOrderById(Orders.attack, h.getPos())
                        i.val++
            end)
            if i.into() > 0
                let f = THE_DRAENEI.has(owner) ? THE_DRAENEI : THE_DEMONS
                pingMinimap(f, EventData.getAbilityTargetPos(), 2., COLOR_GOLD.withoutAlpha(), false)
                DisplayTextToForce(f, "{0} asked for help to the {1}.".format(owner.getName(), f == THE_DRAENEI ? "the draenei" : "the demons"))
    end)

    registerSpellEffectEvent(SELECT_BACKPACK, () -> begin
        let owner = GetSpellAbilityUnit().getOwner()
        let i = owner.getNumber()
        backpack[i].setOwner(owner, false)
        owner.selectSingle(backpack[i])
    end)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DESELECTED, () -> begin
        if GetTriggerUnit().getTypeId() == BACKPACK
            GetTriggerUnit().setOwner(players[bj_PLAYER_NEUTRAL_VICTIM], false)
    end)

    registerSpellEffectEvent(PICK_ITEMS, () -> begin
        let caster = GetSpellAbilityUnit()
        let owner = caster.getOwner()
        let i = owner.getNumber()
        let pos = hero[i].getPos()
        let r = Rect(pos.x - 300., pos.y - 300., pos.x + 300, pos.y + 300)
        forItemsInRect(r, m -> begin
            if m.getPlayer() == owner
                backpack[i].addItemHandle(m)
        end)
        r.remove()
    end)

    registerSpellEffectEvent(DROP_ITEMS, () -> begin
        let caster = GetSpellAbilityUnit()
        let pos = hero[caster.getOwner().getNumber()].getPos()
        for m in caster.inventory()
            caster.removeItem(m)
            m.setPos(pos)
    end)

@compiletime function gen()
    new AbilityDefinitionSpellBook(MORE_ABILITIES)
        ..setItemAbility(false)
        ..setMinimumSpells(1, 12)
        ..setMaximumSpells(1, 12)
        ..setSharedSpellCooldown(1, false)
        ..setSpellList(1, commaList(ASK_HELP, HEAL_TOTEM, TELEPORT, SELECT_BACKPACK))
        ..setHotkey("D")
        ..setTooltipNormal(1, "[|cffffcc00D|r] More abilities")
    
    new UnitDefinition(CRATE, 'nalb')
        ..setNormalAbilities("")
        ..setUnitSoundSet("")
        ..setModelFile(Doodads.crates0)
        ..setIconGameInterface(Icons.bTNCrate)
        ..setSpeedBase(0)
        ..setMovementType(MovementType.None)
        ..setName("Item crate")

    new UnitDefinition(BACKPACK, 'ncop')
        ..setSightRadiusDay(1)
        ..setSightRadiusNight(1)
        ..setSelectionScale(-1.)
        ..setModelFile("dummy.mdl")
        ..setNormalAbilities(commaList(COURIER_INV, PICK_ITEMS, DROP_ITEMS, ZOOM_IN, ZOOM_OUT, TOWER_RANGE, AbilityIds.invulnerable, AbilityIds.permanentInvisibility))
        ..setName("Backpack")

    new ChannelAbilityPreset(ASK_HELP, 1, true)
        ..setHeroAbility(false)
        ..presetTargetTypes(Targettype.POINT)
        ..presetOption(Option.TARGETIMAGE, true)
        ..setBaseOrderID(1, "roar")
        ..setAreaofEffect(1, 300.)
        ..setCastRange(1, 99999.)
        ..setCooldown(1, 120.)
        ..setIconNormal(Icons.bTNHornOfCenarius)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(0)
        ..setHotkeyNormal("Q")
        ..setTooltipNormal(1, "[|cffffcc00Q|r] Ask help")
        ..setTooltipNormalExtended(1, "Orders a group of ally units up to 4, to go to help at you, if your hero dies, they will return to their previous objective.")
        ..setName("Ask help")

    let LIFE_REGEN = ABIL_ID_GEN.next()
    let MANA_REGEN = ABIL_ID_GEN.next()
    
    new AbilityDefinitionHealingWard(HEAL_TOTEM)
        ..setWardUnitType(1, TOTEM.toRawCode())
        ..setManaCost(1, 0)
        ..setCastRange(1, 700.)
        ..setCooldown(1, 90.)
        ..setRequirements("")
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(0)
        ..setHotkeyNormal("W")
        ..setTooltipNormal(1, "[|cffffcc00W|r] Heal totem")
        ..setTooltipNormalExtended(1, "Places a totem that heals life and mana to nearby ally units.")
    
    new UnitDefinition(TOTEM, 'ohwd')
        ..setHitPointsMaximumBase(200)
        ..setNormalAbilities(commaList(LIFE_REGEN, MANA_REGEN))

    new ChannelAbilityPreset(SELECT_BACKPACK, 1, true)
        ..setHeroAbility(false)
        ..setIconNormal(Icons.bTNDustOfAppearance)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(1)
        ..setHotkeyNormal("A")
        ..setTooltipNormal(1, "[|cffffcc00A|r] Select backpack")
        ..setTooltipNormalExtended(1, "")
        ..setName("Select backpack")
    
    new AbilityDefinitionStaffoTeleportation(TELEPORT)
        ..setRace(Race.Naga)
        ..presetButtonPosNormal(2, 0)
        ..setHeroAbility(false)
        ..setItemAbility(false)
        ..setTargetsAllowed(1, "allies,structure,invulnerable,neutral,nonhero,ground,player,vulnerable")
        // Stats
        ..setCastingDelay(1, 4.5)
        ..setManaCost(1, 50)
        ..setCooldown(1, 35.)
        // Audiovisual
        ..setIconNormal(Icons.bTNScrollUber)
        // Tooltip
        ..setHotkeyNormal("E")
        ..setTooltipNormal(1, "[|cffffcc00E|r] Teleport")
        ..setTooltipNormalExtended(1, "Teleports the hero to a ally unit.")
        ..setName("Teleport")
        .setEditorSuffix("(Long)")

    new ChannelAbilityPreset(ZOOM_IN, 1, true)
        ..setHeroAbility(false)
        ..setArtCaster("")
        ..setIconNormal(Imports.bTNCrZoomIn)
        ..setButtonPositionNormalX(1)
        ..setButtonPositionNormalY(1)
        ..setHotkeyNormal("S")
        ..setTooltipNormal(1, "[|cffffcc00S|r] Zoom In")
        ..setTooltipNormalExtended(1, "Zoom in on the camera view.")
        ..setName("Zoom In")

    new ChannelAbilityPreset(ZOOM_OUT, 1, true)
        ..setHeroAbility(false)
        ..setArtCaster("")
        ..setIconTurnOff(Imports.bTNCrZoomOut)
        ..setIconNormal(Imports.bTNCrZoomOut)
        ..setButtonPositionNormalX(2)
        ..setButtonPositionNormalY(1)
        ..setHotkeyNormal("D")
        ..setTooltipNormal(1, "[|cffffcc00D|r] Zoom Out")
        ..setTooltipNormalExtended(1, "Zoom out the camera view.")
        ..setName("Zoom Out")

    let NO_IMMO = BUFF_ID_GEN.next()

    new AbilityDefinitionImmolationcreep(TOWER_RANGE)
        ..setDamageperInterval(1, 0)
        ..setManaDrainedperSecond(1, 0)
        ..setBufferManaRequired(1, 0)
        ..setBuffs(1, NO_IMMO.toRawCode())
        ..setManaCost(1, 0)
        ..setAreaofEffect(1, 0)
        ..setIconTurnOff(Imports.bTNRadar2)
        ..setIconNormal(Imports.bTNRadar1)
        ..setButtonPositionNormalX(3)
        ..setButtonPositionNormalY(0)
        ..setButtonPositionTurnOffX(3)
        ..setButtonPositionTurnOffY(0)
        ..setHotkeyTurnOff("R")
        ..setHotkeyNormal("R")
        ..setTooltipTurnOff(1, "[|cffffcc00R|r] Hide range of towers")
        ..setTooltipTurnOffExtended(1, "")
        ..setTooltipNormal(1, "[|cffffcc00R|r] Show range of towers")
        ..setTooltipNormalExtended(1, "")
        ..setName("Tower Range")

    new BuffDefinition(NO_IMMO, 'BEim')
        ..setArtSpecial(1, "")
        ..setArtTarget(1, "")
        ..setName("No immo")
    
    new AbilityDefinitionAuraRegenerationHealingWard(LIFE_REGEN)
        ..setAmountofHitPointsRegenerated(1, 0.02)
        ..setPercentage(1, true)
    
    new AbilityDefinitionNeutralRegenmanaonly(MANA_REGEN)
        ..setAmountRegenerated(1, 0.02)
        ..setPercentage(1, true)

    new ChannelAbilityPreset(PICK_ITEMS, 1, true)
        ..setHeroAbility(false)
        ..setIconNormal(Icons.bTNLoad)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("Z")
        ..setTooltipTurnOff(1, "[|cffffcc00Z|r] Pick items")
        ..setTooltipTurnOffExtended(1, "Picks up your nearby items.")
        ..setTooltipNormal(1, "[|cffffcc00Z|r] Pick items")
        ..setTooltipNormalExtended(1, "Picks up your nearby items.")
        ..setName("Pick items")

    new ChannelAbilityPreset(DROP_ITEMS, 1, true)
        ..setHeroAbility(false)
        ..setIconNormal(Icons.bTNUnLoad)
        ..setButtonPositionNormalX(1)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("X")
        ..setTooltipTurnOff(1, "[|cffffcc00X|r] Drop items")
        ..setTooltipTurnOffExtended(1, "Drop the items in the inventory.")
        ..setTooltipNormal(1, "[|cffffcc00X|r] Drop items")
        ..setTooltipNormalExtended(1, "Drop the items in the inventory.")
        ..setName("Drop items")