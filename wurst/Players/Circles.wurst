package Circles

import ArrayList

import AbilityData
import GeneratedValues
import Reset
import initlater PlayerData

public constant CIRCLE = compiletime(UNIT_ID_GEN.next())

let LIFE_REGEN = compiletime(ABIL_ID_GEN.next())
let MANA_REGEN = compiletime(ABIL_ID_GEN.next())
let ZOOM_IN = compiletime(ABIL_ID_GEN.next())
let ZOOM_OUT = compiletime(ABIL_ID_GEN.next())
let TOWER_RANGE = compiletime(ABIL_ID_GEN.next())
let PICK_ITEMS = compiletime(ABIL_ID_GEN.next())
let DROP_ITEMS = compiletime(ABIL_ID_GEN.next())

public rect itemDraenei = Rects.items1
public rect itemDemons = Rects.items2
public unit array circle
public rect array circleRegion

ArrayList<rect> array pointCircle

public function moveCircles(int mission)
    for i = 1 to 5
        // Move demons
        forUnitsInRect(circleRegion[i + 5], u -> u.setPos(pointCircle[mission + 1].get(i).getCenter()))
        circleRegion[i + 5] = pointCircle[mission + 1].get(i)
        // Move draenei
        forUnitsInRect(circleRegion[i], u -> u.setPos(pointCircle[mission].get(i).getCenter()))
        circleRegion[i] = pointCircle[mission].get(i)
    switch mission
        case 2
            itemDraenei = Rects.items2
            itemDemons = Rects.items3
        case 3
            itemDraenei = Rects.items3
            itemDemons = Rects.items4
        case 4
            itemDraenei = Rects.items4
            itemDemons = Rects.items5

init
    onModesSelected(() -> begin
        if whatMode[5] == LEVELING
            circle[3].addAbility(LIFE_REGEN)
            circle[3].addAbility(MANA_REGEN)
            circle[8].addAbility(LIFE_REGEN)
            circle[8].addAbility(MANA_REGEN)
        else if whatMode[5] == NOT_LEVELING
            circle[3].removeAbility(LIFE_REGEN)
            circle[3].removeAbility(MANA_REGEN)
            circle[8].removeAbility(LIFE_REGEN)
            circle[8].removeAbility(MANA_REGEN)
    end)

    onReset(true, () -> begin
        itemDraenei = Rects.items1
        itemDemons = Rects.items2

        circleRegion[1] = Rects.circle11
        circleRegion[2] = Rects.circle12
        circleRegion[3] = Rects.circle13
        circleRegion[4] = Rects.circle14
        circleRegion[5] = Rects.circle15
        circleRegion[6] = Rects.circle21
        circleRegion[7] = Rects.circle22
        circleRegion[8] = Rects.circle23
        circleRegion[9] = Rects.circle24
        circleRegion[10] = Rects.circle25
    end)

    onReset(false, () -> begin
        for i = 1 to 10
            circle[i].setPos(circleRegion[i].getCenter())
            for m in circle[i].inventory()
                m.remove()
    end)

    circle[1] = createUnit(players[1], CIRCLE, circleRegion[1].getCenter(), UNIT_FACING)
    circle[2] = createUnit(players[2], CIRCLE, circleRegion[2].getCenter(), UNIT_FACING)
    circle[3] = createUnit(players[3], CIRCLE, circleRegion[3].getCenter(), UNIT_FACING)
    circle[4] = createUnit(players[4], CIRCLE, circleRegion[4].getCenter(), UNIT_FACING)
    circle[5] = createUnit(players[5], CIRCLE, circleRegion[5].getCenter(), UNIT_FACING)
    circle[6] = createUnit(players[7], CIRCLE, circleRegion[6].getCenter(), UNIT_FACING)
    circle[7] = createUnit(players[8], CIRCLE, circleRegion[7].getCenter(), UNIT_FACING)
    circle[8] = createUnit(players[9], CIRCLE, circleRegion[8].getCenter(), UNIT_FACING)
    circle[9] = createUnit(players[10], CIRCLE, circleRegion[9].getCenter(), UNIT_FACING)
    circle[10] = createUnit(players[11], CIRCLE, circleRegion[10].getCenter(), UNIT_FACING)

    for i = 1 to 5
        pointCircle[i] = new ArrayList<rect>()
    
    pointCircle[1].add(Rects.circle11)
    pointCircle[1].add(Rects.circle12)
    pointCircle[1].add(Rects.circle13)
    pointCircle[1].add(Rects.circle14)
    pointCircle[1].add(Rects.circle15)
    pointCircle[2].add(Rects.circle21)
    pointCircle[2].add(Rects.circle22)
    pointCircle[2].add(Rects.circle23)
    pointCircle[2].add(Rects.circle24)
    pointCircle[2].add(Rects.circle25)
    pointCircle[3].add(Rects.circle31)
    pointCircle[3].add(Rects.circle32)
    pointCircle[3].add(Rects.circle33)
    pointCircle[3].add(Rects.circle34)
    pointCircle[3].add(Rects.circle35)
    pointCircle[4].add(Rects.circle41)
    pointCircle[4].add(Rects.circle42)
    pointCircle[4].add(Rects.circle43)
    pointCircle[4].add(Rects.circle44)
    pointCircle[4].add(Rects.circle45)
    pointCircle[5].add(Rects.circle51)
    pointCircle[5].add(Rects.circle52)
    pointCircle[5].add(Rects.circle53)
    pointCircle[5].add(Rects.circle54)
    pointCircle[5].add(Rects.circle55)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, () -> GetManipulatedItem().setPlayer(GetManipulatingUnit().getOwner(), false))

    registerSpellEffectEvent(PICK_ITEMS, () -> begin
        let caster = GetSpellAbilityUnit()
        let owner = caster.getOwner()
        let r = THE_DRAENEI.has(owner) ? itemDraenei : itemDemons
        forItemsInRect(r, m -> begin
            if m.getPlayer() == owner
                caster.addItemHandle(m)
        end)
    end)

    registerSpellEffectEvent(DROP_ITEMS, () -> begin
        let caster = GetSpellAbilityUnit()
        for m in caster.inventory()
            caster.removeItem(m)
    end)

@compiletime function gen()
    let NO_IMMO = BUFF_ID_GEN.next()

    new UnitDefinition(CIRCLE, 'ncop')
        ..setFoodProduced(5) // 5 missions
        ..setNormalAbilities(commaList(AbilityIds.invulnerable, AbilityIds.inventory, ZOOM_IN, ZOOM_OUT, TOWER_RANGE, PICK_ITEMS, DROP_ITEMS))
        ..setName("Circle of power")

    new AbilityDefinitionDefend(ZOOM_IN)
        ..setDamageDealt(1, 0)
        ..setDamageTaken(1, 0)
        ..setDeflectDamageTakenSpells(1, 0)
        ..setMovementSpeedFactor(1, 0)
        ..setChancetoDeflect(1, 0)
        ..setMagicDamageReduction(1, 0)
        ..setArtCaster("")
        ..setIconTurnOff(Imports.bTNCrZoomIn)
        ..setIconNormal(Imports.bTNCrZoomIn)
        ..setButtonPositionNormalX(1)
        ..setButtonPositionNormalY(1)
        ..setButtonPositionTurnOffX(1)
        ..setButtonPositionTurnOffY(1)
        ..setCheckDependencies(false)
        ..setHotkeyTurnOff("S")
        ..setHotkeyNormal("S")
        ..setTooltipTurnOff(1, "[|cffffcc00S|r] Zoom In")
        ..setTooltipTurnOffExtended(1, "Zoom in on the camera view.")
        ..setTooltipNormal(1, "[|cffffcc00S|r] Zoom In")
        ..setTooltipNormalExtended(1, "Zoom in on the camera view.")
        ..setName("Zoom In")

    new AbilityDefinitionMagicDefense(ZOOM_OUT)
        ..setDamageDealt(1, 0)
        ..setDamageTaken(1, 0)
        ..setDeflectDamageTakenSpells(1, 0)
        ..setMovementSpeedFactor(1, 0)
        ..setChancetoDeflect(1, 0)
        ..setMagicDamageReduction(1, 0)
        ..setArtCaster("")
        ..setIconTurnOff(Imports.bTNCrZoomOut)
        ..setIconNormal(Imports.bTNCrZoomOut)
        ..setButtonPositionNormalX(2)
        ..setButtonPositionNormalY(1)
        ..setButtonPositionTurnOffX(2)
        ..setButtonPositionTurnOffY(1)
        ..setCheckDependencies(false)
        ..setHotkeyTurnOff("D")
        ..setHotkeyNormal("D")
        ..setTooltipTurnOff(1, "[|cffffcc00D|r] Zoom Out")
        ..setTooltipTurnOffExtended(1, "Zoom out the camera view.")
        ..setTooltipNormal(1, "[|cffffcc00D|r] Zoom Out")
        ..setTooltipNormalExtended(1, "Zoom out the camera view.")
        ..setName("Zoom Out")

    new AbilityDefinitionImmolationcreep(TOWER_RANGE)
        ..setDamageperInterval(1, 0)
        ..setManaDrainedperSecond(1, 0)
        ..setBufferManaRequired(1, 0)
        ..setBuffs(1, NO_IMMO.toRawCode())
        ..setManaCost(1, 0)
        ..setAreaofEffect(1, 0)
        ..setIconTurnOff(Imports.bTNRadar2)
        ..setIconNormal(Imports.bTNRadar1)
        ..setButtonPositionNormalX(3)
        ..setButtonPositionNormalY(0)
        ..setButtonPositionTurnOffX(3)
        ..setButtonPositionTurnOffY(0)
        ..setHotkeyTurnOff("R")
        ..setHotkeyNormal("R")
        ..setTooltipTurnOff(1, "[|cffffcc00R|r] Hide range of towers")
        ..setTooltipTurnOffExtended(1, "")
        ..setTooltipNormal(1, "[|cffffcc00R|r] Show range of towers")
        ..setTooltipNormalExtended(1, "")
        ..setName("Tower Range")

    new BuffDefinition(NO_IMMO, 'BEim')
        ..setArtSpecial(1, "")
        ..setArtTarget(1, "")
        ..setName("No immo")
    
    new AbilityDefinitionAuraRegenerationHealingWard(LIFE_REGEN)
        ..setAmountofHitPointsRegenerated(1, 0.02)
        ..setPercentage(1, true)
    
    new AbilityDefinitionNeutralRegenmanaonly(MANA_REGEN)
        ..setAmountRegenerated(1, 0.02)
        ..setPercentage(1, true)

    new ChannelAbilityPreset(PICK_ITEMS, 1, true)
        ..setIconNormal(Icons.bTNLoad)
        ..setButtonPositionNormalX(0)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("Q")
        ..setTooltipTurnOff(1, "[|cffffcc00Q|r] Pick items")
        ..setTooltipTurnOffExtended(1, "Picks up your nearby items.")
        ..setTooltipNormal(1, "[|cffffcc00Q|r] Pick items")
        ..setTooltipNormalExtended(1, "Picks up your nearby items.")
        ..setName("Pick items")

    new ChannelAbilityPreset(DROP_ITEMS, 1, true)
        ..setIconNormal(Icons.bTNUnLoad)
        ..setButtonPositionNormalX(1)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("W")
        ..setTooltipTurnOff(1, "[|cffffcc00W|r] Drop items")
        ..setTooltipTurnOffExtended(1, "Drop the items in the inventory.")
        ..setTooltipNormal(1, "[|cffffcc00W|r] Drop items")
        ..setTooltipNormalExtended(1, "Drop the items in the inventory.")
        ..setName("Drop items")