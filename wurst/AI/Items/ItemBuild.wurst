package ItemBuild

import ItemPool
import Shops
import ModeSelection

import LinkedList
import HashMap

let consummablesPool = new ItemPool()
    ..add(HEALING_POTION.getNewId(), 100)
    ..add(HEALING_SALVE.getNewId(), 100)
    ..add(MANA_POTION.getNewId(), 100)
    ..add(CLARITY_POTION.getNewId(), 100)
    ..add(SCROLL_OF_THE_BEAST.getNewId(), 40)
    ..add(WIND_SCEPTER.getNewId(), 40)
    ..add(GREATER_HEALING_POTION.getNewId(), 50)
    ..add(POTION_OF_RESTORATION.getNewId(), 50)
    ..add(GREATER_MANA_POTION.getNewId(), 50)
    ..add(GREATER_POTION_OF_RESTORATION.getNewId(), 50)
    ..add(SCROLL_OF_PROTECTION.getNewId(), 30)
    ..add(SCROLL_OF_SPEED.getNewId(), 30)
    ..add(INVULNERAVILITY_POTION.getNewId(), 10)
    ..add(VAMPIRIC_POTION.getNewId(), 30)
    ..add(STAFF_OF_NEGATION.getNewId(), 30)
    ..add(NETHER_POTION.getNewId(), 20)
    ..add(POWER_BOOSTER.getNewId(), 50)
    ..add(GOBLIN_LANDMINES.getNewId(), 10)
    ..add(SHIELD_RUNE.getNewId(), 10)
    ..add(STONE_GOLEM.getNewId(), 10)

let damageRecipesPool = new ItemPool()
    ..add(MASK_OF_DEATH.getNewId(), 10)
    ..add(GLOVES_OF_CORRUPTION.getNewId(), 10)
    ..add(SHAMANS_CLAWS.getNewId(), 10)
    ..add(NORTHREND_ARTIFACT.getNewId(), 10)
    ..add(WAR_HELMET.getNewId(), 10)
    ..add(FIRE_BLADE.getNewId(), 10)
    ..add(STAFF_OF_SILENCE.getNewId(), 10)

let defenseRecipesPool = new ItemPool()
    ..add(SHIELD_OF_HONOR.getNewId(), 10)
    ..add(RING_OF_REGENERATION_1.getNewId(), 5)
    ..add(RING_OF_REGENERATION_2.getNewId(), 5)
    ..add(SHIELD_OF_LORD_OF_DEAD.getNewId(), 10)

let magicRecipesPool = new ItemPool()
    ..add(SOBI_MASK_1.getNewId(), 5)
    ..add(SOBI_MASK_2.getNewId(), 5)
    ..add(RUNIC_BRACERS.getNewId(), 10)
    ..add(ENERGY_PENDANT.getNewId(), 10)
    ..add(STAFF_OF_THE_CYCLONES.getNewId(), 10)

let miscRecipesPool = new ItemPool()
    ..add(RUNIC_BRACERS.getNewId(), 10)
    ..add(IMPULSE_BOOTS.getNewId(), 10)
    ..add(POWER_BOOTS.getNewId(), 10)

let miscItemsPool = new ItemPool()
    ..add(HORN_OF_THE_LEGION.getNewId(), 10)
    ..add(ACID_STONE.getNewId(), 10)

let noRecipesPool = new ItemPool()
    ..add(CLAWS_OF_ATTACK_21.getNewId(), 10)
    ..add(RING_OF_PROTECTION_6.getNewId(), 10)
    ..add(ORB_OF_CORRUPTION.getNewId(), 10)
    ..add(ORB_OF_LIGHTNING.getNewId(), 10)
    ..add(ICE_ORB.getNewId(), 10)
    ..add(GLOVES_OF_HASTE.getNewId(), 10)
    ..add(KHADGAR_HEATH_STONE.getNewId(), 10)
    ..add(MANA_PENDANT.getNewId(), 10)
    ..add(STORM_DIAMOND.getNewId(), 10)

let shopOfTheItem = new HashMap<int, int>()

function LinkedList<int>.addIfDontHave(ItemPool pool)
    var itm = pool.get()
    var i = 0
    while this.has(itm) and i < 10
        itm = pool.get()
        i++
    this.add(itm)

public tuple itemShop(int itm, int shop)

public class ItemBuild
    private LinkedList<int> recipes
    private int currentRecipe
    private LinkedList<int> build

    construct(unit h)
        build = new LinkedList<int>()
        switch whatMode[3]
            case Mode.ALL_ITEMS
                let isMage = h.getInt(true) > (h.getStr(true) + h.getAgi(true)) / 2
                if isMage
                    build.addIfDontHave(magicRecipesPool)
                    build.addIfDontHave(magicRecipesPool)
                else
                    if GetRandomInt(0, 100) < 50
                        build.addIfDontHave(damageRecipesPool)
                    else
                        build.addIfDontHave(magicRecipesPool)
                
                if GetRandomInt(0, 100) < 50
                    build.addIfDontHave(defenseRecipesPool)
                else
                    build.addIfDontHave(magicRecipesPool)
                
                if GetRandomInt(0, 100) < 50
                    build.addIfDontHave(defenseRecipesPool)
                else
                    build.addIfDontHave(damageRecipesPool)
            case Mode.NO_RECIPES
                build.addIfDontHave(noRecipesPool)
                build.addIfDontHave(noRecipesPool)
                build.addIfDontHave(noRecipesPool)
                build.addIfDontHave(noRecipesPool)
            default

    function get() returns itemShop
        let random = GetRandomInt(0, 100)
        int itm
        if random < 65
            itm = consummablesPool.get()
        else
            if not build.isEmpty()
                itm = build.getRandomElement()
                build.remove(itm)
            else
                itm = consummablesPool.get()
        return itemShop(itm, shopOfTheItem.get(itm))

init
    shopOfTheItem.put(HEALING_POTION.getNewId(), MERCHANT)
    shopOfTheItem.put(HEALING_SALVE.getNewId(), MERCHANT)
    shopOfTheItem.put(MANA_POTION.getNewId(), MERCHANT)
    shopOfTheItem.put(CLARITY_POTION.getNewId(), MERCHANT)
    shopOfTheItem.put(SCROLL_OF_THE_BEAST.getNewId(), MERCHANT)
    shopOfTheItem.put(WIND_SCEPTER.getNewId(), MERCHANT)
    shopOfTheItem.put(GREATER_HEALING_POTION.getNewId(), MERCHANT)
    shopOfTheItem.put(POTION_OF_RESTORATION.getNewId(), MERCHANT)
    shopOfTheItem.put(GREATER_MANA_POTION.getNewId(), MERCHANT)
    shopOfTheItem.put(GREATER_POTION_OF_RESTORATION.getNewId(), MERCHANT)
    shopOfTheItem.put(SCROLL_OF_PROTECTION.getNewId(), MERCHANT)
    shopOfTheItem.put(SCROLL_OF_SPEED.getNewId(), MERCHANT)
    shopOfTheItem.put(INVULNERAVILITY_POTION.getNewId(), MERCHANT)
    shopOfTheItem.put(VAMPIRIC_POTION.getNewId(), MERCHANT)
    shopOfTheItem.put(SCROLL_OF_SPEED.getNewId(), MERCHANT)

    shopOfTheItem.put(STAFF_OF_NEGATION.getNewId(), SPECIAL_MERCHANT)
    shopOfTheItem.put(GLOVES_OF_HASTE.getNewId(), SPECIAL_MERCHANT)
    shopOfTheItem.put(NETHER_POTION.getNewId(), SPECIAL_MERCHANT)
    shopOfTheItem.put(GOBLIN_LANDMINES.getNewId(), SPECIAL_MERCHANT)
    shopOfTheItem.put(KHADGAR_HEATH_STONE.getNewId(), SPECIAL_MERCHANT)
    shopOfTheItem.put(MANA_PENDANT.getNewId(), SPECIAL_MERCHANT)
    shopOfTheItem.put(STORM_DIAMOND.getNewId(), SPECIAL_MERCHANT)
    shopOfTheItem.put(SUMMON_COURIER.getNewId(), SPECIAL_MERCHANT)
    shopOfTheItem.put(GOLD_COINS.getNewId(), SPECIAL_MERCHANT)
    shopOfTheItem.put(LUMBER_BALE.getNewId(), SPECIAL_MERCHANT)
    shopOfTheItem.put(POWER_BOOSTER.getNewId(), SPECIAL_MERCHANT)
    shopOfTheItem.put(BOOTS_OF_SPEED.getNewId(), SPECIAL_MERCHANT)

    shopOfTheItem.put(CLAWS_OF_ATTACK_21.getNewId(), ARMS_MERCHANT)
    shopOfTheItem.put(RING_OF_PROTECTION_6.getNewId(), ARMS_MERCHANT)
    shopOfTheItem.put(ORB_OF_CORRUPTION.getNewId(), ARMS_MERCHANT)
    shopOfTheItem.put(ORB_OF_LIGHTNING.getNewId(), ARMS_MERCHANT)
    shopOfTheItem.put(ICE_ORB.getNewId(), ARMS_MERCHANT)

    shopOfTheItem.put(SHIELD_RUNE.getNewId(), SECRET_MERCHANT)
    shopOfTheItem.put(STONE_GOLEM.getNewId(), SECRET_MERCHANT)
    shopOfTheItem.put(CROWN_OF_KINGS.getNewId(), SECRET_MERCHANT)
    shopOfTheItem.put(HORN_OF_THE_LEGION.getNewId(), SECRET_MERCHANT)
    shopOfTheItem.put(WAR_HELMET.getNewId(), SECRET_MERCHANT)
    shopOfTheItem.put(STAFF_OF_THE_CYCLONES.getNewId(), SECRET_MERCHANT)
    shopOfTheItem.put(ACID_STONE.getNewId(), SECRET_MERCHANT)
    shopOfTheItem.put(CLOACK_OF_FLAMES.getNewId(), SECRET_MERCHANT)
    shopOfTheItem.put(TRAP_TOTEM.getNewId(), SECRET_MERCHANT)
    shopOfTheItem.put(POWER_BOOTS.getNewId(), SECRET_MERCHANT)
    shopOfTheItem.put(FIRE_BLADE.getNewId(), SECRET_MERCHANT)
    shopOfTheItem.put(STAFF_OF_SILENCE.getNewId(), SECRET_MERCHANT)