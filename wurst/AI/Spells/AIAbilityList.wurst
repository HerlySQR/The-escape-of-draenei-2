package AIAbilityList

import public AddBot
import AIHeroActions
import public HeroSpells
import public ExtraSpells
import HeroType
import ModeSelection
import SkillBuild

import public LinkedList
import public Orders
import HashSet
import HashMap
import ObjectIds
import public ClosureForGroups
import ErrorHandling
import public Reference

let passives = new HashSet<int>()

public function int.isPassiveAbility() returns bool
    return passives.has(this)

public interface AbilityActions
    function check(unit caster)

let abilityActions = new HashMap<int, AbilityActions>()

public function setAbilityActions(int spell, AbilityActions cb)
    abilityActions.put(spell, cb)

/** The inverse of commaList. */
function string.toAbilityList() returns LinkedList<int>
    let len = this.length()
    var start = 0
    let list = new LinkedList<int>()

    while start < len
        var index = this.indexOf(",", start)
        if index == -1
            index = len + 1
        
        list.add(this.substring(start, index).fromRawCode())
        
        start = index + 1
    
    return list

LinkedList<int> array normalAbilityLists
LinkedList<int> array heroAbilityLists

SkillBuild array skillBuilds

public function unit.addAbilityToList(int abil)
    normalAbilityLists[this.getOwner().getId()].add(abil)

public function unit.removeAbilityFromList(int abil)
    normalAbilityLists[this.getOwner().getId()].remove(abil)

init
    addBotAction(bot -> begin
        let h = hero[bot]
        if h.isAlive() and not isCasting[bot]
            for spell in normalAbilityLists[bot]
                if h.hasAbility(spell)
                    let cb = abilityActions.get(spell)
                    if cb != null
                        cb.check(h)
            if whatMode[5] == LEVELING
                for spell in heroAbilityLists[bot]
                    if h.hasAbility(spell)
                        let cb = abilityActions.get(spell)
                        if cb != null
                            cb.check(h)
                if h.getSkillPoints() > 0
                    h.selectSkill(skillBuilds[bot].get())
    end)

    onBotHeroAppear(bot -> begin
        normalAbilityLists[bot] = HeroType.get(hero[bot]).getNormalAbilities().toAbilityList()
        heroAbilityLists[bot] = HeroType.get(hero[bot]).getHeroAbilities().toAbilityList()

        if whatMode[5] == LEVELING
            skillBuilds[bot] = new SkillBuild(hero[bot].getTypeId())
    end)

    onBotHeroDisappear(bot -> begin
        destroy normalAbilityLists[bot]
        normalAbilityLists[bot] = null
        destroy heroAbilityLists[bot]
        heroAbilityLists[bot] = null
        
        destroy skillBuilds[bot]
        skillBuilds[bot] = null
    end)

    passives.add(ADVANCED_ENGINEERING_NL, ADVANCED_ENGINEERING_L)
    passives.add(BOILING_OIL_NL, BOILING_OIL_L)
    passives.add(BRILLIANCE_AURA_NL, BRILLIANCE_AURA_L)
    passives.add(CLEAVE_ATTACK_NL, CLEAVE_ATTACK_L)
    passives.add(COMMAND_NL, COMMAND_L)
    passives.add(CRITICAL_STRIKE_NL, CRITICAL_STRIKE_L)
    passives.add(DARK_BLOOD_NL, DARK_BLOOD_L)
    passives.add(DEGENERATION_AURA_NL, DEGENERATION_AURA_L)
    passives.add(DEMONIC_ARMOR_NL, DEMONIC_ARMOR_L)
    passives.add(EVASION_NL, EVASION_L)
    passives.add(HARDENED_SKIN_NL, HARDENED_SKIN_L)
    passives.add(LIQUID_FIRE_PAS_NL, LIQUID_FIRE_PAS_L)
    passives.add(REENCARNATION_NL, REENCARNATION_L)
    passives.add(SCORCHING_HEAT_NL, SCORCHING_HEAT_L)
    passives.add(SLOW_POISON_NL, SLOW_POISON_L)
    passives.add(UNHOLY_AURA, VAMPIRIC_AURA)

// Find concentration of units

unit attacker

init
    attacker = createUnit(players[PLAYER_NEUTRAL_AGGRESSIVE], 'hgry')..hide()

public function unit.isInvulnerable() returns bool
    let result = attacker.issueTargetOrderById(Orders.attackonce, this)
    attacker.issueImmediateOrderById(Orders.stop)
    return not result

let E = EULER
let E_INV = 0.3678794
let LN_FACTOR = 1.2840254
let LN_FACTOR_INV = 0.7788008

function ln(real v) returns real
    var sum = 0.
    var sign = 1.
    var r = v

    if r < 0.
        error("Logarithm of negative number is undefined!")
    
    if r < 1.
        r = 1.0/r
        sign = -1.0
    
    while r >= E
        r = r*E_INV
        sum = sum + 1.0
    
    while r >= LN_FACTOR
        r = r*LN_FACTOR_INV
        sum = sum + 0.25

    return sign*(sum + 0.125*(r - 1.0)*(1 + 9.0/(2.0 + r) + 4.5/(0.5 + r) + 1.0/r))

function mode(LinkedList<real> data) returns real
    let n = data.size()

    if n == 0
        return 0

    let intervalNumber = (1 + 3.322 * ln(n.toReal())).round()

    data.sort()

    let minVal = data.getFirst()
    let range = (minVal - data.peek()).abs()
    let amplitude = range / intervalNumber
    
    real array l // lower limit
    real array L // upper limit
    for i = 1 to intervalNumber
        l[i] = minVal + (i-1)*amplitude
        L[i] = minVal + i*amplitude

    int array f // frequencies
    for i = 1 to intervalNumber
        for x in data
            if x.isBetween(l[i], L[i])
                f[i]++
                data.remove(x)
    
    var maxNumber = INT_MIN
    var maxF = 0
    for i = 1 to intervalNumber
        if f[i] > maxNumber
            maxNumber = f[i]
            maxF = i
    
    return l[maxF] + ((f[maxF] - f[maxF-1])/((f[maxF] - f[maxF-1]) + (f[maxF] - f[maxF+1]))) * amplitude

public tuple unitConcentrationResult(bool success, vec2 pos)

public function unitConcentration(vec2 pos, real range, player owner, real area) returns unitConcentrationResult
    let xVals = new LinkedList<real>()
    let yVals = new LinkedList<real>()
    unitConcentrationResult result

    forUnitsInRange(pos, range, u -> begin
        if u.isAlive() and u.isEnemyOf(owner) and not u.isInvulnerable()
            xVals.add(u.getX())
            yVals.add(u.getY())
    end)

    if xVals.size() >= 3
        let concentration = vec2(mode(xVals), mode(yVals))

        let count = new Reference(0)
        forUnitsInRange(concentration, area, u -> begin
            if u.isAlive() and u.isEnemyOf(owner) and not u.isInvulnerable()
                count.val++
        end)

        result = count.into() >= 3 ? unitConcentrationResult(true, concentration) : unitConcentrationResult(false, ZERO2)
    else
        result = unitConcentrationResult(false, ZERO2)

    destroy xVals
    destroy yVals

    return result

// Find units in a cone

public function unitInCone(vec2 pos, real range, player owner, angle theta) returns unitConcentrationResult
    let angles = new LinkedList<real>()
    unitConcentrationResult result

    forUnitsInRange(pos, range, u -> begin
        if u.isAlive() and u.isEnemyOf(owner) and not u.isInvulnerable()
            angles.add(u.getPos().angleTo(pos).radians())
    end)

    if angles.size() >= 3
        let cone = mode(angles)

        let count = new Reference(0)
        forUnitsInRange(pos, range, u -> begin
            if u.isAlive() and u.isEnemyOf(owner) and not u.isInvulnerable() and cone < (u.getPos().angleTo(pos) - theta).radians().abs()
                count.val++
        end)

        result = count.into() >= 3 ? unitConcentrationResult(true, pos.polarOffset(angle(cone), range/2)) : unitConcentrationResult(false, ZERO2)
    else
        result = unitConcentrationResult(false, ZERO2)

    destroy angles

    return result