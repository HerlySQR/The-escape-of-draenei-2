package Switch

import AFK
import Repick
import MyBoard
import ChatEnter
import GeneratedValues
import Reset
import WhoSelect
import HeroSelection
import ModeSelection
import SummonCourier

import Dialog
import ClosureForGroups
import ClosureTimers
import LinkedList
import ItemObjEditing
import ObjectIdGenerator
import Icons
import ObjectIds
import HashMap
import ClosureEvents
import Orders

public interface SwitchListener
    function run(player p1, player p2)

let listeners = new LinkedList<SwitchListener>()

/** Runs after 2 players succesfully switched places*/
public function onSwitch(SwitchListener cb)
    listeners.add(cb)

let EXP_BOOK = compiletime(ITEM_ID_GEN.next())
let expMap = new HashMap<item, int>()

let endSwitch = CreateTimer()
let switchWindow = createDialog()
let whoVoted = CreateForce()

var youCantNow = false
var howManyVoted = 1
var okEnabled = false

button array switchButton
player whoWantSwitch
boolean switchSuccesful

init
    onChatCommand("switch", (p, _) -> begin
        if not whoAreHere.has(p)
            DisplayTextToPlayer(p, 0., 0., "Please select a unit if you wanna switch (it's to know you're here).")
        else if youCantNow
            DisplayTextToPlayer(p, 0., 0., "Someone is doing switch, you have to wait.")
        else
            print("Someone wanna switch (Only has 60 seconds).")
            youCantNow = true
            switchWindow.setMessage("What player do you want to change with?")
            if THE_DEMONS.has(p)
                for i = 1 to 5
                    switchButton[i] = switchWindow.addButton(playerM(i).getColoredName())
            else
                for i = 6 to 10
                    switchButton[i] = switchWindow.addButton(playerM(i).getColoredName())
            switchWindow.display(p, true)
            whoWantSwitch = p
            switchSuccesful = false
            endSwitch.start(60., function youCantVote)
    end)

function youCantVote()
    howManyVoted = 1
    whoVoted.clear()
    if not switchSuccesful
        print("|cffff0000The time limit for switch has finished.|r")
    switchWindow.display(whoWantSwitch, false)
    switchWindow.clear()
    youCantNow = false

init
    onChatCommand("ok", (p, _) -> begin
        if okEnabled
            if not whoVoted.has(p)
                howManyVoted++
                if howManyVoted < whoAreHere.count()
                    print(p.getName() + " typed ok (" + howManyVoted.toString() + "/" + whoAreHere.count().toString() + ")")
                    whoVoted.add(p)
                else
                    changePlayers()
                    whoVoted.clear()
                    print("The switch has been succesful.")
                    switchSuccesful = true
                    endSwitch.pause()
                    youCantVote()
    end)

player swp1
player swp2

var notBooks = false

init
    CreateTrigger()
        ..registerDialogEvent(switchWindow)
        ..addAction(() -> begin
            let p = GetTriggerPlayer()
            swp1 = p
            for i = 1 to 10
                if GetClickedButton() == switchButton[i]
                    swp2 = playerM(i)
            if whoAreHere.count() == 1
                changePlayers()
                print("The switch has been succesful.")
                switchSuccesful = true
                endSwitch.pause()
                youCantVote()
            else
                whoVoted.add(p)
                print("|cff879cdc" + swp1.getName() + " wants switch with " + swp2.getName() + "|r")
                print("Type -ok for switch")
                okEnabled = true
        end)

function changePlayers()
    let i1 = swp1.getId()
    let i2 = swp2.getId()

    // Return items to their owners
    forUnitsOfPlayer(swp1, u -> begin
        if u.getTypeId() == BACKPACK or u.getTypeId() == COURIER
            for m in u.inventory()
                if m.getPlayer() != swp1
                    m.setPos((THE_DRAENEI.has(swp1) ? actDrSpawn : actDeSpawn).getCenter())
    end)
    forUnitsOfPlayer(swp2, u -> begin
        if u.getTypeId() == BACKPACK or u.getTypeId() == COURIER
            for m in u.inventory()
                if m.getPlayer() != swp2
                    m.setPos((THE_DRAENEI.has(swp2) ? actDrSpawn : actDeSpawn).getCenter())
    end)

    let list1 = swp1.createCrate(false)
    let list2 = swp2.createCrate(false)

    // Return them the levels
    if not notBooks
        if whatMode[5] == LEVELING
            if hero[i1] != null
                let m1 = createItem(EXP_BOOK, ZERO2)
                m1.setPlayer(swp1, false)
                m1.setVisible(false)
                expMap.put(m1, hero[i1].getXp())
                list1.add(m1)
            if hero[i2] != null
                let m2 = createItem(EXP_BOOK, ZERO2)
                m2.setPlayer(swp2, false)
                m2.setVisible(false)
                expMap.put(m2, hero[i2].getXp())
                list2.add(m2)
    
    // Change the players
    if whatMode[4] == TRAITOR
        hero[i1].setPos((THE_DEMONS.has(swp1) ? actDrSpawn : actDeSpawn).getCenter())
        hero[i2].setPos((THE_DEMONS.has(swp1) ? actDrSpawn : actDeSpawn).getCenter())
    else
        yesOrYes = true
        repick(swp1)
        repick(swp2)
        yesOrYes = false
        swp1.moveCrates((THE_DEMONS.has(swp1) ? actDrSpawn : actDeSpawn).randomPoint())
        swp2.moveCrates((THE_DEMONS.has(swp2) ? actDrSpawn : actDeSpawn).randomPoint())
        swp1.panCameraToTimed((THE_DEMONS.has(swp1) ? Rects.selectorDraenei : Rects.selectorDemon).getCenter(), 0.)
        swp2.panCameraToTimed((THE_DEMONS.has(swp2) ? Rects.selectorDraenei : Rects.selectorDemon).getCenter(), 0.)

    switchMembers(swp1, swp2)

    // Last details
    let c = swp1.getColor()
    swp1.setColor(swp2.getColor(), true)
    swp2.setColor(c, true)

    // Change the alliances
    changeAlliance(swp1)
    changeAlliance(swp2)

    playersOrder()

    for cb in listeners
        cb.run(swp1, swp2)

function changeAlliance(player p)
    if THE_DRAENEI.has(p)
        THE_DRAENEI.remove(p)
        for i = 0 to 11
            if THE_DRAENEI.has(players[i])
                noAllies(p, players[i])
            else if THE_DEMONS.has(players[i])
                yesAllies(p, players[i])
        THE_DEMONS.add(p)
    else
        THE_DEMONS.remove(p)
        for i = 0 to 11
            if THE_DRAENEI.has(players[i])
                yesAllies(p, players[i])
            else if THE_DEMONS.has(players[i])
                noAllies(p, players[i])
        THE_DRAENEI.add(p)

function noAllies(player p1, player p2)
    SetPlayerAllianceStateBJ(p1, p2, bj_ALLIANCE_UNALLIED)
    SetPlayerAllianceStateBJ(p2, p1, bj_ALLIANCE_UNALLIED)

function yesAllies(player p1, player p2)
    SetPlayerAllianceStateBJ(p1, p2, bj_ALLIANCE_ALLIED_VISION)
    SetPlayerAllianceStateBJ(p2, p1, bj_ALLIANCE_ALLIED_VISION)

init
    // Interchange teams at the end
    onReset(false, () -> begin
        EnumItemsInRect(bj_mapInitialPlayableArea, null, () -> GetEnumItem().remove())
        doAfter(9.) ->
            notBooks = true
            for i = 1 to 5
                swp1 = playerM(i)
                swp2 = playerM(i+5)
                changePlayers()
                canPick.remove(swp1)
                canPick.remove(swp2)
            
            nullTimer() ->
                for i = 1 to 11
                    players[i].removeCrate()
            notBooks = false
            whoSelect()
    end)
    // Return them the levels
    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> begin
        let m = EventData.getOrderTargetItem()
        let u = EventData.getOrderedUnit()
        if m.getTypeId() == EXP_BOOK and m.getPlayer() != u.getOwner()
            u.issueTargetOrderById(Orders.attack, u)
    end)
    EventListener.add(EVENT_PLAYER_UNIT_USE_ITEM, () -> begin
        let m = EventData.getManipulatedItem()
        let u = EventData.getManipulatingUnit()
        if m.getTypeId() == EXP_BOOK
            u.setXp(u.getXp() + expMap.get(m), true)
            expMap.remove(m)
            m.remove()
    end)

@compiletime function gen()
    new ItemDefinition(EXP_BOOK, 'tkno')
        ..setNumberofCharges(0)
        ..setCanBeSoldToMerchants(false)
        ..setUseAutomaticallyWhenAcquired(false)
        ..setInterfaceIcon(Icons.bTNManual3)
        ..setAbilities(DUMMY_ABILITY.toRawCode())
        ..setTooltipExtended("Use to recover your XP.")
        ..setDescription("Use to recover your XP.")
        ..setName("Book of Power")