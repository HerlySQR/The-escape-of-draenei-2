package MyBoard

import ClosureTimers
import Icons

import public Functions
import public PlayerData
import ModeSelection
import HeroType
import ReviveN
import DrAndDeSpawn

public constant gameBoard = CreateMultiboard()

init
    onModesSelected(() -> playersOrder())

    nullTimer() -> 
        int pl = 0
        for i = 0 to bj_MAX_PLAYERS
            if players[i].isIngame()
                pl++
        
        gameBoard
            ..setColumnCount(5)
            ..setTitle("Statistics")
            ..display(false)
            ..setItemWidth(0, 0, 0.0145)
            ..setItemWidth(0, 1, 0.0650)
            ..setItemValue(0, 0, "")
            ..setItemValue(1, 0, colorId[11] + "Drae|r")
            ..setItemValue(1, 1, colorId[11] + " nei|r")
            ..setItemValue(0, 1, "Player")
            ..setItemValue(0, 2, "Kills")
            ..setItemValue(0, 3, "Deaths")
            ..setItemValue(0, 4, "Assists")
        for i = 0 to 4
            gameBoard.getItem(0, i).setValueColor(COLOR_GOLD)

public function playersOrder()
    for i = 1 to 12
        row[i] = 999

    var t = 3
    for i = 1 to 5
        if playerM(i).isIngame()
            row[i] = t
            t++

    let d = t
    t++

    for i = 6 to 10
        if playerM(i).isIngame()
            row[i] = t
            t++
    
    gameBoard.setRowCount(t)

    int r

    for i = 1 to 10
        r = row[i]
        if r != 999
            gameBoard
                ..setItemValue(2, r, playerName[i])
                ..setItemValue(3, r, kills[i].toString())
                ..setItemValue(4, r, deaths[i].toString())
                ..setItemValue(5, r, assists[i].toString())
            gameBoard.getItem(1, r).setStyle(false, true)
            let g = HeroType.get(hero[i])
            if g == null
                gameBoard.setItemIcon(1, r, Icons.bTNSelectHeroOff)
            else
                gameBoard.setItemIcon(1, r, g.getIcon())
    
    gameBoard.getItem(0, d).setStyle(true, false)
    gameBoard
        ..setItemValue(0, d, ("Dem").color(colorId[12]))
        ..setItemValue(1, d, (" ons").color(colorId[12]))
    for i = 2 to 4
        gameBoard.setItemValue(0, d, "")

// Game time
var seconds = 0
var minutes = 0
var hours = 0

init
    doPeriodically(1, cb -> begin
        seconds++
        if seconds == 60
            seconds = 0
            minutes++
        if minutes == 60
            minutes = 0
            hours++
        gameBoard.setTitle("Statistics  | |  " + (hours < 10 ? "0" : "") + hours.toString() + ":" + (minutes < 10 ? "0" : "") + minutes.toString() + ":"  + (seconds < 10 ? "0" : "") + seconds.toString())
        // Triggers or timers to enable
        if reviveNRun
            if seconds == 0 or seconds == 20 or seconds == 40
                reviveNRun = false
                reviveStart()
        if spawnRun
            if seconds == 0 or seconds == 30
                spawnRun = false
                startSpawn()
    end) 
    