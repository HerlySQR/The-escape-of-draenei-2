package Shops

import Functions
import ItemCreation
import Merchant
import SpecialMerchant
import ArmsMerchant
import RecipesMerchant
import SecretMerchant
import BookStore
import GeneratedValues
import PlayerData
import Reset
import ModeSelection

import ClosureForGroups
import HashMap

public constant MERCHANT = compiletime(UNIT_ID_GEN.next())
public constant ARMS_MERCHANT = compiletime(UNIT_ID_GEN.next())
public constant SPECIAL_MERCHANT = compiletime(UNIT_ID_GEN.next())
public constant RECIPES_MERCHANT = compiletime(UNIT_ID_GEN.next())
public constant SECRET_MERCHANT = compiletime(UNIT_ID_GEN.next())
public constant BOOK_STORE = compiletime(UNIT_ID_GEN.next())

let secretMerchant = createUnit(players[PLAYER_NEUTRAL_PASSIVE], SECRET_MERCHANT, Rects.secretMerchant.getCenter(), 180..fromDeg())

function addItemToStock(ItemDefinition m, int maxStock)
    AddItemToStock(secretMerchant, (m instanceof Recipe) ? (m castTo Recipe).getDummyItem() : m.getNewId(), 1, maxStock)

function removeItemFromStock(ItemDefinition m)
    RemoveItemFromStock(secretMerchant, (m instanceof Recipe) ? (m castTo Recipe).getDummyItem() : m.getNewId())

interface ItemAllowedCondition
    function check() returns bool

function ItemAllowedCondition.and_(ItemAllowedCondition other) returns ItemAllowedCondition
    return () -> this.check() and other.check()

let condMap = new HashMap<ItemDefinition, ItemAllowedCondition>()

function ItemDefinition.setCondition(ItemAllowedCondition cond)
    condMap.put(this, cond)

function ItemDefinition.setToStock(unit u, int currentStock, int maxStock)
    let id = (this instanceof Recipe) ? (this castTo Recipe).getDummyItem() : this.getNewId()
    if condMap.get(this).check()
        AddItemToStock(u, id, currentStock, maxStock)
    else
        RemoveItemFromStock(u, id)

init
    ItemAllowedCondition isNotLeveling = () -> whatMode[5] == NOT_LEVELING
    ItemAllowedCondition isLeveling = () -> whatMode[5] == LEVELING

    HEALING_POTION.setCondition(isNotLeveling)
    HEALING_SALVE.setCondition(isLeveling)
    MANA_POTION.setCondition(isNotLeveling)
    CLARITY_POTION.setCondition(isLeveling)
    GREATER_HEALING_POTION.setCondition(isNotLeveling)
    GREATER_MANA_POTION.setCondition(isNotLeveling)
    POTION_OF_RESTORATION.setCondition(isLeveling)
    GREATER_POTION_OF_RESTORATION.setCondition(isLeveling)

    ItemAllowedCondition notOnlyConsummibles = () -> whatMode[3] != ONLY_COMSUMIBLES

    GLOVES_OF_HASTE.setCondition(notOnlyConsummibles)
    KHADGAR_HEATH_STONE.setCondition(notOnlyConsummibles)
    MANA_PENDANT.setCondition(notOnlyConsummibles)
    STORM_DIAMOND.setCondition(notOnlyConsummibles)
    BOOTS_OF_SPEED.setCondition(notOnlyConsummibles)
    POWER_BOOSTER.setCondition(notOnlyConsummibles.and_(isNotLeveling))

    let isNotLevelingAndNotOnlyConsummibles = isNotLeveling.and_(notOnlyConsummibles)
    let isLevelingAndNotOnlyConsummibles = isLeveling.and_(notOnlyConsummibles)

    SHIELD_OF_HONOR_RECIPE.setCondition(notOnlyConsummibles)
    RING_OF_REGENERATION_1_RECIPE.setCondition(isNotLevelingAndNotOnlyConsummibles)
    RING_OF_REGENERATION_2_RECIPE.setCondition(isLevelingAndNotOnlyConsummibles)
    SOBI_MASK_1_RECIPE.setCondition(isNotLevelingAndNotOnlyConsummibles)
    SOBI_MASK_2_RECIPE.setCondition(isLevelingAndNotOnlyConsummibles)
    RUNIC_BRACERS_RECIPE.setCondition(notOnlyConsummibles)
    IMPULSE_BOOTS_RECIPE.setCondition(notOnlyConsummibles)
    ENERGY_PENDANT_RECIPE.setCondition(notOnlyConsummibles)
    MASK_OF_DEATH_RECIPE.setCondition(notOnlyConsummibles)
    SHIELD_OF_LORD_OF_DEAD_RECIPE.setCondition(notOnlyConsummibles)
    GLOVES_OF_CORRUPTION_RECIPE.setCondition(notOnlyConsummibles)
    SHAMANS_CLAWS_RECIPE.setCondition(notOnlyConsummibles)
    NORTHREND_ARTIFACT_RECIPE.setCondition(notOnlyConsummibles)

    onReset(false, () -> begin
        RemoveItemFromAllStock(HEALING_POTION.getNewId())
        RemoveItemFromAllStock(HEALING_SALVE.getNewId())
        RemoveItemFromAllStock(MANA_POTION.getNewId())
        RemoveItemFromAllStock(CLARITY_POTION.getNewId())
        RemoveItemFromAllStock(GREATER_HEALING_POTION.getNewId())
        RemoveItemFromAllStock(GREATER_MANA_POTION.getNewId())
        RemoveItemFromAllStock(POTION_OF_RESTORATION.getNewId())
        RemoveItemFromAllStock(GREATER_POTION_OF_RESTORATION.getNewId())

        RemoveItemFromAllStock(GLOVES_OF_HASTE.getNewId())
        RemoveItemFromAllStock(KHADGAR_HEATH_STONE.getNewId())
        RemoveItemFromAllStock(MANA_PENDANT.getNewId())
        RemoveItemFromAllStock(STORM_DIAMOND.getNewId())
        RemoveItemFromAllStock(POWER_BOOSTER.getNewId())
        RemoveItemFromAllStock(BOOTS_OF_SPEED.getNewId())

        RemoveItemFromAllStock(SHIELD_OF_HONOR_RECIPE.getDummyItem())
        RemoveItemFromAllStock(RING_OF_REGENERATION_1_RECIPE.getDummyItem())
        RemoveItemFromAllStock(RING_OF_REGENERATION_2_RECIPE.getDummyItem())
        RemoveItemFromAllStock(SOBI_MASK_1_RECIPE.getDummyItem())
        RemoveItemFromAllStock(SOBI_MASK_2_RECIPE.getDummyItem())
        RemoveItemFromAllStock(RUNIC_BRACERS_RECIPE.getDummyItem())
        RemoveItemFromAllStock(IMPULSE_BOOTS_RECIPE.getDummyItem())
        RemoveItemFromAllStock(ENERGY_PENDANT_RECIPE.getDummyItem())
        RemoveItemFromAllStock(MASK_OF_DEATH_RECIPE.getDummyItem())
        RemoveItemFromAllStock(SHIELD_OF_LORD_OF_DEAD_RECIPE.getDummyItem())
        RemoveItemFromAllStock(GLOVES_OF_CORRUPTION_RECIPE.getDummyItem())
        RemoveItemFromAllStock(SHAMANS_CLAWS_RECIPE.getDummyItem())
        RemoveItemFromAllStock(NORTHREND_ARTIFACT_RECIPE.getDummyItem())
    end)
    
    // Add/remove items based on the game-mode
    onModesSelected(() -> begin
        forUnitsOfPlayer(players[PLAYER_NEUTRAL_PASSIVE], u -> begin
            let id = u.getTypeId()

            if id == MERCHANT
                HEALING_POTION.setToStock(u, 1, 5)
                HEALING_SALVE.setToStock(u, 1, 5)
                MANA_POTION.setToStock(u, 1, 5)
                CLARITY_POTION.setToStock(u, 1, 5)
                GREATER_HEALING_POTION.setToStock(u, 1, 3)
                GREATER_MANA_POTION.setToStock(u, 1, 3)
                POTION_OF_RESTORATION.setToStock(u, 1, 5)
                GREATER_POTION_OF_RESTORATION.setToStock(u, 1, 3)
            else if id == SPECIAL_MERCHANT
                GLOVES_OF_HASTE.setToStock(u, 1, 2)
                KHADGAR_HEATH_STONE.setToStock(u, 1, 2)
                MANA_PENDANT.setToStock(u, 1, 2)
                STORM_DIAMOND.setToStock(u, 1, 2)
                BOOTS_OF_SPEED.setToStock(u, 1, 1)
                POWER_BOOSTER.setToStock(u, 1, 1)
                if whatMode[3] == ONLY_COMSUMIBLES
                    AddItemToStock(u, UNITE_SPIRIT_RUNE.getNewId(), 1, 1)
                else
                    RemoveItemFromStock(u, UNITE_SPIRIT_RUNE.getNewId())
            else if id == ARMS_MERCHANT
                if whatMode[3] == ONLY_COMSUMIBLES
                    u.hide()
                else
                    u.show()
            else if id == RECIPES_MERCHANT
                if whatMode[3] == NO_RECIPES
                    u.hide()
                else
                    u.show()
                    SHIELD_OF_HONOR_RECIPE.setToStock(u, 1, 1)
                    RING_OF_REGENERATION_1_RECIPE.setToStock(u, 1, 1)
                    RING_OF_REGENERATION_2_RECIPE.setToStock(u, 1, 1)
                    SOBI_MASK_1_RECIPE.setToStock(u, 1, 1)
                    SOBI_MASK_2_RECIPE.setToStock(u, 1, 1)
                    RUNIC_BRACERS_RECIPE.setToStock(u, 1, 1)
                    IMPULSE_BOOTS_RECIPE.setToStock(u, 1, 1)
                    ENERGY_PENDANT_RECIPE.setToStock(u, 1, 1)
                    MASK_OF_DEATH_RECIPE.setToStock(u, 1, 1)
                    SHIELD_OF_LORD_OF_DEAD_RECIPE.setToStock(u, 1, 1)
                    GLOVES_OF_CORRUPTION_RECIPE.setToStock(u, 1, 1)
                    SHAMANS_CLAWS_RECIPE.setToStock(u, 1, 1)
                    NORTHREND_ARTIFACT_RECIPE.setToStock(u, 1, 1)
            else if id == BOOK_STORE
                if whatMode[5] == LEVELING
                    u.show()
                else
                    u.hide()
        end)
    end)

    // Create the shops and add the items

    let colors = [PLAYER_COLOR_RED, PLAYER_COLOR_GREEN, PLAYER_COLOR_BLACK_PASSIVE, PLAYER_COLOR_BLACK_PASSIVE, PLAYER_COLOR_GREEN]
    let angles = [90..fromDeg(), 0..fromDeg(), 90..fromDeg(), 90..fromDeg(), 90..fromDeg()]
    for i = 0 to 4
        createUnit(players[PLAYER_NEUTRAL_PASSIVE], MERCHANT, Rects.merchant[i].getCenter(), angles[i])..setColor(colors[i])
        createUnit(players[PLAYER_NEUTRAL_PASSIVE], ARMS_MERCHANT, Rects.armsMerchant[i].getCenter(), angles[i])..setColor(colors[i])
        createUnit(players[PLAYER_NEUTRAL_PASSIVE], SPECIAL_MERCHANT, Rects.specialMerchant[i].getCenter(), angles[i])..setColor(colors[i])
        createUnit(players[PLAYER_NEUTRAL_PASSIVE], RECIPES_MERCHANT, Rects.recipeMerchant[i].getCenter(), angles[i])..setColor(colors[i])
    
    for i = 0 to 2
        createUnit(players[PLAYER_NEUTRAL_PASSIVE], BOOK_STORE, Rects.bookStore[i].getCenter(), UNIT_FACING)
    
    // Destroy all 3 levers for the secret shop
    CreateTrigger()
        ..registerDeathEvent(Dests.secretMerchantLever[0])
        ..registerDeathEvent(Dests.secretMerchantLever[1])
        ..registerDeathEvent(Dests.secretMerchantLever[2])
        ..addAction(() -> begin
            if not (Dests.secretMerchantLever[0].isAliveTrick() or
                Dests.secretMerchantLever[1].isAliveTrick() or
                Dests.secretMerchantLever[2].isAliveTrick())

                forDestructablesInRect(Rects.secretMerchantEntrance, d -> elevator(d).setHeight(1))
                
                SetDoodadAnimationRect(Rects.secretMerchantEntrance, 'D00Q', "hide", false)

                QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_SECRET, "|cff9b00ffThe Secret Shop was unlocked.|r")

                addItemToStock(STONE_GOLEM, 2)
                addItemToStock(CROWN_OF_KINGS, 1)
                addItemToStock(HORN_OF_THE_LEGION, 1)
                addItemToStock(WAR_HELMET_RECIPE, 1)
                addItemToStock(STAFF_OF_THE_CYCLONES_RECIPE, 1)
                addItemToStock(ACID_STONE, 1)
                addItemToStock(CLOACK_OF_FLAMES, 1)
                addItemToStock(TRAP_TOTEM_RECIPE, 1)
                addItemToStock(POWER_BOOTS_RECIPE, 1)
                addItemToStock(FIRE_BLADE_RECIPE, 1)
                addItemToStock(STAFF_OF_SILENCE_RECIPE, 1)
                addItemToStock(SHIELD_RUNE, 1)

                if whatMode[3] == Mode.NO_RECIPES
                    removeItemFromStock(WAR_HELMET_RECIPE)
                    removeItemFromStock(STAFF_OF_THE_CYCLONES_RECIPE)
                    removeItemFromStock(TRAP_TOTEM_RECIPE)
                    removeItemFromStock(POWER_BOOTS_RECIPE)
                    removeItemFromStock(FIRE_BLADE_RECIPE)
                    removeItemFromStock(STAFF_OF_SILENCE_RECIPE)
                else if whatMode[3] == Mode.ONLY_COMSUMIBLES
                    removeItemFromStock(CROWN_OF_KINGS)
                    removeItemFromStock(HORN_OF_THE_LEGION)
                    removeItemFromStock(WAR_HELMET_RECIPE)
                    removeItemFromStock(STAFF_OF_THE_CYCLONES_RECIPE)
                    removeItemFromStock(ACID_STONE)
                    removeItemFromStock(CLOACK_OF_FLAMES)
                    removeItemFromStock(FIRE_BLADE_RECIPE)
                    removeItemFromStock(RUNIC_BRACERS_RECIPE)
                    removeItemFromStock(STAFF_OF_SILENCE_RECIPE)
        end)
    
    onReset(false, () -> begin
        SetDoodadAnimationRect(Rects.secretMerchantEntrance, 'D00Q', "show", false)

        forDestructablesInRect(Rects.secretMerchantEntrance, d -> begin
            elevator(d).setHeight(3)
        end)
        
        removeItemFromStock(STONE_GOLEM)
        removeItemFromStock(CROWN_OF_KINGS)
        removeItemFromStock(HORN_OF_THE_LEGION)
        removeItemFromStock(WAR_HELMET_RECIPE)
        removeItemFromStock(STAFF_OF_THE_CYCLONES_RECIPE)
        removeItemFromStock(ACID_STONE)
        removeItemFromStock(CLOACK_OF_FLAMES)
        removeItemFromStock(TRAP_TOTEM_RECIPE)
        removeItemFromStock(POWER_BOOTS_RECIPE)
        removeItemFromStock(RUNIC_BRACERS_RECIPE)
        removeItemFromStock(STAFF_OF_SILENCE_RECIPE)
        removeItemFromStock(SHIELD_RUNE)

        forUnitsInRect(Rects.shops2, u -> u.setColor(DEMON.getColor()))
        forUnitsInRect(Rects.shops3, u -> u.setColor(players[PLAYER_NEUTRAL_AGGRESSIVE].getColor()))
        forUnitsInRect(Rects.shops4, u -> u.setColor(DEMON.getColor()))

        for i = 0 to 2
            Dests.secretMerchantLever[i].restoreLife(5, false)
    end)

    // To prevent the items dissapear from the shop
    bj_stockUpdateTimer.pause()
    bj_stockItemPurchased.disable()

function BuildingDefinition.defaultSettings()
    this..setSelectionScale(2.25)
        ..setShadowTextureBuilding(Textures.shadowHouse)
        ..setGroundTexture("")
        ..setPropulsionWindowdegrees(30.)
        ..setNormalAbilities(
        commaList(
            'Ane2',
            AbilityIds.neutralBuildinganyunit,
            AbilityIds.invulnerable,
            AbilityIds.shopSharingAlliedBldg,
            AbilityIds.shopPurchaseItem,
            'Asid', 'Asud'
        ))
        ..setItemsMade("")
        ..setPlacementPreventedBy("")
        ..setPlacementRequires("")
        ..setPathingMap("PathTextures\\4x4SimpleSolid.tga")
        ..setCollisionSize(25.)

@compiletime function gen()
    new BuildingDefinition(MERCHANT, UnitIds.arcanevault)
        ..defaultSettings()
        ..setItemsSold(commaList(
            SCROLL_OF_THE_BEAST.getNewId(),
            WIND_SCEPTER.getNewId(),
            SCROLL_OF_PROTECTION.getNewId(),
            SCROLL_OF_SPEED.getNewId(),
            INVULNERAVILITY_POTION.getNewId(),
            SENTINEL_TOTEMS.getNewId(),
            VAMPIRIC_POTION.getNewId(),
            ANTIMAGIC_POTION.getNewId()
        ))
        ..setModelFile(Units.peon1)
        ..setUnitSoundSet(Soundsets.peon)
        .setName("Merchant")

    new BuildingDefinition(ARMS_MERCHANT, UnitIds.arcanevault)
        ..defaultSettings()
        ..setItemsSold(commaList(
            CLAWS_OF_ATTACK_12.getNewId(),
            CLAWS_OF_ATTACK_15.getNewId(),
            CLAWS_OF_ATTACK_18.getNewId(),
            CLAWS_OF_ATTACK_21.getNewId(),
            RING_OF_PROTECTION_2.getNewId(),
            RING_OF_PROTECTION_3.getNewId(),
            RING_OF_PROTECTION_4.getNewId(),
            RING_OF_PROTECTION_6.getNewId(),
            ORB_OF_CORRUPTION.getNewId(),
            ORB_OF_LIGHTNING.getNewId(),
            ICE_ORB.getNewId(),
            UNITE_SPIRIT_RUNE.getNewId()
        ))
        ..setModelFile(Units.grunt1)
        ..setUnitSoundSet(Soundsets.grunt)
        .setName("Arms merchant")

    new BuildingDefinition(SPECIAL_MERCHANT, UnitIds.arcanevault)
        ..defaultSettings()
        ..setItemsSold(commaList(
            STAFF_OF_NEGATION.getNewId(),
            NETHER_POTION.getNewId(),
            GOBLIN_LANDMINES.getNewId(),
            SUMMON_COURIER.getNewId(),
            GOLD_COINS.getNewId(),
            LUMBER_BALE.getNewId()
        ))
        ..setModelFile(Units.acolyte1)
        ..setUnitSoundSet(Soundsets.acolyte)
        .setName("Special merchant")

    new BuildingDefinition(RECIPES_MERCHANT, UnitIds.arcanevault)
        ..defaultSettings()
        ..setItemsSold(POCKET_CATAPULT_RECIPE.getDummyItem().toRawCode())
        ..setModelFile(Units.voidWalker)
        ..setUnitSoundSet(Soundsets.netherDragon)
        .setName("Recipes merchant")

    new BuildingDefinition(SECRET_MERCHANT, UnitIds.arcanevault)
        ..defaultSettings()
        ..setItemsSold("")
        ..setModelFile(Units.spiritOfVengeance)
        ..setUnitSoundSet(Soundsets.vengeance)
        .setName("Secret merchant")

    new BuildingDefinition(BOOK_STORE, UnitIds.goblinmerchant)
        ..defaultSettings()
        ..setItemsSold(commaList(
            BOOK_OF_STRENGTH,
            BOOK_OF_AGILITY,
            BOOK_OF_INTELLIGENCE,
            BOOK_OF_STRENGTH_5,
            BOOK_OF_AGILITY_5,
            BOOK_OF_INTELLIGENCE_5,
            BOOK_OF_RECONVERSION,
            BOOK_OF_EXPERIENCE
        ))
        ..setModelFile(Buildings.bookOfSummoning)
        ..setIconGameInterface(Icons.bTNBookOfSummoning)
        ..setScalingValue(1.5)
        ..setUnitSoundSet(Soundsets.marketPlace)
        .setName("Book Store")