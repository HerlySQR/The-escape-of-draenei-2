package Shops

import Functions
import ItemCreation
import Merchant
import SpecialMerchant
import ArmsMerchant
import RecipesMerchant
import SecretMerchant
import BookStore
import GeneratedValues
import PlayerData
import Reset
import ModeSelection

import ClosureForGroups

public constant MERCHANT = compiletime(UNIT_ID_GEN.next())
public constant ARMS_MERCHANT = compiletime(UNIT_ID_GEN.next())
public constant SPECIAL_MERCHANT = compiletime(UNIT_ID_GEN.next())
public constant RECIPES_MERCHANT = compiletime(UNIT_ID_GEN.next())
public constant SECRET_MERCHANT = compiletime(UNIT_ID_GEN.next())
public constant BOOK_STORE = compiletime(UNIT_ID_GEN.next())

let secretMerchant = createUnit(players[PLAYER_NEUTRAL_PASSIVE], SECRET_MERCHANT, Rects.secretMerchant.getCenter(), 180..fromDeg())

function addItemToStock(ItemDefinition m, int maxStock)
    AddItemToStock(secretMerchant, (m instanceof Recipe) ? (m castTo Recipe).getDummyItem() : m.getNewId(), 1, maxStock)

function removeItemFromStock(ItemDefinition m)
    RemoveItemFromStock(secretMerchant, (m instanceof Recipe) ? (m castTo Recipe).getDummyItem() : m.getNewId())

init
    onModesSelected(() -> begin
        forUnitsInRect(bj_mapInitialPlayableArea, u -> begin
            let id = u.getTypeId()

            if whatMode[3] == ONLY_COMSUMIBLES
                if id == ARMS_MERCHANT
                    u.hide()
                else if id == SPECIAL_MERCHANT
                    RemoveItemFromStock(u, GLOVES_OF_HASTE.getNewId())
                    RemoveItemFromStock(u, KHADGAR_HEATH_STONE.getNewId())
                    RemoveItemFromStock(u, MANA_PENDANT.getNewId())
                    RemoveItemFromStock(u, STORM_DIAMOND.getNewId())
                    RemoveItemFromStock(u, POWER_BOOSTER.getNewId())
                    RemoveItemFromStock(u, BOOTS_OF_SPEED.getNewId())
                    AddItemToStock(u, UNITE_SPIRIT_RUNE.getNewId(), 1, 2)
                else if id == RECIPES_MERCHANT
                    RemoveItemFromStock(u, SHIELD_OF_HONOR_RECIPE.getDummyItem())
                    RemoveItemFromStock(u, RING_OF_REGENERATION_1_RECIPE.getDummyItem())
                    RemoveItemFromStock(u, RING_OF_REGENERATION_2_RECIPE.getDummyItem())
                    RemoveItemFromStock(u, SOBI_MASK_1_RECIPE.getDummyItem())
                    RemoveItemFromStock(u, SOBI_MASK_2_RECIPE.getDummyItem())
                    RemoveItemFromStock(u, FIRE_BLADE_RECIPE.getDummyItem())
                    RemoveItemFromStock(u, IMPULSE_BOOTS_RECIPE.getDummyItem())
                    RemoveItemFromStock(u, ENERGY_PENDANT_RECIPE.getDummyItem())
                    RemoveItemFromStock(u, MASK_OF_DEATH_RECIPE.getDummyItem())
                    RemoveItemFromStock(u, SHIELD_OF_LORD_OF_DEAD_RECIPE.getDummyItem())
                    RemoveItemFromStock(u, GLOVES_OF_CORRUPTION_RECIPE.getDummyItem())
                    RemoveItemFromStock(u, SHAMANS_CLAWS_RECIPE.getDummyItem())
                    RemoveItemFromStock(u, NORTHREND_ARTIFACT_RECIPE.getDummyItem())
            else if whatMode[3] == NO_RECIPES
                if id == RECIPES_MERCHANT
                    u.hide()
            
            if whatMode[5] == LEVELING
                if id == MERCHANT
                    RemoveItemFromStock(u, HEALING_POTION.getNewId())
                    AddItemToStock(u, HEALING_SALVE.getNewId(), 1, 5)
                    RemoveItemFromStock(u, MANA_POTION.getNewId())
                    AddItemToStock(u, CLARITY_POTION.getNewId(), 1, 5)
                    RemoveItemFromStock(u, GREATER_HEALING_POTION.getNewId())
                    AddItemToStock(u, POTION_OF_RESTORATION.getNewId(), 1, 3)
                    RemoveItemFromStock(u, GREATER_MANA_POTION.getNewId())
                    AddItemToStock(u, GREATER_POTION_OF_RESTORATION.getNewId(), 1, 3)
                else if id == RECIPES_MERCHANT
                    RemoveItemFromStock(u, RING_OF_REGENERATION_1_RECIPE.getDummyItem())
                    AddItemToStock(u, RING_OF_REGENERATION_2_RECIPE.getDummyItem(), 1, 1)
                    RemoveItemFromStock(u, SOBI_MASK_1_RECIPE.getDummyItem())
                    AddItemToStock(u, SOBI_MASK_2_RECIPE.getDummyItem(), 1, 1)
                else if id == BOOK_STORE
                    u.show()
            else if whatMode[5] == NOT_LEVELING
                if id == MERCHANT
                    RemoveItemFromStock(u, HEALING_SALVE.getNewId())
                    AddItemToStock(u, HEALING_POTION.getNewId(), 1, 5)
                    RemoveItemFromStock(u, CLARITY_POTION.getNewId())
                    AddItemToStock(u, MANA_POTION.getNewId(), 1, 5)
                    RemoveItemFromStock(u, POTION_OF_RESTORATION.getNewId())
                    AddItemToStock(u, GREATER_HEALING_POTION.getNewId(), 1, 3)
                    RemoveItemFromStock(u, GREATER_POTION_OF_RESTORATION.getNewId())
                    AddItemToStock(u, GREATER_MANA_POTION.getNewId(), 1, 3)
                else if id == RECIPES_MERCHANT
                    RemoveItemFromStock(u, RING_OF_REGENERATION_2_RECIPE.getDummyItem())
                    AddItemToStock(u, RING_OF_REGENERATION_1_RECIPE.getDummyItem(), 1, 1)
                    RemoveItemFromStock(u, SOBI_MASK_2_RECIPE.getDummyItem())
                    AddItemToStock(u, SOBI_MASK_1_RECIPE.getDummyItem(), 1, 1)
                else if id == BOOK_STORE
                    u.hide()
        end)
    end)

    let owners = [DRAENEI, DEMON, players[PLAYER_NEUTRAL_AGGRESSIVE], DEMON, DEMON]
    let angles = [90..fromDeg(), 0..fromDeg(), 90..fromDeg(), 90..fromDeg(), 90..fromDeg()]
    for i = 0 to 4
        createUnit(owners[i], MERCHANT, Rects.merchant[i].getCenter(), angles[i])
        createUnit(owners[i], ARMS_MERCHANT, Rects.armsMerchant[i].getCenter(), angles[i])
        createUnit(owners[i], SPECIAL_MERCHANT, Rects.specialMerchant[i].getCenter(), angles[i])
        createUnit(owners[i], RECIPES_MERCHANT, Rects.recipeMerchant[i].getCenter(), angles[i])
    
    for i = 0 to 2
        createUnit(players[PLAYER_NEUTRAL_PASSIVE], BOOK_STORE, Rects.bookStore[i].getCenter(), UNIT_FACING)
    
    CreateTrigger()
        ..registerDeathEvent(Dests.secretMerchantLever[0])
        ..registerDeathEvent(Dests.secretMerchantLever[1])
        ..registerDeathEvent(Dests.secretMerchantLever[2])
        ..addAction(() -> begin
            if not (Dests.secretMerchantLever[0].isAliveTrick() or
                Dests.secretMerchantLever[1].isAliveTrick() or
                Dests.secretMerchantLever[2].isAliveTrick())

                forDestructablesInRect(Rects.secretMerchantEntrance, d -> elevator(d).setHeight(1))
                
                SetDoodadAnimationRect(Rects.secretMerchantEntrance, 'D00Q', "hide", false)

                QuestMessageBJ(bj_FORCE_ALL_PLAYERS, bj_QUESTMESSAGE_SECRET, "|cff9b00ffThe Secret Shop was unlocked.|r")

                addItemToStock(STONE_GOLEM, 2)
                addItemToStock(CROWN_OF_KINGS, 1)
                addItemToStock(HORN_OF_THE_LEGION, 1)
                addItemToStock(WAR_HELMET_RECIPE, 1)
                addItemToStock(STAFF_OF_THE_CYCLONES_RECIPE, 1)
                addItemToStock(ACID_STONE, 1)
                addItemToStock(CLOACK_OF_FLAMES, 1)
                addItemToStock(TRAP_TOTEM_RECIPE, 1)
                addItemToStock(POWER_BOOTS_RECIPE, 1)
                addItemToStock(RUNIC_BRACERS_RECIPE, 1)
                addItemToStock(STAFF_OF_SILENCE_RECIPE, 1)
                addItemToStock(SHIELD_RUNE, 1)

                if whatMode[3] == Mode.NO_RECIPES
                    removeItemFromStock(WAR_HELMET_RECIPE)
                    removeItemFromStock(STAFF_OF_THE_CYCLONES_RECIPE)
                    removeItemFromStock(TRAP_TOTEM_RECIPE)
                    removeItemFromStock(POWER_BOOTS_RECIPE)
                    removeItemFromStock(RUNIC_BRACERS_RECIPE)
                    removeItemFromStock(STAFF_OF_SILENCE_RECIPE)
                else if whatMode[3] == Mode.ONLY_COMSUMIBLES
                    removeItemFromStock(CROWN_OF_KINGS)
                    removeItemFromStock(HORN_OF_THE_LEGION)
                    removeItemFromStock(WAR_HELMET_RECIPE)
                    removeItemFromStock(STAFF_OF_THE_CYCLONES_RECIPE)
                    removeItemFromStock(ACID_STONE)
                    removeItemFromStock(CLOACK_OF_FLAMES)
                    removeItemFromStock(POWER_BOOTS_RECIPE)
                    removeItemFromStock(RUNIC_BRACERS_RECIPE)
                    removeItemFromStock(STAFF_OF_SILENCE_RECIPE)
        end)
    
    onReset(false, () -> begin
        SetDoodadAnimationRect(Rects.secretMerchantEntrance, 'D00Q', "show", false)

        forDestructablesInRect(Rects.secretMerchantEntrance, d -> begin
            elevator(d).setHeight(3)
        end)
        
        removeItemFromStock(STONE_GOLEM)
        removeItemFromStock(CROWN_OF_KINGS)
        removeItemFromStock(HORN_OF_THE_LEGION)
        removeItemFromStock(WAR_HELMET_RECIPE)
        removeItemFromStock(STAFF_OF_THE_CYCLONES_RECIPE)
        removeItemFromStock(ACID_STONE)
        removeItemFromStock(CLOACK_OF_FLAMES)
        removeItemFromStock(TRAP_TOTEM_RECIPE)
        removeItemFromStock(POWER_BOOTS_RECIPE)
        removeItemFromStock(RUNIC_BRACERS_RECIPE)
        removeItemFromStock(STAFF_OF_SILENCE_RECIPE)
        removeItemFromStock(SHIELD_RUNE)

        forUnitsInRect(Rects.shops2, u -> u.setOwner(DEMON, true))
        forUnitsInRect(Rects.shops3, u -> u.setOwner(players[PLAYER_NEUTRAL_AGGRESSIVE], true))
        forUnitsInRect(Rects.shops4, u -> u.setOwner(DEMON, true))

        for i = 0 to 2
            Dests.secretMerchantLever[i].restoreLife(5, false)
    end)

function BuildingDefinition.defaultSettings()
    this..setSelectionScale(2.25)
        ..setShadowTextureBuilding(Textures.shadowHouse)
        ..setGroundTexture("")
        ..setPropulsionWindowdegrees(30.)
        ..setNormalAbilities(
        commaList(
            'Ane2',
            AbilityIds.neutralBuildinganyunit,
            AbilityIds.invulnerable,
            AbilityIds.shopSharingAlliedBldg,
            AbilityIds.shopPurchaseItem,
            'Asid', 'Asud'
        ))
        ..setItemsMade("")
        ..setPlacementPreventedBy("")
        ..setPlacementRequires("")
        ..setPathingMap("PathTextures\\4x4SimpleSolid.tga")
        ..setCollisionSize(25.)

@compiletime function gen()
    new BuildingDefinition(MERCHANT, UnitIds.arcanevault)
        ..defaultSettings()
        ..setItemsSold(commaList(
            HEALING_POTION.getNewId(),
            //HEALING_SALVE.getNewId(),
            MANA_POTION.getNewId(),
            //CLARITY_POTION.getNewId(),
            SCROLL_OF_THE_BEAST.getNewId(),
            WIND_SCEPTER.getNewId(),
            GREATER_HEALING_POTION.getNewId(),
            GREATER_MANA_POTION.getNewId(),
            //POTION_OF_RESTORATION.getNewId(),
            //GREATER_POTION_OF_RESTORATION.getNewId(),
            SCROLL_OF_PROTECTION.getNewId(),
            SCROLL_OF_SPEED.getNewId(),
            INVULNERAVILITY_POTION.getNewId(),
            SENTINEL_TOTEMS.getNewId(),
            VAMPIRIC_POTION.getNewId(),
            ANTIMAGIC_POTION.getNewId()
        ))
        ..setModelFile(Units.peon1)
        ..setUnitSoundSet(Soundsets.peon)
        .setName("Merchant")

    new BuildingDefinition(ARMS_MERCHANT, UnitIds.arcanevault)
        ..defaultSettings()
        ..setItemsSold(commaList(
            CLAWS_OF_ATTACK_12.getNewId(),
            CLAWS_OF_ATTACK_15.getNewId(),
            CLAWS_OF_ATTACK_18.getNewId(),
            CLAWS_OF_ATTACK_21.getNewId(),
            RING_OF_PROTECTION_2.getNewId(),
            RING_OF_PROTECTION_3.getNewId(),
            RING_OF_PROTECTION_4.getNewId(),
            RING_OF_PROTECTION_6.getNewId(),
            ORB_OF_CORRUPTION.getNewId(),
            ORB_OF_LIGHTNING.getNewId(),
            ICE_ORB.getNewId(),
            UNITE_SPIRIT_RUNE.getNewId()
        ))
        ..setModelFile(Units.grunt1)
        ..setUnitSoundSet(Soundsets.grunt)
        .setName("Arms merchant")

    new BuildingDefinition(SPECIAL_MERCHANT, UnitIds.arcanevault)
        ..defaultSettings()
        ..setItemsSold(commaList(
            STAFF_OF_NEGATION.getNewId(),
            GLOVES_OF_HASTE.getNewId(),
            NETHER_POTION.getNewId(),
            GOBLIN_LANDMINES.getNewId(),
            KHADGAR_HEATH_STONE.getNewId(),
            MANA_PENDANT.getNewId(),
            STORM_DIAMOND.getNewId(),
            SUMMON_COURIER.getNewId(),
            GOLD_COINS.getNewId(),
            LUMBER_BALE.getNewId(),
            POWER_BOOSTER.getNewId(),
            BOOTS_OF_SPEED.getNewId()
        ))
        ..setModelFile(Units.acolyte1)
        ..setUnitSoundSet(Soundsets.acolyte)
        .setName("Special merchant")

    new BuildingDefinition(RECIPES_MERCHANT, UnitIds.arcanevault)
        ..defaultSettings()
        ..setItemsSold(commaList(
            SHIELD_OF_HONOR_RECIPE.getDummyItem(),
            RING_OF_REGENERATION_1_RECIPE.getDummyItem(),
            //RING_OF_REGENERATION_2_RECIPE.getDummyItem(),
            SOBI_MASK_1_RECIPE.getDummyItem(),
            //SOBI_MASK_2_RECIPE.getDummyItem(),
            FIRE_BLADE_RECIPE.getDummyItem(),
            IMPULSE_BOOTS_RECIPE.getDummyItem(),
            ENERGY_PENDANT_RECIPE.getDummyItem(),
            MASK_OF_DEATH_RECIPE.getDummyItem(),
            SHIELD_OF_LORD_OF_DEAD_RECIPE.getDummyItem(),
            GLOVES_OF_CORRUPTION_RECIPE.getDummyItem(),
            SHAMANS_CLAWS_RECIPE.getDummyItem(),
            NORTHREND_ARTIFACT_RECIPE.getDummyItem(),
            POCKET_CATAPULT_RECIPE.getDummyItem()
        ))
        ..setModelFile(Units.voidWalker)
        ..setUnitSoundSet(Soundsets.netherDragon)
        .setName("Recipes merchant")

    new BuildingDefinition(SECRET_MERCHANT, UnitIds.arcanevault)
        ..defaultSettings()
        ..setItemsSold("")
        ..setModelFile(Units.spiritOfVengeance)
        ..setUnitSoundSet(Soundsets.vengeance)
        .setName("Recipes merchant")

    new BuildingDefinition(BOOK_STORE, UnitIds.goblinmerchant)
        ..defaultSettings()
        ..setItemsSold(commaList(
            BOOK_OF_STRENGTH,
            BOOK_OF_AGILITY,
            BOOK_OF_INTELLIGENCE,
            BOOK_OF_STRENGTH_5,
            BOOK_OF_AGILITY_5,
            BOOK_OF_INTELLIGENCE_5,
            BOOK_OF_RECONVERSION,
            BOOK_OF_EXPERIENCE
        ))
        ..setModelFile(Buildings.bookOfSummoning)
        ..setIconGameInterface(Icons.bTNBookOfSummoning)
        ..setScalingValue(1.5)
        ..setUnitSoundSet(Soundsets.marketPlace)
        .setName("Book Store")