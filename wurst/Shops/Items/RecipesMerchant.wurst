package RecipesMerchant

import ItemCreation
import Merchant
import SpecialMerchant
import ArmsMerchant
import initlater SecretMerchant
import HeroType

// Shield of honor

public constant SHIELD_OF_HONOR_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(500)
        ..setLumberCost(3)
        ..setStockReplenishInterval(10)
        ..setInterfaceIcon(Icons.bTNHumanArmorUpThree)
        ..setButtonPositionX(0)
        ..setButtonPositionY(0)
        ..setHotkey("Q")
        ..setTooltipBasic("[|cffffcc00Q|r] Buy Shield of honor (Recipe)")
        ..setTooltipExtended("Give 8 armor and 15% command aura.\n\n" +
                             "Requires:\n" +
                             "- Claws of Attack (+12)\n" +
                             "- Ring of protection (+2)\n" +
                             "- Ring of protection (+6)\n\n")
        ..setDescription("Give 8 armor and 15% command aura.")
        ..setName("Recipe of Shield of honor"))

public constant SHIELD_OF_HONOR = compiletime(
    new RecipeItem('shhn')
        //..setArmorType(ArmorSoundType.Metal)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNHumanArmorUpThree)
        ..addBonus(Bonus.ARMOR, 8)
        ..setTooltipExtended("Give 8 armor and 15% command aura.")
        ..setDescription("Give 8 armor and 15% command aura.")
        ..setName("Shield of honor"))

@compiletime function genShieldOfHonor()
    fixRecipe(SHIELD_OF_HONOR_RECIPE, SHIELD_OF_HONOR,
        
        CLAWS_OF_ATTACK_12.goldCost +
        RING_OF_PROTECTION_2.goldCost +
        RING_OF_PROTECTION_6.goldCost +
        SHIELD_OF_HONOR_RECIPE.goldCost,

        CLAWS_OF_ATTACK_12.lumberCost +
        RING_OF_PROTECTION_2.lumberCost +
        RING_OF_PROTECTION_6.lumberCost +
        SHIELD_OF_HONOR_RECIPE.lumberCost
    )

init
    new ItemRecipe()
        ..setRequiredItems(
            CLAWS_OF_ATTACK_12,
            RING_OF_PROTECTION_2,
            RING_OF_PROTECTION_6,
            SHIELD_OF_HONOR_RECIPE)
        ..setResultItem(SHIELD_OF_HONOR)

    SHIELD_OF_HONOR_RECIPE.initShopConditions()

// Ring of regeneration

public constant RING_OF_REGENERATION_1_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(200)
        ..setLumberCost(2)
        ..setStockReplenishInterval(10)
        ..setInterfaceIcon(Icons.bTNRingSkull)
        ..setButtonPositionX(1)
        ..setButtonPositionY(0)
        ..setHotkey("W")
        ..setTooltipBasic("[|cffffcc00W|r] Buy Ring of Regeneration (Recipe)")
        ..setTooltipExtended("+5 Health regeneration.\n\n" +
                             "Requires:\n" +
                             "- x3 Healing potions\n\n")
        ..setDescription("+5 Health regeneration.")
        ..setName("Recipe of Ring of Regeneration"))

public constant RING_OF_REGENERATION_1 = compiletime(
    new RecipeItem('rlif')
        //..setArmorType(ArmorSoundType.Metal)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNRingSkull)
        ..addBonus(Bonus.LIFEREGEN, 5)
        ..setTooltipExtended("+5 Health regeneration.")
        ..setDescription("+5 Health regeneration.")
        ..setName("Ring of Regeneration"))

@compiletime function genRingOfRegeneration1()
    fixRecipe(RING_OF_REGENERATION_1_RECIPE, RING_OF_REGENERATION_1,
        
        3*HEALING_POTION.goldCost +
        RING_OF_REGENERATION_1_RECIPE.goldCost,
        
        3*HEALING_POTION.lumberCost +
        RING_OF_REGENERATION_1_RECIPE.lumberCost)

init
    new ItemRecipe()
        ..setRequiredItems(
            HEALING_POTION,
            HEALING_POTION,
            HEALING_POTION,
            RING_OF_REGENERATION_1_RECIPE)
        ..setResultItem(RING_OF_REGENERATION_1)

    RING_OF_REGENERATION_1_RECIPE.initShopConditions()

public constant RING_OF_REGENERATION_2_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(200)
        ..setLumberCost(2)
        ..setStockReplenishInterval(10)
        ..setInterfaceIcon(Icons.bTNRingSkull)
        ..setButtonPositionX(1)
        ..setButtonPositionY(0)
        ..setHotkey("W")
        ..setTooltipBasic("[|cffffcc00W|r] Buy Ring of Regeneration (Recipe)")
        ..setTooltipExtended("+5 Health regeneration.\n\n" +
                             "Requires:\n" +
                             "- x4 Healing salves\n\n")
        ..setDescription("+5 Health regeneration.")
        ..setName("Recipe of Ring of Regeneration"))

public constant RING_OF_REGENERATION_2 = compiletime(
    new RecipeItem('rlif')
        //..setArmorType(ArmorSoundType.Metal)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNRingSkull)
        ..addBonus(Bonus.LIFEREGEN, 5)
        ..setTooltipExtended("+5 Health regeneration.")
        ..setDescription("+5 Health regeneration.")
        ..setName("Ring of Regeneration"))

@compiletime function genRingOfRegeneration2()
    fixRecipe(RING_OF_REGENERATION_2_RECIPE, RING_OF_REGENERATION_2,
        
        4*HEALING_SALVE.goldCost +
        RING_OF_REGENERATION_2_RECIPE.goldCost,
        
        4*HEALING_SALVE.lumberCost +
        RING_OF_REGENERATION_2_RECIPE.lumberCost)
    
init
    new ItemRecipe()
        ..setRequiredItems(
            HEALING_SALVE,
            HEALING_SALVE,
            HEALING_SALVE,
            HEALING_SALVE,
            RING_OF_REGENERATION_2_RECIPE)
        ..setResultItem(RING_OF_REGENERATION_2)

    RING_OF_REGENERATION_2_RECIPE.initShopConditions()

// Sobi mask

public constant SOBI_MASK_1_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(200)
        ..setLumberCost(2)
        ..setStockReplenishInterval(10)
        ..setInterfaceIcon(Icons.bTNSobiMask)
        ..setButtonPositionX(2)
        ..setButtonPositionY(0)
        ..setHotkey("E")
        ..setTooltipBasic("[|cffffcc00E|r] Buy Sobi Mask (Recipe)")
        ..setTooltipExtended("+1.25 Mana regeneration.\n\n" +
                             "Requires:\n" +
                             "- x3 Mana potions\n\n")
        ..setDescription("+1.25 Mana regeneration.")
        ..setName("Recipe of Sobi Mask"))

public constant SOBI_MASK_1 = compiletime(
    new RecipeItem('rwiz')
        //..setArmorType(ArmorSoundType.Wood)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNSobiMask)
        ..addBonus(Bonus.MANAREGEN, 1.25)
        ..setTooltipExtended("+1.25 Mana regeneration.")
        ..setDescription("+1.25 Mana regeneration.")
        ..setName("Sobi Mask"))

@compiletime function genSobiMask1()
    fixRecipe(SOBI_MASK_1_RECIPE, SOBI_MASK_1,
        
        3*MANA_POTION.goldCost +
        SOBI_MASK_1_RECIPE.goldCost,
        
        3*MANA_POTION.lumberCost +
        SOBI_MASK_1_RECIPE.lumberCost)

init
    new ItemRecipe()
        ..setRequiredItems(
            MANA_POTION,
            MANA_POTION,
            MANA_POTION,
            SOBI_MASK_1_RECIPE)
        ..setResultItem(SOBI_MASK_1)

    SOBI_MASK_1_RECIPE.initShopConditions()

public constant SOBI_MASK_2_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(200)
        ..setLumberCost(2)
        ..setStockReplenishInterval(10)
        ..setInterfaceIcon(Icons.bTNSobiMask)
        ..setButtonPositionX(2)
        ..setButtonPositionY(0)
        ..setHotkey("E")
        ..setTooltipBasic("[|cffffcc00E|r] Buy Sobi Mask (Recipe)")
        ..setTooltipExtended("+1.25 Mana regeneration.\n\n" +
                             "Requires:\n" +
                             "- x5 Clarity potions\n\n")
        ..setDescription("+1.25 Mana regeneration.")
        ..setName("Recipe of Sobi Mask"))

public constant SOBI_MASK_2 = compiletime(
    new RecipeItem('rwiz')
        //..setArmorType(ArmorSoundType.Wood)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNSobiMask)
        ..addBonus(Bonus.MANAREGEN, 1.25)
        ..setTooltipExtended("+1.25 Mana regeneration.")
        ..setDescription("+1.25 Mana regeneration.")
        ..setName("Sobi Mask"))

@compiletime function genSobiMask2()
    fixRecipe(SOBI_MASK_2_RECIPE, SOBI_MASK_2,

        5*CLARITY_POTION.goldCost +
        SOBI_MASK_2_RECIPE.goldCost,
        
        5*CLARITY_POTION.lumberCost +
        SOBI_MASK_2_RECIPE.lumberCost)

init
    new ItemRecipe()
        ..setRequiredItems(
            CLARITY_POTION,
            CLARITY_POTION,
            CLARITY_POTION,
            CLARITY_POTION,
            CLARITY_POTION,
            SOBI_MASK_2_RECIPE)
        ..setResultItem(SOBI_MASK_2)

    SOBI_MASK_2_RECIPE.initShopConditions()

// Fire Blade

public constant FIRE_BLADE_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(300)
        ..setLumberCost(5)
        ..setStockReplenishInterval(10)
        ..setInterfaceIcon(Icons.bTNArcaniteMelee)
        ..setButtonPositionX(3)
        ..setButtonPositionY(0)
        ..setHotkey("R")
        ..setTooltipBasic("[|cffffcc00R|r] Buy Fire Blade (Recipe)")
        ..setTooltipExtended("+70 damage and 20% of chance of causing 2 times normal damage.\n\n" +
                             "Requires:\n" +
                             "- Claws of attack (+12)\n" +
                             "- Claws of attack (+15)\n" +
                             "- Claws of attack (+18)\n" +
                             "- Claws of attack (+21)\n\n")
        ..setDescription("+70 damage and 20% of chance of causing 2 times normal damage.")
        ..setName("Recipe of Fire Blade"))

public constant FIRE_BLADE = compiletime(
    new RecipeItem('srbd')
        //..setArmorType(ArmorSoundType.Metal)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNArcaniteMelee)
        ..addBonus(Bonus.DAMAGE, 70)
        ..setTooltipExtended("+70 damage and 20% of chance of causing 2 times normal damage.")
        ..setDescription("+70 damage and 20% of chance of causing 2 times normal damage.")
        ..setName("Fire Blade"))

@compiletime function genFireBlade()
    fixRecipe(FIRE_BLADE_RECIPE, FIRE_BLADE,
        
        CLAWS_OF_ATTACK_12.goldCost +
        CLAWS_OF_ATTACK_15.goldCost +
        CLAWS_OF_ATTACK_18.goldCost +
        CLAWS_OF_ATTACK_21.goldCost +
        FIRE_BLADE_RECIPE.goldCost,
        
        CLAWS_OF_ATTACK_12.lumberCost +
        CLAWS_OF_ATTACK_15.lumberCost +
        CLAWS_OF_ATTACK_18.lumberCost +
        CLAWS_OF_ATTACK_21.lumberCost +
        FIRE_BLADE_RECIPE.lumberCost)

init
    new ItemRecipe()
        ..setRequiredItems(
            CLAWS_OF_ATTACK_12,
            CLAWS_OF_ATTACK_15,
            CLAWS_OF_ATTACK_18,
            CLAWS_OF_ATTACK_21,
            FIRE_BLADE_RECIPE)
        ..setResultItem(FIRE_BLADE)

    FIRE_BLADE_RECIPE.initShopConditions()

// Impulse boots

public constant IMPULSE_BOOTS_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(1200)
        ..setLumberCost(3)
        ..setStockReplenishInterval(30)
        ..setInterfaceIcon(Imports.bTNWindsBoots)
        ..setButtonPositionX(0)
        ..setButtonPositionY(1)
        ..setHotkey("A")
        ..setTooltipBasic("[|cffffcc00A|r] Buy Impulse boots (Recipe)")
        ..setTooltipExtended("+60 Movement Speed and lets you advance fast to a certain position.\n\n|cffc3dbffNote:|r You only can go over a wall of 1 height, other case you will stop (and with some other exceptions), but you always can from top to bottom.\n\n" +
                             "Requires:\n" +
                             "- Boots of speed\n" +
                             "- Scroll of speed\n" +
                             "- Wind scepter\n\n")
        ..setDescription("+60 Movement Speed and lets you advance fast to a certain position.\n\n|cffc3dbffNote:|r You only can go over a wall of 1 height, other case you will stop (and with some other exceptions), but you always can from top to bottom.")
        ..setName("Recipe of Impulse boots"))

public constant IMPULSE_BOOTS = compiletime(
    new RecipeItem('bspd')
        //..setArmorType(ArmorSoundType.Flesh)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Imports.bTNWindsBoots)
        ..setTooltipExtended("+60 Movement Speed and lets you advance fast to a certain position.\n\n|cffc3dbffNote:|r You only can go over a wall of 1 height, other case you will stop (and with some other exceptions), but you always can from top to bottom.")
        ..setDescription("+60 Movement Speed and lets you advance fast to a certain position.\n\n|cffc3dbffNote:|r You only can go over a wall of 1 height, other case you will stop (and with some other exceptions), but you always can from top to bottom.")
        ..setName("Impulse boots"))

@compiletime function genImpulseBoots()
    fixRecipe(IMPULSE_BOOTS_RECIPE, IMPULSE_BOOTS,
        
        BOOTS_OF_SPEED.goldCost +
        SCROLL_OF_SPEED.goldCost +
        WIND_SCEPTER.goldCost +
        IMPULSE_BOOTS_RECIPE.goldCost,
        
        BOOTS_OF_SPEED.lumberCost +
        SCROLL_OF_SPEED.lumberCost +
        WIND_SCEPTER.lumberCost +
        IMPULSE_BOOTS_RECIPE.lumberCost)

init
    new ItemRecipe()
        ..setRequiredItems(
            BOOTS_OF_SPEED,
            SCROLL_OF_SPEED,
            WIND_SCEPTER,
            IMPULSE_BOOTS_RECIPE)
        ..setResultItem(IMPULSE_BOOTS)

    IMPULSE_BOOTS_RECIPE.initShopConditions()

// Impulse boots

public constant ENERGY_PENDANT_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(400)
        ..setLumberCost(2)
        ..setStockReplenishInterval(5)
        ..setInterfaceIcon(Icons.bTNPendantOfEnergy)
        ..setButtonPositionX(0)
        ..setButtonPositionY(1)
        ..setHotkey("S")
        ..setTooltipBasic("[|cffffcc00S|r] Buy Energy Pendant (Recipe)")
        ..setTooltipExtended("+200 mana points and if you uses it, restore 100 mana to nearby allied units.\n\n" +
                             "Requires:\n" +
                             "- Pendant of mana\n" +
                             "- Scroll of protection\n\n")
        ..setDescription("+200 mana points and if you uses it, restore 100 mana to nearby allied units.")
        ..setName("Recipe of Energy Pendant"))

public constant ENERGY_PENDANT = compiletime(
    new RecipeItem('pmna')
        //..setArmorType(ArmorSoundType.Flesh)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNPendantOfEnergy)
        ..addBonus(Bonus.MANA, 200)
        ..setTooltipExtended("+200 mana points and if you uses it, restore 100 mana to nearby allied units.")
        ..setDescription("+200 mana points and if you uses it, restore 100 mana to nearby allied units.")
        ..setName("Energy Pendant"))

@compiletime function genEnergyPendant()
    fixRecipe(ENERGY_PENDANT_RECIPE, ENERGY_PENDANT,
        
        MANA_PENDANT.goldCost +
        SCROLL_OF_PROTECTION.goldCost +
        ENERGY_PENDANT_RECIPE.goldCost,
        
        MANA_PENDANT.lumberCost +
        SCROLL_OF_PROTECTION.lumberCost +
        ENERGY_PENDANT_RECIPE.lumberCost)

init
    new ItemRecipe()
        ..setRequiredItems(
            MANA_PENDANT,
            SCROLL_OF_PROTECTION,
            ENERGY_PENDANT_RECIPE)
        ..setResultItem(ENERGY_PENDANT)

    ENERGY_PENDANT_RECIPE.initShopConditions()

// Mask of Death

public constant MASK_OF_DEATH_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(500)
        ..setLumberCost(5)
        ..setStockReplenishInterval(30)
        ..setInterfaceIcon(Icons.bTNMaskOfDeath)
        ..setButtonPositionX(2)
        ..setButtonPositionY(1)
        ..setHotkey("D")
        ..setTooltipBasic("[|cffffcc00D|r] Buy Mask of Death (Recipe)")
        ..setTooltipExtended("15% life steal\n+20 damage\n+5 armor\n\n" +
                             "Requires:\n" +
                             "- Claws of attack (+18)\n" +
                             "- Ring of protection (+4)\n" +
                             "- Vampiric potion\n\n")
        ..setDescription("15% life steal\n+20 damage\n+5 armor")
        ..setName("Recipe of Mask of Death"))

public constant MASK_OF_DEATH = compiletime(
    new RecipeItem('modt')
        //..setArmorType(ArmorSoundType.Wood)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNMaskOfDeath)
        ..addBonus(Bonus.DAMAGE, 20)
        ..addBonus(Bonus.ARMOR, 5)
        ..setTooltipExtended("15% life steal\n+20 damage\n+5 armor")
        ..setDescription("15% life steal\n+20 damage\n+5 armor")
        ..setName("Mask of Death"))

@compiletime function genMaskOfDeath()
    fixRecipe(MASK_OF_DEATH_RECIPE, MASK_OF_DEATH,
        
        CLAWS_OF_ATTACK_18.goldCost +
        RING_OF_PROTECTION_4.goldCost +
        VAMPIRIC_POTION.goldCost +
        MASK_OF_DEATH_RECIPE.goldCost,
        
        CLAWS_OF_ATTACK_18.lumberCost +
        RING_OF_PROTECTION_4.lumberCost +
        VAMPIRIC_POTION.lumberCost +
        MASK_OF_DEATH_RECIPE.lumberCost)

init
    new ItemRecipe()
        ..setRequiredItems(
            CLAWS_OF_ATTACK_18,
            RING_OF_PROTECTION_4,
            VAMPIRIC_POTION,
            MASK_OF_DEATH_RECIPE)
        ..setResultItem(MASK_OF_DEATH)

    MASK_OF_DEATH_RECIPE.initShopConditions()

// Shield of the Lord of Death

public constant SHIELD_OF_LORD_OF_DEAD_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(500)
        ..setLumberCost(3)
        ..setStockReplenishInterval(30)
        ..setInterfaceIcon(Icons.bTNLightningShield)
        ..setButtonPositionX(3)
        ..setButtonPositionY(1)
        ..setHotkey("F")
        ..setTooltipBasic("[|cffffcc00F|r] Buy Shield of the Lord of Death (Recipe)")
        ..setTooltipExtended("+250 hit points\n+250 mana points\n+7 armor\nInmolation (30 dps)\n\n" +
                             "Requires:\n" +
                             "- Khadgar health stone\n" +
                             "- Mana pendant\n" +
                             "- Ring of protection (+3)\n" +
                             "- Ring of protection (+4)\n\n")
        ..setDescription("+250 hit points\n+250 mana points\n+7 armor\nInmolation (30 dps)")
        ..setName("Recipe of Shield of the Lord of Death"))

public constant SHIELD_OF_LORD_OF_DEAD = compiletime(
    new RecipeItem('shdt')
        //..setArmorType(ArmorSoundType.Metal)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNLightningShield)
        ..addBonus(Bonus.LIFE, 250)
        ..addBonus(Bonus.MANA, 250)
        ..addBonus(Bonus.ARMOR, 7)
        ..setTooltipExtended("+250 hit points\n+250 mana points\n+7 armor\nInmolation (30 dps)")
        ..setDescription("+250 hit points\n+250 mana points\n+7 armor\nInmolation (30 dps)")
        ..setName("Shield of the Lord of Death"))

@compiletime function genShieldOfTheLordOfDeath()
    fixRecipe(SHIELD_OF_LORD_OF_DEAD_RECIPE, SHIELD_OF_LORD_OF_DEAD,
        
        KHADGAR_HEATH_STONE.goldCost +
        MANA_PENDANT.goldCost +
        RING_OF_PROTECTION_3.goldCost +
        RING_OF_PROTECTION_4.goldCost +
        CLOACK_OF_FLAMES.goldCost +
        SHIELD_OF_LORD_OF_DEAD_RECIPE.goldCost,
        
        KHADGAR_HEATH_STONE.lumberCost +
        MANA_PENDANT.lumberCost +
        RING_OF_PROTECTION_3.lumberCost +
        RING_OF_PROTECTION_4.lumberCost +
        CLOACK_OF_FLAMES.lumberCost +
        SHIELD_OF_LORD_OF_DEAD_RECIPE.lumberCost)

init
    nullTimer() -> 
        new ItemRecipe()
            ..setRequiredItems(
                KHADGAR_HEATH_STONE,
                MANA_PENDANT,
                RING_OF_PROTECTION_3,
                RING_OF_PROTECTION_4,
                CLOACK_OF_FLAMES,
                SHIELD_OF_LORD_OF_DEAD_RECIPE)
            ..setResultItem(SHIELD_OF_LORD_OF_DEAD)

        SHIELD_OF_LORD_OF_DEAD_RECIPE.initShopConditions()

// Gloves of corruption

public constant GLOVES_OF_CORRUPTION_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(400)
        ..setLumberCost(2)
        ..setStockReplenishInterval(30)
        ..setInterfaceIcon(Icons.bTNImprovedUnholyStrength)
        ..setButtonPositionX(0)
        ..setButtonPositionY(2)
        ..setHotkey("Z")
        ..setTooltipBasic("[|cffffcc00Z|r] Buy Gloves of corruption (Recipe)")
        ..setTooltipExtended("+20 of corruption attack and +30% of attack speed\n\n" +
                             "Requires:\n" +
                             "- Orb of corruption\n" +
                             "- Claws of attack (+15)\n" +
                             "- Gloves of haste\n\n")
        ..setDescription("+20 of corruption attack and +30% of attack speed")
        ..setName("Recipe of Gloves of corruption"))

public constant GLOVES_OF_CORRUPTION = compiletime(
    new RecipeItem('ocor')
        //..setArmorType(ArmorSoundType.Flesh)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNImprovedUnholyStrength)
        ..addBonus(Bonus.ATTACKSPEED, 30)
        ..setTooltipExtended("+20 of corruption attack and +30% of attack speed")
        ..setDescription("+20 of corruption attack and +30% of attack speed")
        ..setName("Gloves of corruption"))

@compiletime function genGlovesOfCorruption()
    fixRecipe(GLOVES_OF_CORRUPTION_RECIPE, GLOVES_OF_CORRUPTION,
        
        ORB_OF_CORRUPTION.goldCost +
        CLAWS_OF_ATTACK_15.goldCost +
        GLOVES_OF_HASTE.goldCost +
        GLOVES_OF_CORRUPTION_RECIPE.goldCost,
        
        ORB_OF_CORRUPTION.lumberCost +
        CLAWS_OF_ATTACK_15.lumberCost +
        GLOVES_OF_HASTE.lumberCost +
        GLOVES_OF_CORRUPTION_RECIPE.lumberCost)

init
    new ItemRecipe()
        ..setRequiredItems(
            ORB_OF_CORRUPTION,
            CLAWS_OF_ATTACK_15,
            GLOVES_OF_HASTE,
            GLOVES_OF_CORRUPTION_RECIPE)
        ..setResultItem(GLOVES_OF_CORRUPTION)

    GLOVES_OF_CORRUPTION_RECIPE.initShopConditions()

// Shaman's claws

public constant SHAMANS_CLAWS_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(400)
        ..setLumberCost(2)
        ..setStockReplenishInterval(30)
        ..setInterfaceIcon(Icons.bTNShamanMaster)
        ..setButtonPositionX(1)
        ..setButtonPositionY(2)
        ..setHotkey("X")
        ..setTooltipBasic("[|cffffcc00X|r] Buy Shaman's claws (Recipe)")
        ..setTooltipExtended("+20 of lightning attack and throws a lightning that causes damage to several targets, with initial damage 180.\n\n" +
                             "Requires:\n" +
                             "- Orb of lightning\n" +
                             "- Claws of attack (+15)\n" +
                             "- Storm diamond\n\n")
        ..setDescription("+20 of lightning attack and throws a lightning that causes damage to several targets, with initial damage 180.")
        ..setName("Recipe of Gloves of corruption"))

public constant SHAMANS_CLAWS = compiletime(
    new RecipeItem('ocor')
        //..setArmorType(ArmorSoundType.Flesh)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNShamanMaster)
        ..addBonus(Bonus.ATTACKSPEED, 30)
        ..setTooltipExtended("+20 of lightning attack and throws a lightning that causes damage to several targets, with initial damage 180.")
        ..setDescription("+20 of lightning attack and throws a lightning that causes damage to several targets, with initial damage 180.")
        ..setName("Shaman's claws"))

@compiletime function genShamanClaws()
    fixRecipe(SHAMANS_CLAWS_RECIPE, SHAMANS_CLAWS,
        
        ORB_OF_LIGHTNING.goldCost +
        CLAWS_OF_ATTACK_15.goldCost +
        STORM_DIAMOND.goldCost +
        SHAMANS_CLAWS_RECIPE.goldCost,
        
        ORB_OF_LIGHTNING.lumberCost +
        CLAWS_OF_ATTACK_15.lumberCost +
        STORM_DIAMOND.lumberCost +
        SHAMANS_CLAWS_RECIPE.lumberCost)

init
    new ItemRecipe()
        ..setRequiredItems(
            ORB_OF_LIGHTNING,
            CLAWS_OF_ATTACK_15,
            STORM_DIAMOND,
            SHAMANS_CLAWS_RECIPE)
        ..setResultItem(SHAMANS_CLAWS)

    SHAMANS_CLAWS_RECIPE.initShopConditions()

// Northrend Artifact

public constant NORTHREND_ARTIFACT_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(400)
        ..setLumberCost(2)
        ..setStockReplenishInterval(30)
        ..setInterfaceIcon(Icons.bTNIceShard)
        ..setButtonPositionX(2)
        ..setButtonPositionY(2)
        ..setHotkey("C")
        ..setTooltipBasic("[|cffffcc00C|r] Buy Northrend Artifact (Recipe)")
        ..setTooltipExtended("+250 hit points and +21 ice attack (don't ask why this is here).\n\n|cffff0000Orb effects don't stack.|r\n\n" +
                             "Requires:\n" +
                             "- Ice orb\n" +
                             "- Claws of attack (+15)\n" +
                             "- Kadghar health stone\n\n")
        ..setDescription("+250 hit points and +21 ice attack (don't ask why this is here).\n\n|cffff0000Orb effects don't stack.|r")
        ..setName("Northrend Artifact"))

public constant NORTHREND_ARTIFACT = compiletime(
    new RecipeItem('ofro')
        //..setArmorType(ArmorSoundType.Metal)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNIceShard)
        ..addBonus(Bonus.LIFE, 250)
        ..setTooltipExtended("+250 hit points and +21 ice attack (don't ask why this is here).\n\n|cffff0000Orb effects don't stack.|r")
        ..setDescription("+250 hit points and +21 ice attack (don't ask why this is here).\n\n|cffff0000Orb effects don't stack.|r")
        ..setName("Northrend Artifact"))

public constant NORTHREND_ARTIFACT_BREATH = compiletime(
    new RecipeItem('ofro')
        //..setArmorType(ArmorSoundType.Metal)
        ..setClassification("Miscellaneous")
        ..setInterfaceIcon(Icons.bTNIceShard)
        ..addBonus(Bonus.LIFE, 250)
        ..setTooltipBasic("[|cffffcc00C|r] Buy Northrend Artifact")
        ..setTooltipExtended("+250 hit points and +21 ice attack (don't ask why this is here).\n\n|cffff0000Orb effects don't stack.|r")
        ..setDescription("+250 hit points and +21 ice attack (don't ask why this is here).\n\n|cffff0000Orb effects don't stack.|r")
        ..setName("Northrend Artifact"))

@compiletime function genNorthrendArtifact()
    let goldCost = ORB_OF_LIGHTNING.goldCost +
        CLAWS_OF_ATTACK_15.goldCost +
        STORM_DIAMOND.goldCost +
        SHAMANS_CLAWS_RECIPE.goldCost

    let woodCost = ORB_OF_LIGHTNING.lumberCost +
        CLAWS_OF_ATTACK_15.lumberCost +
        STORM_DIAMOND.lumberCost +
        SHAMANS_CLAWS_RECIPE.lumberCost
    
    fixRecipe(NORTHREND_ARTIFACT_RECIPE, NORTHREND_ARTIFACT, goldCost, woodCost)

    NORTHREND_ARTIFACT_BREATH..setGoldCost(goldCost)..setLumberCost(woodCost)

init
    new ItemRecipe()
        ..setRequiredItems(
            ICE_ORB,
            CLAWS_OF_ATTACK_15,
            KHADGAR_HEATH_STONE,
            NORTHREND_ARTIFACT_RECIPE)
        ..setResultItem(NORTHREND_ARTIFACT)

    new ItemRecipe()
        ..setRequiredItems(
            ICE_ORB_BREATH,
            CLAWS_OF_ATTACK_15,
            KHADGAR_HEATH_STONE,
            NORTHREND_ARTIFACT_RECIPE)
        ..setResultItem(NORTHREND_ARTIFACT_BREATH)

    NORTHREND_ARTIFACT_RECIPE.initShopConditions()

    // Replace the item with its breath version when necessary
    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM, () -> begin
        let u = EventData.getTriggerUnit()
        let typ = HeroType.get(u)
        let m = GetManipulatedItem()
        var newId = 0

        if typ == SALAMANDER or typ == INFERNAL_MACHINE
            switch m.getTypeId()
                case ICE_ORB.getNewId()
                    newId = ICE_ORB_BREATH.getNewId()
                case NORTHREND_ARTIFACT.getNewId()
                    newId = NORTHREND_ARTIFACT_BREATH.getNewId()
        else
            switch m.getTypeId()
                case ICE_ORB_BREATH.getNewId()
                    newId = ICE_ORB.getNewId()
                case NORTHREND_ARTIFACT_BREATH.getNewId()
                    newId = NORTHREND_ARTIFACT.getNewId()
            
        if newId != 0
            m.remove()
            u.addItemById(newId)
            
    end)

// Pocket Catapult

public constant POCKET_CATAPULT_RECIPE = compiletime(
    new Recipe()
        ..setGoldCost(0)
        ..setLumberCost(1)
        ..setStockReplenishInterval(5)
        ..setInterfaceIcon(Icons.bTNCatapult)
        ..setButtonPositionX(3)
        ..setButtonPositionY(2)
        ..setHotkey("V")
        ..setTooltipBasic("[|cffffcc00V|r] Buy Pocket Catapult (Recipe)")
        ..setTooltipExtended("Unfold a calapult, that can you help to destroy the towers.\nLasts 120 seconds." +
                             "Requires:\n" +
                             "- Courier\n\n")
        ..setDescription("Unfold a calapult, that can you help to destroy the towers.\nLasts 120 seconds.")
        ..setName("Recipe of Pocket Catapult"))

public constant POCKET_CATAPULT = compiletime(
    new RecipeItem('wild')
        //..setArmorType(ArmorSoundType.Wood)
        ..setClassification("Charged")
        ..setInterfaceIcon(Icons.bTNCatapult)
        ..setTooltipBasic("[|cffffcc00C|r] Buy Pocket Catapult")
        ..setTooltipExtended("Unfold a calapult, that can you help to destroy the towers.\nLasts 120 seconds.")
        ..setDescription("Unfold a calapult, that can you help to destroy the towers.\nLasts 120 seconds.")
        ..setName("Pocket Catapult"))

@compiletime function genPocketCatapult()
    fixRecipe(POCKET_CATAPULT_RECIPE, POCKET_CATAPULT,
        
        SUMMON_COURIER.goldCost +
        POCKET_CATAPULT_RECIPE.goldCost,
        
        SUMMON_COURIER.lumberCost +
        POCKET_CATAPULT_RECIPE.lumberCost)

init
    new ItemRecipe()
        ..setRequiredItems(
            SUMMON_COURIER,
            POCKET_CATAPULT_RECIPE)
        ..setResultItem(POCKET_CATAPULT)

    POCKET_CATAPULT_RECIPE.initShopConditions()