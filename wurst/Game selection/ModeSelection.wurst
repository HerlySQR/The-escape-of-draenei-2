package ModeSelection

import initlater HeroSelection
import initlater MyBoard
import initlater Missions
import GeneratedValues

import TimerDialog
import StringUtils
import initlater AbilityData
import UpgradeObjEditing

public player selector
public timer maxSelection = CreateTimer()
public timerdialog window = CreateTimerDialog(maxSelection)
public string array modes

public enum Mode
    // 1
    SINGLE_TIMER
    VARIOUS_TIMERS
    KILL_COUNTER
    // 2
    YES_CREEPS
    ONLY_DE_AND_DR
    ONLY_NEUTRAL
    NO_CREEPS
    // 3
    ALL_ITEMS
    ONLY_COMSUMIBLES
    NO_RECIPES
    // 4
    NORMAL_PICK
    TRAITOR
    // 5
    LEVELING
    NOT_LEVELING

public Mode array whatMode

public interface ModeSelectionCallback
    function run()

let callbacks = new LinkedList<ModeSelectionCallback>()

public function onModesSelected(ModeSelectionCallback cb)
    callbacks.add(cb)

// Text tags to the modes

let lineHeight = 48.
let zOffset = 100.

let modesCenter1 = Rects.selectorDraenei.getCenter()
let modesLeft1 = Rects.selectorDraenei.getMinX()
let modesRight1 = Rects.selectorDraenei.getMaxX()
let modesTop1 = Rects.selectorDraenei.getMaxY()

let modesInformation1 = [
    createCenteredTexttag(vec3(modesCenter1.x, modesTop1 - 6*lineHeight, zOffset), "|cff7777aaGAMEMODES:|r", 15), // 0
    createTTEx(vec3(modesLeft1 + 12*lineHeight, modesCenter1.y + 5*lineHeight, zOffset), "|cffff40001. Timers|r", 12), // 1
    createTTEx(vec3(modesLeft1 + 13*lineHeight, modesCenter1.y + 4*lineHeight, zOffset), "One for each mission.", 12), // 2
    createTTEx(vec3(modesLeft1 + 12*lineHeight, modesCenter1.y, zOffset), "|cffff40002. Creeps|r", 12), // 3
    createTTEx(vec3(modesLeft1 + 13*lineHeight, modesCenter1.y - lineHeight, zOffset), "Yes.", 12), // 4
    createTTEx(vec3(modesRight1 - 12*lineHeight, modesCenter1.y + 7*lineHeight, zOffset), "|cffff40003. Shops|r", 12), // 5
    createTTEx(vec3(modesRight1 - 11*lineHeight, modesCenter1.y + 6*lineHeight, zOffset), "Normal.", 12), // 6
    createTTEx(vec3(modesRight1 - 12*lineHeight, modesCenter1.y + 2*lineHeight, zOffset), "|cffff40004. Selection|r", 12), // 7
    createTTEx(vec3(modesRight1 - 11*lineHeight, modesCenter1.y + lineHeight, zOffset), "Normal.", 12), // 8
    createTTEx(vec3(modesRight1 - 12*lineHeight, modesCenter1.y - 4*lineHeight, zOffset), "|cffff40005. Heros|r", 12), // 9
    createTTEx(vec3(modesRight1 - 11*lineHeight, modesCenter1.y - 5*lineHeight, zOffset), "Hero.", 12) // 10
]

let modesCenter2 = Rects.selectorDemon.getCenter()
let modesLeft2 = Rects.selectorDemon.getMinX()
let modesRight2 = Rects.selectorDemon.getMaxX()
let modesTop2 = Rects.selectorDemon.getMaxY()

let modesInformation2 = [
    createCenteredTexttag(vec3(modesCenter2.x, modesTop2 - 6*lineHeight, zOffset), "|cff7777aaGAMEMODES:|r", 15), // 0
    createTTEx(vec3(modesLeft2 + 12*lineHeight, modesCenter2.y + 5*lineHeight, zOffset), "|cffff40001. Timers|r", 12), // 1
    createTTEx(vec3(modesLeft2 + 13*lineHeight, modesCenter2.y + 4*lineHeight, zOffset), "One for each mission.", 12), // 2
    createTTEx(vec3(modesLeft2 + 12*lineHeight, modesCenter2.y, zOffset), "|cffff40002. Creeps|r", 12), // 3
    createTTEx(vec3(modesLeft2 + 13*lineHeight, modesCenter2.y - lineHeight, zOffset), "Yes.", 12), // 4
    createTTEx(vec3(modesRight2 - 12*lineHeight, modesCenter2.y + 7*lineHeight, zOffset), "|cffff40003. Shops|r", 12), // 5
    createTTEx(vec3(modesRight2 - 11*lineHeight, modesCenter2.y + 6*lineHeight, zOffset), "Normal.", 12), // 6
    createTTEx(vec3(modesRight2 - 12*lineHeight, modesCenter2.y + 2*lineHeight, zOffset), "|cffff40004. Selection|r", 12), // 7
    createTTEx(vec3(modesRight2 - 11*lineHeight, modesCenter2.y + lineHeight, zOffset), "Normal.", 12), // 8
    createTTEx(vec3(modesRight2 - 12*lineHeight, modesCenter2.y - 4*lineHeight, zOffset), "|cffff40005. Heros|r", 12), // 9
    createTTEx(vec3(modesRight2 - 11*lineHeight, modesCenter2.y - 5*lineHeight, zOffset), "Hero.", 12) // 10
]

function updateTimeMode()
    var text = ""
    if whatMode[1] == VARIOUS_TIMERS
        text = "One for each mission (Max " + (getTotalTimeOfVariousTimers()/60).toInt().toString() + ")."
    else if whatMode[1] == SINGLE_TIMER
        text = "One timer for the match (" + (quantityOneTimer/60.).toInt().toString() + " minutes)."
    modesInformation1[2].setText(text, 12)
    modesInformation2[2].setText(text, 12)

function updateCreepsMode()
    var text = ""
    if whatMode[2] == YES_CREEPS
        text = "All."
    else if whatMode[2] == ONLY_DE_AND_DR
        text = "Only draenei and demon."
    else if whatMode[2] == ONLY_NEUTRAL
        text = "Only neutral."
    else if whatMode[2] == NO_CREEPS
        text = "No."
    modesInformation1[4].setText(text, 12)
    modesInformation2[4].setText(text, 12)

function updateShopsMode()
    var text = ""
    if whatMode[3] == ALL_ITEMS
        text = "All."
    else if whatMode[3] == ONLY_COMSUMIBLES
        text = "Only consummibles."
    else if whatMode[3] == NO_RECIPES
        text = "No recipes."
    modesInformation1[6].setText(text, 12)
    modesInformation2[6].setText(text, 12)

function updateSelectionMode()
    var text = ""
    if whatMode[4] == NORMAL_PICK
        text = "Normal."
    else if whatMode[4] == TRAITOR
        text = "Traitor (All pick)."
    modesInformation1[8].setText(text, 12)
    modesInformation2[8].setText(text, 12)

function updateHeroMode()
    var text = ""
    if whatMode[5] == LEVELING
        text = "Hero (leveling up)."
    else if whatMode[5] == NOT_LEVELING
        text = "Classic (not leveling up)."
    modesInformation1[10].setText(text, 12)
    modesInformation2[10].setText(text, 12)

let MODE_SELECTOR = compiletime(UNIT_ID_GEN.next())

public constant modeSelector = createUnit(players[bj_PLAYER_NEUTRAL_VICTIM], MODE_SELECTOR, modesCenter1)

public function actionsSelect()
    maxSelection.pause()
    window.display(false)

    // Mode 1: Timers
    if whatMode[1] == VARIOUS_TIMERS
        modes[1] = "One timer for each mission (" + (getTotalTimeOfVariousTimers()/60.).toInt().toString() + " minutes max.)."
    else if whatMode[1] == SINGLE_TIMER
        modes[1] = "One timer for the match (" + (quantityOneTimer/60.).toInt().toString() + " minutes)."
    
    // Mode 2: Creeps
    if whatMode[2] == YES_CREEPS
        modes[2] = "Normal."
    else if whatMode[2] == ONLY_DE_AND_DR
        modes[2] = "No Neutrals."
    else if whatMode[2] == ONLY_NEUTRAL
        modes[2] = "No |cffff0000Draenei|r and |cff32cd32Demons|r."
    else if whatMode[2] == NO_CREEPS
        modes[2] = "No Creeps."

    // Mode 3: Shops
    if whatMode[3] == ALL_ITEMS
        modes[3] = "Normal."
    else if whatMode[3] == ONLY_COMSUMIBLES
        modes[3] = "Only consummibles."
        doAfter(25, () -> begin
            print("\nAs there are only consummibles items, you can only get wood by buying to balance the costs.")
            bj_questHintSound.play()
        end)
    else if whatMode[3] == NO_RECIPES
        modes[3] = "No recipes."

    // Mode 4: Selection
    if whatMode[4] == NORMAL_PICK
        modes[4] = "Normal."
    else if whatMode[4] == TRAITOR
        modes[4] = "Traitor (All pick)."

    // Mode 5: Leveling
    if whatMode[5] == LEVELING
        modes[5] = "Hero (Leveling up)."
    else if whatMode[5] == NOT_LEVELING
        modes[5] = "Classic (Not leveling up)."
    
    // Final
    for i = 0 to 10
        modesInformation1[i].setVisibility(false)
        modesInformation2[i].setVisibility(false)
    
    ClearTextMessages()
    
    bj_FORCE_ALL_PLAYERS.forEach(() -> begin
        let p = GetEnumPlayer()
        canPick.add(p)
        p.addGold(250)
        forUnitsSelected(p, u -> begin
            if localPlayer == p
                SelectUnit(u, true)
        end)
    end)

    printTimed("|cff7777aaGAMEMODES:|r", 15.)
    printTimed("|cffffcc00Timers:|r " + modes[1], 15.)
    printTimed("|cffffcc00Creeps:|r " + modes[2], 15.)
    printTimed("|cffffcc00Shops:|r " + modes[3], 15.)
    printTimed("|cffffcc00Selection:|r " + modes[4], 15.)
    printTimed("|cffffcc00Heros:|r  " + modes[5], 15.)

    for cb in callbacks
        cb.run()
    
    modeSelector.setOwner(players[bj_PLAYER_NEUTRAL_VICTIM], true)

let SELECTED = compiletime(UPGD_ID_GEN.next())
let LIMIT_REACHED = compiletime(UPGD_ID_GEN.next())

let CHECK_TIMERS = compiletime(new SelectorButton())
let CHECK_CREEPS = compiletime(new SelectorButton())
let CHECK_SHOP = compiletime(new SelectorButton())
let CHECK_SELECTION = compiletime(new SelectorButton())
let CHECK_HERO = compiletime(new SelectorButton())

let MULTIPLE_TIMERS = compiletime(new SelectorButton(SELECTED))
let SINGLE_TIMER = compiletime(new SelectorButton(SELECTED))
let DECREASE_TIME = compiletime(new SelectorButton(LIMIT_REACHED))
let INCREASE_TIME = compiletime(new SelectorButton(LIMIT_REACHED))

let NORMAL_CREEPS = compiletime(new SelectorButton(SELECTED))
let NO_NEUTRAL_CREEPS = compiletime(new SelectorButton(SELECTED))
let NO_DR_AND_DE_CREEPS = compiletime(new SelectorButton(SELECTED))
let NO_CREEPS = compiletime(new SelectorButton(SELECTED))

let NORMAL_SHOPS = compiletime(new SelectorButton(SELECTED))
let ONLY_CONSUMMIBLES_SHOPS = compiletime(new SelectorButton(SELECTED))
let NO_RECIPES_SHOPS = compiletime(new SelectorButton(SELECTED))

let NORMAL_SELECTION = compiletime(new SelectorButton(SELECTED))
let TRAITOR_SELECTION = compiletime(new SelectorButton(SELECTED))

let LEVELING_HERO = compiletime(new SelectorButton(SELECTED))
let NOT_LEVELING_HERO = compiletime(new SelectorButton(SELECTED))

let GO_BACK = compiletime(new SelectorButton())
let READY = compiletime(new SelectorButton())

let SELECTOR_MENU = new SelectorMenu()..addButton(CHECK_TIMERS, CHECK_CREEPS, CHECK_SHOP, CHECK_SELECTION, CHECK_HERO, READY)

let TIMERS_MENU = new SelectorMenu()..addButton(MULTIPLE_TIMERS, SINGLE_TIMER, DECREASE_TIME, INCREASE_TIME, GO_BACK)
let CREEPS_MENU = new SelectorMenu()..addButton(NORMAL_CREEPS, NO_NEUTRAL_CREEPS, NO_DR_AND_DE_CREEPS, NO_CREEPS, GO_BACK)
let SHOPS_MENU = new SelectorMenu()..addButton(NORMAL_SHOPS, ONLY_CONSUMMIBLES_SHOPS, NO_RECIPES_SHOPS, GO_BACK)
let SELECTION_MENU = new SelectorMenu()..addButton(NORMAL_SELECTION, TRAITOR_SELECTION, GO_BACK)
let HERO_MENU = new SelectorMenu()..addButton(LEVELING_HERO, NOT_LEVELING_HERO, GO_BACK)

public function initSelector()
    modeSelector.unpause()
    SELECTOR_MENU.setActual()
    modeSelector.setOwner(selector, true)
    if THE_DRAENEI.has(selector)
        modeSelector.setPos(modesCenter1)
    else
        modeSelector.setPos(modesCenter2)
    selector.selectSingle(modeSelector)
    for i = 0 to 10
        modesInformation1[i].setVisibility(THE_DRAENEI.has(localPlayer))
        modesInformation2[i].setVisibility(THE_DEMONS.has(localPlayer))

init
    nullTimer() -> 
        onReset(true, () -> begin
            whatMode[1] = SINGLE_TIMER
            whatMode[2] = YES_CREEPS
            whatMode[3] = ALL_ITEMS
            whatMode[4] = NORMAL_PICK
            whatMode[5] = LEVELING

            updateTimeMode()
            updateCreepsMode()
            updateShopsMode()
            updateSelectionMode()
            updateHeroMode()
            
            SINGLE_TIMER.disable()
            NORMAL_CREEPS.disable()
            NORMAL_SHOPS.disable()
            NORMAL_SELECTION.disable()
            LEVELING_HERO.disable()
        end)

    // Timers menu

    CHECK_TIMERS.onPress(() -> begin
        TIMERS_MENU.setActual()
    end)

    MULTIPLE_TIMERS.onPress(() -> begin
        whatMode[1] = VARIOUS_TIMERS
        handicapVariousTimers = 0.8
        MULTIPLE_TIMERS.disable()
        SINGLE_TIMER.enable()
        DECREASE_TIME.enable()
        INCREASE_TIME.enable()
        updateTimeMode()
    end)

    SINGLE_TIMER.onPress(() -> begin
        whatMode[1] = SINGLE_TIMER
        quantityOneTimer = 2400.
        MULTIPLE_TIMERS.enable()
        SINGLE_TIMER.disable()
        DECREASE_TIME.enable()
        INCREASE_TIME.enable()
        updateTimeMode()
    end)

    DECREASE_TIME.onPress(() -> begin
        if whatMode[1] == VARIOUS_TIMERS
            handicapVariousTimers -= HANDICAP_VARIOUS_TIMERS_STEP
            if handicapVariousTimers <= HANDICAP_VARIOUS_TIMERS_MIN
                DECREASE_TIME.disable()
        else if whatMode[1] == SINGLE_TIMER
            quantityOneTimer -= QUANTITY_ONE_TIMER_STEP
            if quantityOneTimer <= QUANTITY_ONE_TIMER_MIN
                DECREASE_TIME.disable()
        if not INCREASE_TIME.isEnabled
            INCREASE_TIME.enable()
        updateTimeMode()
    end)

    INCREASE_TIME.onPress(() -> begin
        if whatMode[1] == VARIOUS_TIMERS
            handicapVariousTimers += HANDICAP_VARIOUS_TIMERS_STEP
            if handicapVariousTimers >= HANDICAP_VARIOUS_TIMERS_MAX
                INCREASE_TIME.disable()
        else if whatMode[1] == SINGLE_TIMER
            quantityOneTimer += QUANTITY_ONE_TIMER_STEP
            if quantityOneTimer >= QUANTITY_ONE_TIMER_MAX
                INCREASE_TIME.disable()
        if not DECREASE_TIME.isEnabled
            DECREASE_TIME.enable()
        updateTimeMode()
    end)

    // Creeps menu

    CHECK_CREEPS.onPress(() -> begin
        CREEPS_MENU.setActual()
    end)

    NORMAL_CREEPS.onPress(() -> begin
        whatMode[2] = YES_CREEPS
        NORMAL_CREEPS.disable()
        NO_NEUTRAL_CREEPS.enable()
        NO_DR_AND_DE_CREEPS.enable()
        NO_CREEPS.enable()
        updateCreepsMode()
    end)

    NO_NEUTRAL_CREEPS.onPress(() -> begin
        whatMode[2] = ONLY_DE_AND_DR
        NORMAL_CREEPS.enable()
        NO_NEUTRAL_CREEPS.disable()
        NO_DR_AND_DE_CREEPS.enable()
        NO_CREEPS.enable()
        updateCreepsMode()
    end)

    NO_DR_AND_DE_CREEPS.onPress(() -> begin
        whatMode[2] = ONLY_NEUTRAL
        NORMAL_CREEPS.enable()
        NO_NEUTRAL_CREEPS.enable()
        NO_DR_AND_DE_CREEPS.disable()
        NO_CREEPS.enable()
        updateCreepsMode()
    end)

    NO_CREEPS.onPress(() -> begin
        whatMode[2] = NO_CREEPS
        NORMAL_CREEPS.enable()
        NO_NEUTRAL_CREEPS.enable()
        NO_DR_AND_DE_CREEPS.enable()
        NO_CREEPS.disable()
        updateCreepsMode()
    end)

    // Shops menu

    CHECK_SHOP.onPress(() -> begin
        SHOPS_MENU.setActual()
    end)

    NORMAL_SHOPS.onPress(() -> begin
        whatMode[3] = ALL_ITEMS
        NORMAL_SHOPS.disable()
        ONLY_CONSUMMIBLES_SHOPS.enable()
        NO_RECIPES_SHOPS.enable()
        updateShopsMode()
    end)

    ONLY_CONSUMMIBLES_SHOPS.onPress(() -> begin
        whatMode[3] = ONLY_COMSUMIBLES
        NORMAL_SHOPS.enable()
        ONLY_CONSUMMIBLES_SHOPS.disable()
        NO_RECIPES_SHOPS.enable()
        updateShopsMode()
    end)

    NO_RECIPES_SHOPS.onPress(() -> begin
        whatMode[3] = NO_RECIPES
        NORMAL_SHOPS.enable()
        ONLY_CONSUMMIBLES_SHOPS.enable()
        NO_RECIPES_SHOPS.disable()
        updateShopsMode()
    end)

    // Selection menu

    CHECK_SELECTION.onPress(() -> begin
        SELECTION_MENU.setActual()
    end)

    NORMAL_SELECTION.onPress(() -> begin
        whatMode[4] = NORMAL_PICK
        NORMAL_SELECTION.disable()
        TRAITOR_SELECTION.enable()
        updateSelectionMode()
    end)

    TRAITOR_SELECTION.onPress(() -> begin
        whatMode[4] = TRAITOR
        NORMAL_SELECTION.enable()
        TRAITOR_SELECTION.disable()
        updateSelectionMode()
    end)

    // Hero menu

    CHECK_HERO.onPress(() -> begin
        HERO_MENU.setActual()
    end)

    LEVELING_HERO.onPress(() -> begin
        whatMode[5] = LEVELING
        LEVELING_HERO.disable()
        NOT_LEVELING_HERO.enable()
        updateHeroMode()
    end)

    NOT_LEVELING_HERO.onPress(() -> begin
        whatMode[5] = NOT_LEVELING
        LEVELING_HERO.enable()
        NOT_LEVELING_HERO.disable()
        updateHeroMode()
    end)

    // -- --

    GO_BACK.onPress(() -> begin
        SELECTOR_MENU.setActual()
    end)

    READY.onPress(function actionsSelect)

class SelectorMenu
    static SelectorMenu actual = null
    
    LinkedList<SelectorButton> buttons = new LinkedList<SelectorButton>()

    function addButton(vararg SelectorButton newButtons)
        for def in newButtons
            buttons.add(def)
    
    function setActual()
        if actual != null
            for b in actual.buttons
                if b.isEnabled
                    modeSelector.removeAbility(b.getNewId())
                else
                    modeSelector.removeAbility(b.disabled.getNewId())
        
        for b in buttons
            if b.isEnabled
                modeSelector.addAbility(b.getNewId())
            else
                modeSelector.addAbility(b.disabled.getNewId())
        
        actual = this

class SelectorButton extends ChannelAbilityPreset
    SelectorButton disabled
    string hotkey = "Q"
    boolean isEnabled = true

    function onPress(code c)
        registerSpellEffectEvent(newId, c)
    
    function enable()
        isEnabled = true
        if modeSelector.hasAbility(newId) or modeSelector.hasAbility(disabled.newId)
            modeSelector.removeAbility(disabled.newId)
            modeSelector.addAbility(newId)
    
    function disable()
        isEnabled = false
        if modeSelector.hasAbility(newId) or modeSelector.hasAbility(disabled.newId)
            modeSelector.removeAbility(newId)
            modeSelector.addAbility(disabled.newId)

    construct()
        super(ABIL_ID_GEN.next(), 1, true)
        basic()
    
    construct(int disableCondition)
        super(ABIL_ID_GEN.next(), 1, true)
        basic()
        this.disabled = new SelectorButton()
            ..setRequirements(disableCondition.toRawCode())

    function basic()
        makeUnitSpell(0, 0)
        setTooltipNormalExtended(1, "")
    
    function setIcon(string value)
        setIconNormal(value)
        if disabled != null
            disabled.setIconNormal(value)

    function setHotkey(string data)
        setHotkeyNormal(data)
        var x = 0
        var y = 0
        switch data
            case "Q"
                x = 0
                y = 0
            case "W"
                x = 1
                y = 0
            case "E"
                x = 2
                y = 0
            case "R"
                x = 3
                y = 0
            case "A"
                x = 0
                y = 1
            case "S"
                x = 1
                y = 1
            case "Z"
                x = 0
                y = 2
            case "V"
                x = 3
                y = 2
        presetButtonPosNormal(x, y)
        if disabled != null
            disabled.presetButtonPosNormal(x, y)
        hotkey = data
    
    override function setName(string value)
        super.setName(value)
        super.setTooltipNormal(1, "[|cffffcc00" + hotkey + "|r] " + value)
        if disabled != null
            disabled.setName(value)

@compiletime function gen()
    new UnitDefinition(MODE_SELECTOR, 'ewsp')
        ..setName("Mode selector")
        ..setUpgradesUsed("")
        ..setStructuresBuilt("")
        ..setManaRegeneration(0)
        ..setManaInitialAmount(0)
        ..setManaMaximum(0)
        ..setCollisionSize(0.0)
        ..setFoodCost(0)
        ..setArmorType(ArmorType.Divine)
        ..setIconGameInterface(Icons.bTNTemp)
        ..setSpeedBase(0)
        ..setModelFile("dummy.mdl")
        ..setSightRadiusDay(1)
        ..setSightRadiusNight(1)
        ..setUnitClassification("_")
        ..setTooltipBasic("")
        ..setAttacksEnabled(0)
        ..setNormalAbilities(commaList(AbilityIds.invulnerable, AbilityIds.permanentInvisibility))
        ..setMovementType(MovementType.Fly)
    
    CHECK_TIMERS
        ..setIcon(Icons.bTNCrystalBall)
        ..setHotkey("Q")
        ..setName("Check timers")
    CHECK_CREEPS
        ..setIcon(Icons.bTNGrunt)
        ..setHotkey("W")
        ..setName("Check creeps")
    CHECK_SHOP
        ..setIcon(Icons.bTNArcaneVault)
        ..setHotkey("E")
        ..setName("Check shop")
    CHECK_SELECTION
        ..setIcon(Icons.bTNControlMagic)
        ..setHotkey("R")
        ..setName("Check selection")
    CHECK_HERO
        ..setIcon(Icons.bTNAltarOfKings)
        ..setHotkey("A")
        ..setName("Check hero")

    SINGLE_TIMER
        ..setIcon(Icons.bTN3M1)
        ..setHotkey("Q")
        ..setName("Single timer")
    MULTIPLE_TIMERS
        ..setIcon(Icons.bTN3M3)
        ..setHotkey("W")
        ..setName("Multiple timers")
    DECREASE_TIME
        ..setIcon(Icons.bTNReplay_SpeedDown)
        ..setHotkey("A")
        ..setName("Decrease time")
    INCREASE_TIME
        ..setIcon(Icons.bTNReplay_SpeedUp)
        ..setHotkey("S")
        ..setName("Increase time")

    NORMAL_CREEPS
        ..setIcon(Icons.bTNDranai)
        ..setHotkey("Q")
        ..setName("Normal creeps")
    NO_DR_AND_DE_CREEPS
        ..setIcon(Icons.bTNChaosGrunt)
        ..setHotkey("W")
        ..setName("No draenei and demon creeps")
    NO_NEUTRAL_CREEPS
        ..setIcon(Icons.bTNPurpleFelhound)
        ..setHotkey("E")
        ..setName("No neutral creeps")
    NO_CREEPS
        ..setIcon(Icons.bTNDranaiHut)
        ..setHotkey("R")
        ..setName("No creeps")

    NORMAL_SHOPS
        ..setIcon(Icons.bTNVoodooLounge)
        ..setHotkey("Q")
        ..setName("Normal shops")
    ONLY_CONSUMMIBLES_SHOPS
        ..setIcon(Icons.bTNMerchant)
        ..setHotkey("W")
        ..setName("Only comsummibles")
    NO_RECIPES_SHOPS
        ..setIcon(Icons.bTNBlackMarket)
        ..setHotkey("E")
        ..setName("No recipes")

    NORMAL_SELECTION
        ..setIcon(Icons.bTNArthas)
        ..setHotkey("Q")
        ..setName("Normal pick")
    TRAITOR_SELECTION
        ..setIcon(Icons.bTNHeroDeathKnight)
        ..setHotkey("W")
        ..setName("Traitor (All pick)")

    LEVELING_HERO
        ..setIcon(Icons.bTNAltarOfStorms)
        ..setHotkey("Q")
        ..setName("Leveling")
    NOT_LEVELING_HERO
        ..setIcon(Icons.bTNAltarOfElders)
        ..setHotkey("W")
        ..setName("Not leveling")

    READY
        ..setIcon(Imports.bTNGreen_Check)
        ..setHotkey("Z")
        ..setName("You are ready")
    GO_BACK
        ..setIcon(Icons.bTNReplay_Play)
        ..setHotkey("V")
        ..setName("Go back")

    new UpgradeDefinition(SELECTED)
        ..setName(1, "Selected")
    new UpgradeDefinition(LIMIT_REACHED)
        ..setName(1, "Limit reached")