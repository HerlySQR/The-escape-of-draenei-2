package HeroSelection

import ClosureTimers
import ClosureForGroups
import HashMap
import Fx
import Abilities
import ErrorHandling

import GeneratedValues
import ModeSelection
import Reset
import public HeroType
import initlater MyBoard
import ArrayList
import Imports
import SelectionEvent
//import ReferenceSystem

public rect actDrSpawn
public rect actDeSpawn

public force canPick = CreateForce()

public constant heroModel = new IterableMap<int, unit>()

let seeDraenei = createVision(DEMON, Rects.selectorDraenei, true)
let seeDemons = createVision(DRAENEI, Rects.selectorDemon, true)
let herosToPick = CreateGroup()

int array clicks
boolean array youSelected
Fx array arrow

init
    onModesSelected(() -> begin
        if whatMode[4] == TRAITOR
            seeDraenei.start()
            seeDemons.start()

        forUnitsInRect(bj_mapInitialPlayableArea, u -> begin
            if u.isType(UNIT_TYPE_HERO)
                and ((u.getOwner() == DRAENEI and Rects.selectorDraenei.contains(u.getPos()))
                or (u.getOwner() == DEMON and Rects.selectorDemon.contains(u.getPos())))
                u.pause()
                SuspendHeroXP(u, true)
                u.setInvulnerable(true)
                herosToPick.add(u)

                let id = u.getTypeId()

                if whatMode[5] == LEVELING
                    if id == HeroType.get(id).getL()
                        heroModel.put(id, u)
                    else if id == HeroType.get(id).getNL()
                        herosToPick.remove(u)
                        let newUnit = u.replace(HeroType.get(id).getL())
                        heroModel.put(id, newUnit)
                        herosToPick.add(newUnit)
                else if whatMode[5] == NOT_LEVELING
                    if id == HeroType.get(id).getNL()
                        heroModel.put(id, u)
                    else if id == HeroType.get(id).getL()
                        herosToPick.remove(u)
                        let newUnit = u.replace(HeroType.get(id).getNL())
                        heroModel.put(id, newUnit)
                        herosToPick.add(newUnit)
        end)
    end)

    onReset(true, () -> begin
        seeDraenei.stop()
        seeDemons.stop()

        actDrSpawn = Rects.respawn1
        actDeSpawn = Rects.respawn2
    end)

    onReset(false, () -> begin
        for i = 1 to 10
            for m in hero[i].inventory()
                m.remove()
    end)

    createVision(DRAENEI, Rects.selectorDraenei, true).start()
    createVision(DEMON, Rects.selectorDemon, true).start()
        
    // If you select
    onUnitSelected((playerSelector, heroSelected) -> begin
        if canPick.has(playerSelector) and herosToPick.has(heroSelected)
            if not (whatMode[4] == NORMAL_PICK and playerSelector.isEnemyOf(heroSelected.getOwner()))
                let id = playerSelector.getId()

                if clicks[id] == 1
                    let c = playerSelector.getId()
                    let temp = heroSelected.getTypeId()
                    
                    hero[c] = createUnit(playerSelector, temp, heroSelected.getPos(), UNIT_FACING)
                    if whatMode[5] == NOT_LEVELING
                        SuspendHeroXP(hero[c], true)
                    gameBoard.setItemIcon(row[c], 0, HeroType.get(hero[c]).getIcon())
                    /* TODO
                    if udg_Primera_persona
                        udg_Unidad_que_sigo[c] = hero[c]
                        udg_Distancia_al_objetivo[c] = 1024.00*/

                    canPick.remove(playerSelector)

                    vec2 pos
                    if THE_DRAENEI.has(playerSelector)
                        pos = actDrSpawn.randomPoint()
                    else
                        pos = actDeSpawn.randomPoint()
                    hero[c].setPos(pos)
                    if localPlayer == playerSelector
                        panCameraToTimed(pos, 0.00)
                    playerSelector.selectSingle(hero[c])
                    if whatMode[5] == LEVELING
                        heroSelected.hide()
                
                    nullTimer(() -> runDeselectionEvent(playerSelector, heroSelected))
                else
                    clicks[id]++
                
                if not youSelected[id]
                    youSelected[id] = true
                    arrow[id] = new Fx(heroSelected.getPos(), UNIT_FACING, Abilities.aneuTarget)
                        ..setPlayerColor(playerSelector.getColor())
                        ..setZ(240.)
                
                doAfter(0.95, () -> begin
                    if clicks[id] > 0
                        clicks[id]--
                end)
    end)

    // If you deselect
    onUnitDeselected((p, u) -> begin
        if herosToPick.has(u)
            let id = p.getId()
            youSelected[id] = false
            if arrow[id] != null
                destroy arrow[id]
                arrow[id] = null
            clicks[id] = 0
    end)

// Distribute the heros

constant MAX_DIST = 1024.

tuple vec2List(ArrayList<real> xVals, ArrayList<real> yVals)

function vec2List.get(int index) returns vec2
    return vec2(this.xVals.get(index), this.yVals.get(index))

function vec2List.destr()
    destroy this.xVals
    destroy this.yVals

function createDistribution(int quantity, real dist, vec2 center) returns vec2List
    if quantity == 0
        error("You are distributing 0 elements")
    
    //let ref = new ReferenceSystem(center, angle(0), dist)
    let xVals = new ArrayList<real>()
    let yVals = new ArrayList<real>()
    let rows = new HashMap<int, int>()
    let maxSize = (MAX_DIST/dist).toInt() + 1

    var remain = quantity
    
    rows.put(0, 1)
    remain--

    // Create the distribution

    var rowsNumber = 0

    while remain > 0
        if rows.get(0) < maxSize
            var isSpace = false
            for i = 0 to rowsNumber - 1
                let nextRow = i+1
                if rows.get(nextRow) < rows.get(i) - nextRow
                    isSpace = true
                    rows.put(nextRow, rows.get(nextRow) + 1)
                    remain--
                    break
                else if rows.get(-nextRow) < rows.get(i) - nextRow
                    isSpace = true
                    rows.put(-nextRow, rows.get(-nextRow) + 1)
                    remain--
                    break
            if not isSpace
                if rows.get(rowsNumber + 1) < rows.get(rowsNumber) - (rowsNumber + 1)
                    rowsNumber++
                else
                    rows.put(0, rows.get(0) + 1)
                    remain--
        else
            for i = 1 to rowsNumber
                if rows.get(i) < rows.get(i-1)
                    rows.put(i, rows.get(i) + 1)
                    remain--
                else if rows.get(-i) < rows.get(i+1)
                    rows.put(-i, rows.get(-i) + 1)
                    remain--
                else
                    rowsNumber++

    // Place the locations

    for row = rowsNumber downto -rowsNumber
        let size = rows.get(row)
        if size != 0
            let width = (size - 1) / 2
            var j = -width - 1.
            while j < width
                j += 1.
                let pos = dist * vec2(j, row.toReal()) + center//ref.convertVec2(vec2(j, row.toReal()))
                xVals.add(pos.x)
                yVals.add(pos.y)

    //destroy ref
    destroy rows

    return vec2List(xVals, yVals)

init
    var maxDr = 0
    var maxDe = 0

    for hero in HeroType
        if hero.getRace() == Orc
            maxDr++
        else if hero.getRace() == Undead
            maxDe++
    
    let drPoints = createDistribution(maxDr, 256., vec2(-6400., -8784.))
    let dePoints = createDistribution(maxDe, 256., vec2(-8448., -8784.))

    var i = 1
    var j = 1
    for hero in HeroType
        if hero.getRace() == Orc
            let pos = drPoints.get(i)
            createUnit(DRAENEI, hero.getL(), pos, UNIT_FACING).setInvulnerable(true)
            addEffect(Imports.attakAura, pos)
            i++
        else if hero.getRace() == Undead
            let pos = dePoints.get(j)
            createUnit(DEMON, hero.getL(), pos, UNIT_FACING).setInvulnerable(true)
            addEffect(Imports.attakAura, pos)
            j++
    
    drPoints.destr()
    dePoints.destr()
